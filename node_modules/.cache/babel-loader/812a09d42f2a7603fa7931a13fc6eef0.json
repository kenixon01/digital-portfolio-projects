{"ast":null,"code":"'use strict';\n\n// Resolves the default auth mechanism according to\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(ismaster) {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.indexOf('SCRAM-SHA-256') >= 0 ? 'scram-sha-256' : 'scram-sha-1';\n    }\n\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (ismaster.maxWireVersion >= 3) {\n      return 'scram-sha-1';\n    }\n  }\n\n  // Default for wireprotocol < 3\n  return 'mongocr';\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @class\n * @property {string} mechanism The method used to authenticate\n * @property {string} [username] The username used for authentication\n * @property {string} [password] The password used for authentication\n * @property {string} [source] The database that the user should authenticate against\n * @property {object} [mechanismProperties] Special properties used by some types of auth mechanisms\n */\nclass MongoCredentials {\n  /**\n   * Creates a new MongoCredentials object\n   * @param {object} [options]\n   * @param {string} [options.username] The username used for authentication\n   * @param {string} [options.password] The password used for authentication\n   * @param {string} [options.source] The database that the user should authenticate against\n   * @param {string} [options.mechanism] The method used to authenticate\n   * @param {object} [options.mechanismProperties] Special properties used by some types of auth mechanisms\n   */\n  constructor(options) {\n    options = options || {};\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source || options.db;\n    this.mechanism = options.mechanism || 'default';\n    this.mechanismProperties = options.mechanismProperties || {};\n    if (/MONGODB-AWS/i.test(this.mechanism)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n        this.mechanismProperties.AWS_SESSION_TOKEN = process.env.AWS_SESSION_TOKEN;\n      }\n    }\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n\n  /**\n   * Determines if two MongoCredentials objects are equivalent\n   * @param {MongoCredentials} other another MongoCredentials object\n   * @returns {boolean} true if the two objects are equal.\n   */\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param {Object} [ismaster] An ismaster response from the server\n   * @returns {MongoCredentials}\n   */\n  resolveAuthMechanism(ismaster) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (/DEFAULT/i.test(this.mechanism)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(ismaster),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n    return this;\n  }\n}\nmodule.exports = {\n  MongoCredentials\n};","map":{"version":3,"names":["getDefaultAuthMechanism","ismaster","Array","isArray","saslSupportedMechs","indexOf","maxWireVersion","MongoCredentials","constructor","options","username","password","source","db","mechanism","mechanismProperties","test","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","Object","freeze","equals","other","resolveAuthMechanism","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/auth/mongo_credentials.js"],"sourcesContent":["'use strict';\n\n// Resolves the default auth mechanism according to\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(ismaster) {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.indexOf('SCRAM-SHA-256') >= 0\n        ? 'scram-sha-256'\n        : 'scram-sha-1';\n    }\n\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (ismaster.maxWireVersion >= 3) {\n      return 'scram-sha-1';\n    }\n  }\n\n  // Default for wireprotocol < 3\n  return 'mongocr';\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @class\n * @property {string} mechanism The method used to authenticate\n * @property {string} [username] The username used for authentication\n * @property {string} [password] The password used for authentication\n * @property {string} [source] The database that the user should authenticate against\n * @property {object} [mechanismProperties] Special properties used by some types of auth mechanisms\n */\nclass MongoCredentials {\n  /**\n   * Creates a new MongoCredentials object\n   * @param {object} [options]\n   * @param {string} [options.username] The username used for authentication\n   * @param {string} [options.password] The password used for authentication\n   * @param {string} [options.source] The database that the user should authenticate against\n   * @param {string} [options.mechanism] The method used to authenticate\n   * @param {object} [options.mechanismProperties] Special properties used by some types of auth mechanisms\n   */\n  constructor(options) {\n    options = options || {};\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source || options.db;\n    this.mechanism = options.mechanism || 'default';\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (/MONGODB-AWS/i.test(this.mechanism)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (\n        this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n        process.env.AWS_SESSION_TOKEN != null\n      ) {\n        this.mechanismProperties.AWS_SESSION_TOKEN = process.env.AWS_SESSION_TOKEN;\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n\n  /**\n   * Determines if two MongoCredentials objects are equivalent\n   * @param {MongoCredentials} other another MongoCredentials object\n   * @returns {boolean} true if the two objects are equal.\n   */\n  equals(other) {\n    return (\n      this.mechanism === other.mechanism &&\n      this.username === other.username &&\n      this.password === other.password &&\n      this.source === other.source\n    );\n  }\n\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param {Object} [ismaster] An ismaster response from the server\n   * @returns {MongoCredentials}\n   */\n  resolveAuthMechanism(ismaster) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (/DEFAULT/i.test(this.mechanism)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(ismaster),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n}\n\nmodule.exports = { MongoCredentials };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}