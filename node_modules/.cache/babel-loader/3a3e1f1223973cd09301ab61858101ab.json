{"ast":null,"code":"'use strict';\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst MongoCredentials = require('./mongo_credentials').MongoCredentials;\nconst MongoError = require('../error').MongoError;\nconst crypto = require('crypto');\nconst http = require('http');\nconst maxWireVersion = require('../utils').maxWireVersion;\nconst url = require('url');\nlet aws4;\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  aws4 = require('aws4');\n} catch (e) {\n  // don't do anything;\n}\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nclass MongoDBAWS extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (maxWireVersion(connection) < 9) {\n      callback(new MongoError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n      return;\n    }\n    if (aws4 == null) {\n      callback(new MongoError('MONGODB-AWS authentication requires the `aws4` module, please install it as a dependency of your project'));\n      return;\n    }\n    if (credentials.username == null) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err) return callback(err);\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n      return;\n    }\n    const db = credentials.source;\n    const bson = this.bson;\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken\n    } : accessKeyId && secretAccessKey ? {\n      accessKeyId,\n      secretAccessKey\n    } : undefined;\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: bson.serialize({\n          r: nonce,\n          p: ASCII_N\n        })\n      };\n      connection.command(`${db}.$cmd`, saslStart, (err, result) => {\n        if (err) return callback(err);\n        const res = result.result;\n        const serverResponse = bson.deserialize(res.payload.buffer);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n          callback(new MongoError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n          return;\n        }\n        if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n          callback(new MongoError('Server nonce does not begin with client nonce'));\n          return;\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          callback(new MongoError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = aws4.sign({\n          method: 'POST',\n          host,\n          region: deriveRegion(serverResponse.h),\n          service: 'sts',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Content-Length': body.length,\n            'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n            'X-MongoDB-GS2-CB-Flag': 'n'\n          },\n          path: '/',\n          body\n        }, awsCredentials);\n        const authorization = options.headers.Authorization;\n        const date = options.headers['X-Amz-Date'];\n        const payload = {\n          a: authorization,\n          d: date\n        };\n        if (sessionToken) {\n          payload.t = sessionToken;\n        }\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: bson.serialize(payload)\n        };\n        connection.command(`${db}.$cmd`, saslContinue, err => {\n          if (err) return callback(err);\n          callback();\n        });\n      });\n    });\n  }\n}\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (creds.AccessKeyId == null || creds.SecretAccessKey == null || creds.Token == null) {\n      callback(new MongoError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n    callback(undefined, new MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: 'MONGODB-AWS',\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    }));\n  }\n\n  // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, undefined, (err, res) => {\n      if (err) return callback(err);\n      done(res);\n    });\n    return;\n  }\n\n  // Otherwise assume we are on an EC2 instance\n\n  // get a token\n\n  request(`${AWS_EC2_URI}/latest/api/token`, {\n    method: 'PUT',\n    json: false,\n    headers: {\n      'X-aws-ec2-metadata-token-ttl-seconds': 30\n    }\n  }, (err, token) => {\n    if (err) return callback(err);\n\n    // get role name\n    request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    }, (err, roleName) => {\n      if (err) return callback(err);\n\n      // get temp credentials\n      request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }, (err, creds) => {\n        if (err) return callback(err);\n        done(creds);\n      });\n    });\n  });\n}\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n  return parts[1];\n}\nfunction request(uri, options, callback) {\n  options = Object.assign({\n    method: 'GET',\n    timeout: 10000,\n    json: true\n  }, url.parse(uri), options);\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n    let data = '';\n    res.on('data', d => data += d);\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        callback(new MongoError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n  req.on('error', err => callback(err));\n  req.end();\n}\nmodule.exports = MongoDBAWS;","map":{"version":3,"names":["AuthProvider","require","MongoCredentials","MongoError","crypto","http","maxWireVersion","url","aws4","e","ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","MongoDBAWS","auth","authContext","callback","connection","credentials","username","makeTempCredentials","err","tempCredentials","db","source","bson","accessKeyId","secretAccessKey","password","sessionToken","mechanismProperties","AWS_SESSION_TOKEN","awsCredentials","undefined","randomBytes","nonce","saslStart","mechanism","payload","serialize","r","p","command","result","res","serverResponse","deserialize","buffer","host","h","serverNonce","s","length","compare","indexOf","body","options","sign","method","region","deriveRegion","service","headers","toString","path","authorization","Authorization","date","a","d","t","saslContinue","conversationId","done","creds","AccessKeyId","SecretAccessKey","Token","process","env","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","request","json","token","roleName","parts","split","uri","Object","assign","timeout","parse","req","setEncoding","data","on","parsed","JSON","end","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/auth/mongodb_aws.js"],"sourcesContent":["'use strict';\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst MongoCredentials = require('./mongo_credentials').MongoCredentials;\nconst MongoError = require('../error').MongoError;\nconst crypto = require('crypto');\nconst http = require('http');\nconst maxWireVersion = require('../utils').maxWireVersion;\nconst url = require('url');\n\nlet aws4;\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  aws4 = require('aws4');\n} catch (e) {\n  // don't do anything;\n}\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\n\nclass MongoDBAWS extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n\n    if (maxWireVersion(connection) < 9) {\n      callback(new MongoError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n      return;\n    }\n\n    if (aws4 == null) {\n      callback(\n        new MongoError(\n          'MONGODB-AWS authentication requires the `aws4` module, please install it as a dependency of your project'\n        )\n      );\n\n      return;\n    }\n\n    if (credentials.username == null) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err) return callback(err);\n\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n\n      return;\n    }\n\n    const db = credentials.source;\n    const bson = this.bson;\n\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials =\n      accessKeyId && secretAccessKey && sessionToken\n        ? { accessKeyId, secretAccessKey, sessionToken }\n        : accessKeyId && secretAccessKey\n        ? { accessKeyId, secretAccessKey }\n        : undefined;\n\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: bson.serialize({ r: nonce, p: ASCII_N })\n      };\n\n      connection.command(`${db}.$cmd`, saslStart, (err, result) => {\n        if (err) return callback(err);\n\n        const res = result.result;\n        const serverResponse = bson.deserialize(res.payload.buffer);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n          callback(\n            new MongoError(`Invalid server nonce length ${serverNonce.length}, expected 64`)\n          );\n          return;\n        }\n\n        if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n          callback(new MongoError('Server nonce does not begin with client nonce'));\n          return;\n        }\n\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          callback(new MongoError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = aws4.sign(\n          {\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'Content-Length': body.length,\n              'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n              'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n          },\n          awsCredentials\n        );\n\n        const authorization = options.headers.Authorization;\n        const date = options.headers['X-Amz-Date'];\n        const payload = { a: authorization, d: date };\n        if (sessionToken) {\n          payload.t = sessionToken;\n        }\n\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: bson.serialize(payload)\n        };\n\n        connection.command(`${db}.$cmd`, saslContinue, err => {\n          if (err) return callback(err);\n          callback();\n        });\n      });\n    });\n  }\n}\n\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (creds.AccessKeyId == null || creds.SecretAccessKey == null || creds.Token == null) {\n      callback(new MongoError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n\n    callback(\n      undefined,\n      new MongoCredentials({\n        username: creds.AccessKeyId,\n        password: creds.SecretAccessKey,\n        source: credentials.source,\n        mechanism: 'MONGODB-AWS',\n        mechanismProperties: {\n          AWS_SESSION_TOKEN: creds.Token\n        }\n      })\n    );\n  }\n\n  // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(\n      `${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`,\n      undefined,\n      (err, res) => {\n        if (err) return callback(err);\n        done(res);\n      }\n    );\n\n    return;\n  }\n\n  // Otherwise assume we are on an EC2 instance\n\n  // get a token\n\n  request(\n    `${AWS_EC2_URI}/latest/api/token`,\n    { method: 'PUT', json: false, headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 } },\n    (err, token) => {\n      if (err) return callback(err);\n\n      // get role name\n      request(\n        `${AWS_EC2_URI}/${AWS_EC2_PATH}`,\n        { json: false, headers: { 'X-aws-ec2-metadata-token': token } },\n        (err, roleName) => {\n          if (err) return callback(err);\n\n          // get temp credentials\n          request(\n            `${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`,\n            { headers: { 'X-aws-ec2-metadata-token': token } },\n            (err, creds) => {\n              if (err) return callback(err);\n              done(creds);\n            }\n          );\n        }\n      );\n    }\n  );\n}\n\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\nfunction request(uri, options, callback) {\n  options = Object.assign(\n    {\n      method: 'GET',\n      timeout: 10000,\n      json: true\n    },\n    url.parse(uri),\n    options\n  );\n\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n\n    let data = '';\n    res.on('data', d => (data += d));\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        callback(new MongoError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n\n  req.on('error', err => callback(err));\n  req.end();\n}\n\nmodule.exports = MongoDBAWS;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAiB,CAAC,CAACD,YAAY;AAC5D,MAAME,gBAAgB,GAAGD,OAAO,CAAC,qBAAqB,CAAC,CAACC,gBAAgB;AACxE,MAAMC,UAAU,GAAGF,OAAO,CAAC,UAAU,CAAC,CAACE,UAAU;AACjD,MAAMC,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMK,cAAc,GAAGL,OAAO,CAAC,UAAU,CAAC,CAACK,cAAc;AACzD,MAAMC,GAAG,GAAGN,OAAO,CAAC,KAAK,CAAC;AAE1B,IAAIO,IAAI;AACR,IAAI;EACF;EACAA,IAAI,GAAGP,OAAO,CAAC,MAAM,CAAC;AACxB,CAAC,CAAC,OAAOQ,CAAC,EAAE;EACV;AACF;AAEA,MAAMC,OAAO,GAAG,GAAG;AACnB,MAAMC,gBAAgB,GAAG,sBAAsB;AAC/C,MAAMC,WAAW,GAAG,wBAAwB;AAC5C,MAAMC,YAAY,GAAG,4CAA4C;AAEjE,MAAMC,UAAU,SAASd,YAAY,CAAC;EACpCe,IAAI,CAACC,WAAW,EAAEC,QAAQ,EAAE;IAC1B,MAAMC,UAAU,GAAGF,WAAW,CAACE,UAAU;IACzC,MAAMC,WAAW,GAAGH,WAAW,CAACG,WAAW;IAE3C,IAAIb,cAAc,CAACY,UAAU,CAAC,GAAG,CAAC,EAAE;MAClCD,QAAQ,CAAC,IAAId,UAAU,CAAC,kEAAkE,CAAC,CAAC;MAC5F;IACF;IAEA,IAAIK,IAAI,IAAI,IAAI,EAAE;MAChBS,QAAQ,CACN,IAAId,UAAU,CACZ,0GAA0G,CAC3G,CACF;MAED;IACF;IAEA,IAAIgB,WAAW,CAACC,QAAQ,IAAI,IAAI,EAAE;MAChCC,mBAAmB,CAACF,WAAW,EAAE,CAACG,GAAG,EAAEC,eAAe,KAAK;QACzD,IAAID,GAAG,EAAE,OAAOL,QAAQ,CAACK,GAAG,CAAC;QAE7BN,WAAW,CAACG,WAAW,GAAGI,eAAe;QACzC,IAAI,CAACR,IAAI,CAACC,WAAW,EAAEC,QAAQ,CAAC;MAClC,CAAC,CAAC;MAEF;IACF;IAEA,MAAMO,EAAE,GAAGL,WAAW,CAACM,MAAM;IAC7B,MAAMC,IAAI,GAAG,IAAI,CAACA,IAAI;IAEtB,MAAMC,WAAW,GAAGR,WAAW,CAACC,QAAQ;IACxC,MAAMQ,eAAe,GAAGT,WAAW,CAACU,QAAQ;IAC5C,MAAMC,YAAY,GAAGX,WAAW,CAACY,mBAAmB,CAACC,iBAAiB;;IAEtE;IACA,MAAMC,cAAc,GAClBN,WAAW,IAAIC,eAAe,IAAIE,YAAY,GAC1C;MAAEH,WAAW;MAAEC,eAAe;MAAEE;IAAa,CAAC,GAC9CH,WAAW,IAAIC,eAAe,GAC9B;MAAED,WAAW;MAAEC;IAAgB,CAAC,GAChCM,SAAS;IAEf9B,MAAM,CAAC+B,WAAW,CAAC,EAAE,EAAE,CAACb,GAAG,EAAEc,KAAK,KAAK;MACrC,IAAId,GAAG,EAAE;QACPL,QAAQ,CAACK,GAAG,CAAC;QACb;MACF;MAEA,MAAMe,SAAS,GAAG;QAChBA,SAAS,EAAE,CAAC;QACZC,SAAS,EAAE,aAAa;QACxBC,OAAO,EAAEb,IAAI,CAACc,SAAS,CAAC;UAAEC,CAAC,EAAEL,KAAK;UAAEM,CAAC,EAAEhC;QAAQ,CAAC;MAClD,CAAC;MAEDQ,UAAU,CAACyB,OAAO,CAAE,GAAEnB,EAAG,OAAM,EAAEa,SAAS,EAAE,CAACf,GAAG,EAAEsB,MAAM,KAAK;QAC3D,IAAItB,GAAG,EAAE,OAAOL,QAAQ,CAACK,GAAG,CAAC;QAE7B,MAAMuB,GAAG,GAAGD,MAAM,CAACA,MAAM;QACzB,MAAME,cAAc,GAAGpB,IAAI,CAACqB,WAAW,CAACF,GAAG,CAACN,OAAO,CAACS,MAAM,CAAC;QAC3D,MAAMC,IAAI,GAAGH,cAAc,CAACI,CAAC;QAC7B,MAAMC,WAAW,GAAGL,cAAc,CAACM,CAAC,CAACJ,MAAM;QAC3C,IAAIG,WAAW,CAACE,MAAM,KAAK,EAAE,EAAE;UAC7BpC,QAAQ,CACN,IAAId,UAAU,CAAE,+BAA8BgD,WAAW,CAACE,MAAO,eAAc,CAAC,CACjF;UACD;QACF;QAEA,IAAIF,WAAW,CAACG,OAAO,CAAClB,KAAK,EAAE,CAAC,EAAEA,KAAK,CAACiB,MAAM,EAAE,CAAC,EAAEjB,KAAK,CAACiB,MAAM,CAAC,KAAK,CAAC,EAAE;UACtEpC,QAAQ,CAAC,IAAId,UAAU,CAAC,+CAA+C,CAAC,CAAC;UACzE;QACF;QAEA,IAAI8C,IAAI,CAACI,MAAM,GAAG,CAAC,IAAIJ,IAAI,CAACI,MAAM,GAAG,GAAG,IAAIJ,IAAI,CAACM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UACrEtC,QAAQ,CAAC,IAAId,UAAU,CAAE,qCAAoC8C,IAAK,GAAE,CAAC,CAAC;UACtE;QACF;QAEA,MAAMO,IAAI,GAAG,6CAA6C;QAC1D,MAAMC,OAAO,GAAGjD,IAAI,CAACkD,IAAI,CACvB;UACEC,MAAM,EAAE,MAAM;UACdV,IAAI;UACJW,MAAM,EAAEC,YAAY,CAACf,cAAc,CAACI,CAAC,CAAC;UACtCY,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,mCAAmC;YACnD,gBAAgB,EAAEP,IAAI,CAACH,MAAM;YAC7B,wBAAwB,EAAEF,WAAW,CAACa,QAAQ,CAAC,QAAQ,CAAC;YACxD,uBAAuB,EAAE;UAC3B,CAAC;UACDC,IAAI,EAAE,GAAG;UACTT;QACF,CAAC,EACDvB,cAAc,CACf;QAED,MAAMiC,aAAa,GAAGT,OAAO,CAACM,OAAO,CAACI,aAAa;QACnD,MAAMC,IAAI,GAAGX,OAAO,CAACM,OAAO,CAAC,YAAY,CAAC;QAC1C,MAAMxB,OAAO,GAAG;UAAE8B,CAAC,EAAEH,aAAa;UAAEI,CAAC,EAAEF;QAAK,CAAC;QAC7C,IAAItC,YAAY,EAAE;UAChBS,OAAO,CAACgC,CAAC,GAAGzC,YAAY;QAC1B;QAEA,MAAM0C,YAAY,GAAG;UACnBA,YAAY,EAAE,CAAC;UACfC,cAAc,EAAE,CAAC;UACjBlC,OAAO,EAAEb,IAAI,CAACc,SAAS,CAACD,OAAO;QACjC,CAAC;QAEDrB,UAAU,CAACyB,OAAO,CAAE,GAAEnB,EAAG,OAAM,EAAEgD,YAAY,EAAElD,GAAG,IAAI;UACpD,IAAIA,GAAG,EAAE,OAAOL,QAAQ,CAACK,GAAG,CAAC;UAC7BL,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF;AAEA,SAASI,mBAAmB,CAACF,WAAW,EAAEF,QAAQ,EAAE;EAClD,SAASyD,IAAI,CAACC,KAAK,EAAE;IACnB,IAAIA,KAAK,CAACC,WAAW,IAAI,IAAI,IAAID,KAAK,CAACE,eAAe,IAAI,IAAI,IAAIF,KAAK,CAACG,KAAK,IAAI,IAAI,EAAE;MACrF7D,QAAQ,CAAC,IAAId,UAAU,CAAC,oDAAoD,CAAC,CAAC;MAC9E;IACF;IAEAc,QAAQ,CACNiB,SAAS,EACT,IAAIhC,gBAAgB,CAAC;MACnBkB,QAAQ,EAAEuD,KAAK,CAACC,WAAW;MAC3B/C,QAAQ,EAAE8C,KAAK,CAACE,eAAe;MAC/BpD,MAAM,EAAEN,WAAW,CAACM,MAAM;MAC1Ba,SAAS,EAAE,aAAa;MACxBP,mBAAmB,EAAE;QACnBC,iBAAiB,EAAE2C,KAAK,CAACG;MAC3B;IACF,CAAC,CAAC,CACH;EACH;;EAEA;EACA;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,sCAAsC,EAAE;IACtDC,OAAO,CACJ,GAAEvE,gBAAiB,GAAEoE,OAAO,CAACC,GAAG,CAACC,sCAAuC,EAAC,EAC1E/C,SAAS,EACT,CAACZ,GAAG,EAAEuB,GAAG,KAAK;MACZ,IAAIvB,GAAG,EAAE,OAAOL,QAAQ,CAACK,GAAG,CAAC;MAC7BoD,IAAI,CAAC7B,GAAG,CAAC;IACX,CAAC,CACF;IAED;EACF;;EAEA;;EAEA;;EAEAqC,OAAO,CACJ,GAAEtE,WAAY,mBAAkB,EACjC;IAAE+C,MAAM,EAAE,KAAK;IAAEwB,IAAI,EAAE,KAAK;IAAEpB,OAAO,EAAE;MAAE,sCAAsC,EAAE;IAAG;EAAE,CAAC,EACvF,CAACzC,GAAG,EAAE8D,KAAK,KAAK;IACd,IAAI9D,GAAG,EAAE,OAAOL,QAAQ,CAACK,GAAG,CAAC;;IAE7B;IACA4D,OAAO,CACJ,GAAEtE,WAAY,IAAGC,YAAa,EAAC,EAChC;MAAEsE,IAAI,EAAE,KAAK;MAAEpB,OAAO,EAAE;QAAE,0BAA0B,EAAEqB;MAAM;IAAE,CAAC,EAC/D,CAAC9D,GAAG,EAAE+D,QAAQ,KAAK;MACjB,IAAI/D,GAAG,EAAE,OAAOL,QAAQ,CAACK,GAAG,CAAC;;MAE7B;MACA4D,OAAO,CACJ,GAAEtE,WAAY,IAAGC,YAAa,IAAGwE,QAAS,EAAC,EAC5C;QAAEtB,OAAO,EAAE;UAAE,0BAA0B,EAAEqB;QAAM;MAAE,CAAC,EAClD,CAAC9D,GAAG,EAAEqD,KAAK,KAAK;QACd,IAAIrD,GAAG,EAAE,OAAOL,QAAQ,CAACK,GAAG,CAAC;QAC7BoD,IAAI,CAACC,KAAK,CAAC;MACb,CAAC,CACF;IACH,CAAC,CACF;EACH,CAAC,CACF;AACH;AAEA,SAASd,YAAY,CAACZ,IAAI,EAAE;EAC1B,MAAMqC,KAAK,GAAGrC,IAAI,CAACsC,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAID,KAAK,CAACjC,MAAM,KAAK,CAAC,IAAIiC,KAAK,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;IAClD,OAAO,WAAW;EACpB;EAEA,OAAOA,KAAK,CAAC,CAAC,CAAC;AACjB;AAEA,SAASJ,OAAO,CAACM,GAAG,EAAE/B,OAAO,EAAExC,QAAQ,EAAE;EACvCwC,OAAO,GAAGgC,MAAM,CAACC,MAAM,CACrB;IACE/B,MAAM,EAAE,KAAK;IACbgC,OAAO,EAAE,KAAK;IACdR,IAAI,EAAE;EACR,CAAC,EACD5E,GAAG,CAACqF,KAAK,CAACJ,GAAG,CAAC,EACd/B,OAAO,CACR;EAED,MAAMoC,GAAG,GAAGxF,IAAI,CAAC6E,OAAO,CAACzB,OAAO,EAAEZ,GAAG,IAAI;IACvCA,GAAG,CAACiD,WAAW,CAAC,MAAM,CAAC;IAEvB,IAAIC,IAAI,GAAG,EAAE;IACblD,GAAG,CAACmD,EAAE,CAAC,MAAM,EAAE1B,CAAC,IAAKyB,IAAI,IAAIzB,CAAE,CAAC;IAChCzB,GAAG,CAACmD,EAAE,CAAC,KAAK,EAAE,MAAM;MAClB,IAAIvC,OAAO,CAAC0B,IAAI,KAAK,KAAK,EAAE;QAC1BlE,QAAQ,CAACiB,SAAS,EAAE6D,IAAI,CAAC;QACzB;MACF;MAEA,IAAI;QACF,MAAME,MAAM,GAAGC,IAAI,CAACN,KAAK,CAACG,IAAI,CAAC;QAC/B9E,QAAQ,CAACiB,SAAS,EAAE+D,MAAM,CAAC;MAC7B,CAAC,CAAC,OAAO3E,GAAG,EAAE;QACZL,QAAQ,CAAC,IAAId,UAAU,CAAE,2BAA0B4F,IAAK,GAAE,CAAC,CAAC;MAC9D;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFF,GAAG,CAACG,EAAE,CAAC,OAAO,EAAE1E,GAAG,IAAIL,QAAQ,CAACK,GAAG,CAAC,CAAC;EACrCuE,GAAG,CAACM,GAAG,EAAE;AACX;AAEAC,MAAM,CAACC,OAAO,GAAGvF,UAAU"},"metadata":{},"sourceType":"script"}