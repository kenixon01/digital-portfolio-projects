{"ast":null,"code":"'use strict';\n\nconst URL = require('url');\nconst qs = require('querystring');\nconst dns = require('dns');\nconst MongoParseError = require('./error').MongoParseError;\nconst ReadPreference = require('./topologies/read_preference');\nconst emitWarningOnce = require('../utils').emitWarningOnce;\n\n/**\n * The following regular expression validates a connection string and breaks the\n * provide string into the following capture groups: [protocol, username, password, hosts]\n */\nconst HOSTS_RX = /(mongodb(?:\\+srv|)):\\/\\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\\/|)(.*)/;\n\n// Options that reference file paths should not be parsed\nconst FILE_PATH_OPTIONS = new Set(['sslCA', 'sslCert', 'sslKey', 'tlsCAFile', 'tlsCertificateKeyFile'].map(key => key.toLowerCase()));\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param {string} uri The connection string to parse\n * @param {object} options Optional user provided connection string options\n * @param {function} callback\n */\nfunction parseSrvConnectionString(uri, options, callback) {\n  const result = URL.parse(uri, true);\n  if (options.directConnection || options.directconnection) {\n    return callback(new MongoParseError('directConnection not supported with SRV URI'));\n  }\n  if (result.hostname.split('.').length < 3) {\n    return callback(new MongoParseError('URI does not have hostname, domain name and tld'));\n  }\n  result.domainLength = result.hostname.split('.').length;\n  const hostname = uri.substring('mongodb+srv://'.length).split('/')[0];\n  if (hostname.match(',')) {\n    return callback(new MongoParseError('Invalid URI, cannot contain multiple hostnames'));\n  }\n  if (result.port) {\n    return callback(new MongoParseError(`Ports not accepted with '${PROTOCOL_MONGODB_SRV}' URIs`));\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = result.host;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n    if (addresses.length === 0) {\n      return callback(new MongoParseError('No addresses found at host'));\n    }\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(new MongoParseError('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    // Convert the original URL to a non-SRV URL.\n    result.protocol = 'mongodb';\n    result.host = addresses.map(address => `${address.name}:${address.port}`).join(',');\n\n    // Default to SSL true if it's not specified.\n    if (!('ssl' in options) && (!result.search || !('ssl' in result.query) || result.query.ssl === null)) {\n      result.query.ssl = true;\n    }\n\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n        record = null;\n      }\n      if (record) {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n        record = qs.parse(record[0].join(''));\n        if (Object.keys(record).some(key => key !== 'authSource' && key !== 'replicaSet')) {\n          return callback(new MongoParseError('Text record must only set `authSource` or `replicaSet`'));\n        }\n        result.query = Object.assign({}, record, result.query);\n      }\n\n      // Set completed options back into the URL object.\n      result.search = qs.stringify(result.query);\n      const finalString = URL.format(result);\n      parseConnectionString(finalString, options, (err, ret) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n        callback(null, Object.assign({}, ret, {\n          srvHost: lookupAddress\n        }));\n      });\n    });\n  });\n}\n\n/**\n * Parses a query string item according to the connection string spec\n *\n * @param {string} key The key for the parsed value\n * @param {Array|String} value The value to parse\n * @return {Array|Object|String} The parsed value\n */\nfunction parseQueryStringItemValue(key, value) {\n  if (Array.isArray(value)) {\n    // deduplicate and simplify arrays\n    value = value.filter((v, idx) => value.indexOf(v) === idx);\n    if (value.length === 1) value = value[0];\n  } else if (value.indexOf(':') > 0) {\n    value = value.split(',').reduce((result, pair) => {\n      const parts = pair.split(':');\n      result[parts[0]] = parseQueryStringItemValue(key, parts[1]);\n      return result;\n    }, {});\n  } else if (value.indexOf(',') > 0) {\n    value = value.split(',').map(v => {\n      return parseQueryStringItemValue(key, v);\n    });\n  } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {\n    value = value.toLowerCase() === 'true';\n  } else if (!Number.isNaN(value) && !STRING_OPTIONS.has(key)) {\n    const numericValue = parseFloat(value);\n    if (!Number.isNaN(numericValue)) {\n      value = parseFloat(value);\n    }\n  }\n  return value;\n}\n\n// Options that are known boolean types\nconst BOOLEAN_OPTIONS = new Set(['slaveok', 'slave_ok', 'sslvalidate', 'fsync', 'safe', 'retrywrites', 'j']);\n\n// Known string options, only used to bypass Number coercion in `parseQueryStringItemValue`\nconst STRING_OPTIONS = new Set(['authsource', 'replicaset']);\n\n// Supported text representations of auth mechanisms\n// NOTE: this list exists in native already, if it is merged here we should deduplicate\nconst AUTH_MECHANISMS = new Set(['GSSAPI', 'MONGODB-AWS', 'MONGODB-X509', 'MONGODB-CR', 'DEFAULT', 'SCRAM-SHA-1', 'SCRAM-SHA-256', 'PLAIN']);\n\n// Lookup table used to translate normalized (lower-cased) forms of connection string\n// options to their expected camelCase version\nconst CASE_TRANSLATION = {\n  replicaset: 'replicaSet',\n  connecttimeoutms: 'connectTimeoutMS',\n  sockettimeoutms: 'socketTimeoutMS',\n  maxpoolsize: 'maxPoolSize',\n  minpoolsize: 'minPoolSize',\n  maxidletimems: 'maxIdleTimeMS',\n  waitqueuemultiple: 'waitQueueMultiple',\n  waitqueuetimeoutms: 'waitQueueTimeoutMS',\n  wtimeoutms: 'wtimeoutMS',\n  readconcern: 'readConcern',\n  readconcernlevel: 'readConcernLevel',\n  readpreference: 'readPreference',\n  maxstalenessseconds: 'maxStalenessSeconds',\n  readpreferencetags: 'readPreferenceTags',\n  authsource: 'authSource',\n  authmechanism: 'authMechanism',\n  authmechanismproperties: 'authMechanismProperties',\n  gssapiservicename: 'gssapiServiceName',\n  localthresholdms: 'localThresholdMS',\n  serverselectiontimeoutms: 'serverSelectionTimeoutMS',\n  serverselectiontryonce: 'serverSelectionTryOnce',\n  heartbeatfrequencyms: 'heartbeatFrequencyMS',\n  retrywrites: 'retryWrites',\n  uuidrepresentation: 'uuidRepresentation',\n  zlibcompressionlevel: 'zlibCompressionLevel',\n  tlsallowinvalidcertificates: 'tlsAllowInvalidCertificates',\n  tlsallowinvalidhostnames: 'tlsAllowInvalidHostnames',\n  tlsinsecure: 'tlsInsecure',\n  tlscafile: 'tlsCAFile',\n  tlscertificatekeyfile: 'tlsCertificateKeyFile',\n  tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',\n  wtimeout: 'wTimeoutMS',\n  j: 'journal',\n  directconnection: 'directConnection'\n};\n\n/**\n * Sets the value for `key`, allowing for any required translation\n *\n * @param {object} obj The object to set the key on\n * @param {string} key The key to set the value for\n * @param {*} value The value to set\n * @param {object} options The options used for option parsing\n */\nfunction applyConnectionStringOption(obj, key, value, options) {\n  // simple key translation\n  if (key === 'journal') {\n    key = 'j';\n  } else if (key === 'wtimeoutms') {\n    key = 'wtimeout';\n  }\n\n  // more complicated translation\n  if (BOOLEAN_OPTIONS.has(key)) {\n    value = value === 'true' || value === true;\n  } else if (key === 'appname') {\n    value = decodeURIComponent(value);\n  } else if (key === 'readconcernlevel') {\n    obj['readConcernLevel'] = value;\n    key = 'readconcern';\n    value = {\n      level: value\n    };\n  }\n\n  // simple validation\n  if (key === 'compressors') {\n    value = Array.isArray(value) ? value : [value];\n    if (!value.every(c => c === 'snappy' || c === 'zlib')) {\n      throw new MongoParseError('Value for `compressors` must be at least one of: `snappy`, `zlib`');\n    }\n  }\n  if (key === 'authmechanism' && !AUTH_MECHANISMS.has(value)) {\n    throw new MongoParseError(`Value for authMechanism must be one of: ${Array.from(AUTH_MECHANISMS).join(', ')}, found: ${value}`);\n  }\n  if (key === 'readpreference' && !ReadPreference.isValid(value)) {\n    throw new MongoParseError('Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`');\n  }\n  if (key === 'zlibcompressionlevel' && (value < -1 || value > 9)) {\n    throw new MongoParseError('zlibCompressionLevel must be an integer between -1 and 9');\n  }\n\n  // special cases\n  if (key === 'compressors' || key === 'zlibcompressionlevel') {\n    obj.compression = obj.compression || {};\n    obj = obj.compression;\n  }\n  if (key === 'authmechanismproperties') {\n    if (typeof value.SERVICE_NAME === 'string') obj.gssapiServiceName = value.SERVICE_NAME;\n    if (typeof value.SERVICE_REALM === 'string') obj.gssapiServiceRealm = value.SERVICE_REALM;\n    if (typeof value.CANONICALIZE_HOST_NAME !== 'undefined') {\n      obj.gssapiCanonicalizeHostName = value.CANONICALIZE_HOST_NAME;\n    }\n  }\n  if (key === 'readpreferencetags') {\n    value = Array.isArray(value) ? splitArrayOfMultipleReadPreferenceTags(value) : [value];\n  }\n\n  // set the actual value\n  if (options.caseTranslate && CASE_TRANSLATION[key]) {\n    obj[CASE_TRANSLATION[key]] = value;\n    return;\n  }\n  obj[key] = value;\n}\nconst USERNAME_REQUIRED_MECHANISMS = new Set(['GSSAPI', 'MONGODB-CR', 'PLAIN', 'SCRAM-SHA-1', 'SCRAM-SHA-256']);\nfunction splitArrayOfMultipleReadPreferenceTags(value) {\n  const parsedTags = [];\n  for (let i = 0; i < value.length; i++) {\n    parsedTags[i] = {};\n    value[i].split(',').forEach(individualTag => {\n      const splitTag = individualTag.split(':');\n      parsedTags[i][splitTag[0]] = splitTag[1];\n    });\n  }\n  return parsedTags;\n}\n\n/**\n * Modifies the parsed connection string object taking into account expectations we\n * have for authentication-related options.\n *\n * @param {object} parsed The parsed connection string result\n * @return The parsed connection string result possibly modified for auth expectations\n */\nfunction applyAuthExpectations(parsed) {\n  if (parsed.options == null) {\n    return;\n  }\n  const options = parsed.options;\n  const authSource = options.authsource || options.authSource;\n  if (authSource != null) {\n    parsed.auth = Object.assign({}, parsed.auth, {\n      db: authSource\n    });\n  }\n  const authMechanism = options.authmechanism || options.authMechanism;\n  if (authMechanism != null) {\n    if (USERNAME_REQUIRED_MECHANISMS.has(authMechanism) && (!parsed.auth || parsed.auth.username == null)) {\n      throw new MongoParseError(`Username required for mechanism \\`${authMechanism}\\``);\n    }\n    if (authMechanism === 'GSSAPI') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(`Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`);\n      }\n      parsed.auth = Object.assign({}, parsed.auth, {\n        db: '$external'\n      });\n    }\n    if (authMechanism === 'MONGODB-AWS') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(`Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`);\n      }\n      parsed.auth = Object.assign({}, parsed.auth, {\n        db: '$external'\n      });\n    }\n    if (authMechanism === 'MONGODB-X509') {\n      if (parsed.auth && parsed.auth.password != null) {\n        throw new MongoParseError(`Password not allowed for mechanism \\`${authMechanism}\\``);\n      }\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(`Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`);\n      }\n      parsed.auth = Object.assign({}, parsed.auth, {\n        db: '$external'\n      });\n    }\n    if (authMechanism === 'PLAIN') {\n      if (parsed.auth && parsed.auth.db == null) {\n        parsed.auth = Object.assign({}, parsed.auth, {\n          db: '$external'\n        });\n      }\n    }\n  }\n\n  // default to `admin` if nothing else was resolved\n  if (parsed.auth && parsed.auth.db == null) {\n    parsed.auth = Object.assign({}, parsed.auth, {\n      db: 'admin'\n    });\n  }\n  return parsed;\n}\n\n/**\n * Parses a query string according the connection string spec.\n *\n * @param {String} query The query string to parse\n * @param {object} [options] The options used for options parsing\n * @return {Object|Error} The parsed query string as an object, or an error if one was encountered\n */\nfunction parseQueryString(query, options) {\n  const result = {};\n  let parsedQueryString = qs.parse(query);\n  checkTLSOptions(parsedQueryString);\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key];\n    if (value === '' || value == null) {\n      throw new MongoParseError('Incomplete key value pair for option');\n    }\n    const normalizedKey = key.toLowerCase();\n    const parsedValue = FILE_PATH_OPTIONS.has(normalizedKey) ? value : parseQueryStringItemValue(normalizedKey, value);\n    applyConnectionStringOption(result, normalizedKey, parsedValue, options);\n  }\n\n  // special cases for known deprecated options\n  if (result.wtimeout && result.wtimeoutms) {\n    delete result.wtimeout;\n    emitWarningOnce('Unsupported option `wtimeout` specified');\n  }\n  return Object.keys(result).length ? result : null;\n}\n\n/// Adds support for modern `tls` variants of out `ssl` options\nfunction translateTLSOptions(queryString) {\n  if (queryString.tls) {\n    queryString.ssl = queryString.tls;\n  }\n  if (queryString.tlsInsecure) {\n    queryString.checkServerIdentity = false;\n    queryString.sslValidate = false;\n  } else {\n    Object.assign(queryString, {\n      checkServerIdentity: queryString.tlsAllowInvalidHostnames ? false : true,\n      sslValidate: queryString.tlsAllowInvalidCertificates ? false : true\n    });\n  }\n  if (queryString.tlsCAFile) {\n    queryString.ssl = true;\n    queryString.sslCA = queryString.tlsCAFile;\n  }\n  if (queryString.tlsCertificateKeyFile) {\n    queryString.ssl = true;\n    if (queryString.tlsCertificateFile) {\n      queryString.sslCert = queryString.tlsCertificateFile;\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n    } else {\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n      queryString.sslCert = queryString.tlsCertificateKeyFile;\n    }\n  }\n  if (queryString.tlsCertificateKeyFilePassword) {\n    queryString.ssl = true;\n    queryString.sslPass = queryString.tlsCertificateKeyFilePassword;\n  }\n  return queryString;\n}\n\n/**\n * Checks a query string for invalid tls options according to the URI options spec.\n *\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n */\nfunction checkTLSOptions(queryString) {\n  const queryStringKeys = Object.keys(queryString);\n  if (queryStringKeys.indexOf('tlsInsecure') !== -1 && (queryStringKeys.indexOf('tlsAllowInvalidCertificates') !== -1 || queryStringKeys.indexOf('tlsAllowInvalidHostnames') !== -1)) {\n    throw new MongoParseError('The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.');\n  }\n  const tlsValue = assertTlsOptionsAreEqual('tls', queryString, queryStringKeys);\n  const sslValue = assertTlsOptionsAreEqual('ssl', queryString, queryStringKeys);\n  if (tlsValue != null && sslValue != null) {\n    if (tlsValue !== sslValue) {\n      throw new MongoParseError('All values of `tls` and `ssl` must be the same.');\n    }\n  }\n}\n\n/**\n * Checks a query string to ensure all tls/ssl options are the same.\n *\n * @param {string} key The key (tls or ssl) to check\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n * @return The value of the tls/ssl option\n */\nfunction assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {\n  const queryStringHasTLSOption = queryStringKeys.indexOf(optionName) !== -1;\n  let optionValue;\n  if (Array.isArray(queryString[optionName])) {\n    optionValue = queryString[optionName][0];\n  } else {\n    optionValue = queryString[optionName];\n  }\n  if (queryStringHasTLSOption) {\n    if (Array.isArray(queryString[optionName])) {\n      const firstValue = queryString[optionName][0];\n      queryString[optionName].forEach(tlsValue => {\n        if (tlsValue !== firstValue) {\n          throw new MongoParseError(`All values of ${optionName} must be the same.`);\n        }\n      });\n    }\n  }\n  return optionValue;\n}\nconst PROTOCOL_MONGODB = 'mongodb';\nconst PROTOCOL_MONGODB_SRV = 'mongodb+srv';\nconst SUPPORTED_PROTOCOLS = [PROTOCOL_MONGODB, PROTOCOL_MONGODB_SRV];\n\n/**\n * Parses a MongoDB connection string\n *\n * @param {*} uri the MongoDB connection string to parse\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.caseTranslate] Whether the parser should translate options back into camelCase after normalization\n * @param {parseCallback} callback\n */\nfunction parseConnectionString(uri, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = Object.assign({}, {\n    caseTranslate: true\n  }, options);\n\n  // Check for bad uris before we parse\n  try {\n    URL.parse(uri);\n  } catch (e) {\n    return callback(new MongoParseError('URI malformed, cannot be parsed'));\n  }\n  const cap = uri.match(HOSTS_RX);\n  if (!cap) {\n    return callback(new MongoParseError('Invalid connection string'));\n  }\n  const protocol = cap[1];\n  if (SUPPORTED_PROTOCOLS.indexOf(protocol) === -1) {\n    return callback(new MongoParseError('Invalid protocol provided'));\n  }\n  const dbAndQuery = cap[4].split('?');\n  const db = dbAndQuery.length > 0 ? dbAndQuery[0] : null;\n  const query = dbAndQuery.length > 1 ? dbAndQuery[1] : null;\n  let parsedOptions;\n  try {\n    parsedOptions = parseQueryString(query, options);\n  } catch (parseError) {\n    return callback(parseError);\n  }\n  parsedOptions = Object.assign({}, parsedOptions, options);\n  if (protocol === PROTOCOL_MONGODB_SRV) {\n    return parseSrvConnectionString(uri, parsedOptions, callback);\n  }\n  const auth = {\n    username: null,\n    password: null,\n    db: db && db !== '' ? qs.unescape(db) : null\n  };\n  if (parsedOptions.auth) {\n    // maintain support for legacy options passed into `MongoClient`\n    if (parsedOptions.auth.username) auth.username = parsedOptions.auth.username;\n    if (parsedOptions.auth.user) auth.username = parsedOptions.auth.user;\n    if (parsedOptions.auth.password) auth.password = parsedOptions.auth.password;\n  } else {\n    if (parsedOptions.username) auth.username = parsedOptions.username;\n    if (parsedOptions.user) auth.username = parsedOptions.user;\n    if (parsedOptions.password) auth.password = parsedOptions.password;\n  }\n  if (cap[4].split('?')[0].indexOf('@') !== -1) {\n    return callback(new MongoParseError('Unescaped slash in userinfo section'));\n  }\n  const authorityParts = cap[3].split('@');\n  if (authorityParts.length > 2) {\n    return callback(new MongoParseError('Unescaped at-sign in authority section'));\n  }\n  if (authorityParts[0] == null || authorityParts[0] === '') {\n    return callback(new MongoParseError('No username provided in authority section'));\n  }\n  if (authorityParts.length > 1) {\n    const authParts = authorityParts.shift().split(':');\n    if (authParts.length > 2) {\n      return callback(new MongoParseError('Unescaped colon in authority section'));\n    }\n    if (authParts[0] === '') {\n      return callback(new MongoParseError('Invalid empty username provided'));\n    }\n    if (!auth.username) auth.username = qs.unescape(authParts[0]);\n    if (!auth.password) auth.password = authParts[1] ? qs.unescape(authParts[1]) : null;\n  }\n  let hostParsingError = null;\n  const hosts = authorityParts.shift().split(',').map(host => {\n    let parsedHost = URL.parse(`mongodb://${host}`);\n    if (parsedHost.path === '/:') {\n      hostParsingError = new MongoParseError('Double colon in host identifier');\n      return null;\n    }\n\n    // heuristically determine if we're working with a domain socket\n    if (host.match(/\\.sock/)) {\n      parsedHost.hostname = qs.unescape(host);\n      parsedHost.port = null;\n    }\n    if (Number.isNaN(parsedHost.port)) {\n      hostParsingError = new MongoParseError('Invalid port (non-numeric string)');\n      return;\n    }\n    const result = {\n      host: parsedHost.hostname,\n      port: parsedHost.port ? parseInt(parsedHost.port) : 27017\n    };\n    if (result.port === 0) {\n      hostParsingError = new MongoParseError('Invalid port (zero) with hostname');\n      return;\n    }\n    if (result.port > 65535) {\n      hostParsingError = new MongoParseError('Invalid port (larger than 65535) with hostname');\n      return;\n    }\n    if (result.port < 0) {\n      hostParsingError = new MongoParseError('Invalid port (negative number)');\n      return;\n    }\n    return result;\n  }).filter(host => !!host);\n  if (hostParsingError) {\n    return callback(hostParsingError);\n  }\n  if (hosts.length === 0 || hosts[0].host === '' || hosts[0].host === null) {\n    return callback(new MongoParseError('No hostname or hostnames provided in connection string'));\n  }\n  const directConnection = !!parsedOptions.directConnection;\n  if (directConnection && hosts.length !== 1) {\n    // If the option is set to true, the driver MUST validate that there is exactly one host given\n    // in the host list in the URI, and fail client creation otherwise.\n    return callback(new MongoParseError('directConnection option requires exactly one host'));\n  }\n\n  // NOTE: this behavior will go away in v4.0, we will always auto discover there\n  if (parsedOptions.directConnection == null && hosts.length === 1 && parsedOptions.replicaSet == null) {\n    parsedOptions.directConnection = true;\n  }\n  const result = {\n    hosts: hosts,\n    auth: auth.db || auth.username ? auth : null,\n    options: Object.keys(parsedOptions).length ? parsedOptions : null\n  };\n  if (result.auth && result.auth.db) {\n    result.defaultDatabase = result.auth.db;\n  } else {\n    result.defaultDatabase = 'test';\n  }\n\n  // support modern `tls` variants to SSL options\n  result.options = translateTLSOptions(result.options);\n  try {\n    applyAuthExpectations(result);\n  } catch (authError) {\n    return callback(authError);\n  }\n  callback(null, result);\n}\nmodule.exports = parseConnectionString;","map":{"version":3,"names":["URL","require","qs","dns","MongoParseError","ReadPreference","emitWarningOnce","HOSTS_RX","FILE_PATH_OPTIONS","Set","map","key","toLowerCase","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","parseSrvConnectionString","uri","options","callback","result","parse","directConnection","directconnection","hostname","split","length","domainLength","substring","match","port","PROTOCOL_MONGODB_SRV","lookupAddress","host","resolveSrv","err","addresses","i","name","protocol","address","join","search","query","ssl","resolveTxt","record","code","Object","keys","some","assign","stringify","finalString","format","parseConnectionString","ret","srvHost","parseQueryStringItemValue","value","Array","isArray","filter","v","idx","indexOf","reduce","pair","parts","Number","isNaN","STRING_OPTIONS","has","numericValue","parseFloat","BOOLEAN_OPTIONS","AUTH_MECHANISMS","CASE_TRANSLATION","replicaset","connecttimeoutms","sockettimeoutms","maxpoolsize","minpoolsize","maxidletimems","waitqueuemultiple","waitqueuetimeoutms","wtimeoutms","readconcern","readconcernlevel","readpreference","maxstalenessseconds","readpreferencetags","authsource","authmechanism","authmechanismproperties","gssapiservicename","localthresholdms","serverselectiontimeoutms","serverselectiontryonce","heartbeatfrequencyms","retrywrites","uuidrepresentation","zlibcompressionlevel","tlsallowinvalidcertificates","tlsallowinvalidhostnames","tlsinsecure","tlscafile","tlscertificatekeyfile","tlscertificatekeyfilepassword","wtimeout","j","applyConnectionStringOption","obj","decodeURIComponent","level","every","c","from","isValid","compression","SERVICE_NAME","gssapiServiceName","SERVICE_REALM","gssapiServiceRealm","CANONICALIZE_HOST_NAME","gssapiCanonicalizeHostName","splitArrayOfMultipleReadPreferenceTags","caseTranslate","USERNAME_REQUIRED_MECHANISMS","parsedTags","forEach","individualTag","splitTag","applyAuthExpectations","parsed","authSource","auth","db","authMechanism","username","password","parseQueryString","parsedQueryString","checkTLSOptions","normalizedKey","parsedValue","translateTLSOptions","queryString","tls","tlsInsecure","checkServerIdentity","sslValidate","tlsAllowInvalidHostnames","tlsAllowInvalidCertificates","tlsCAFile","sslCA","tlsCertificateKeyFile","tlsCertificateFile","sslCert","sslKey","tlsCertificateKeyFilePassword","sslPass","queryStringKeys","tlsValue","assertTlsOptionsAreEqual","sslValue","optionName","queryStringHasTLSOption","optionValue","firstValue","PROTOCOL_MONGODB","SUPPORTED_PROTOCOLS","e","cap","dbAndQuery","parsedOptions","parseError","unescape","user","authorityParts","authParts","shift","hostParsingError","hosts","parsedHost","path","parseInt","replicaSet","defaultDatabase","authError","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/uri_parser.js"],"sourcesContent":["'use strict';\nconst URL = require('url');\nconst qs = require('querystring');\nconst dns = require('dns');\nconst MongoParseError = require('./error').MongoParseError;\nconst ReadPreference = require('./topologies/read_preference');\nconst emitWarningOnce = require('../utils').emitWarningOnce;\n\n/**\n * The following regular expression validates a connection string and breaks the\n * provide string into the following capture groups: [protocol, username, password, hosts]\n */\nconst HOSTS_RX = /(mongodb(?:\\+srv|)):\\/\\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\\/|)(.*)/;\n\n// Options that reference file paths should not be parsed\nconst FILE_PATH_OPTIONS = new Set(\n  ['sslCA', 'sslCert', 'sslKey', 'tlsCAFile', 'tlsCertificateKeyFile'].map(key => key.toLowerCase())\n);\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param {string} uri The connection string to parse\n * @param {object} options Optional user provided connection string options\n * @param {function} callback\n */\nfunction parseSrvConnectionString(uri, options, callback) {\n  const result = URL.parse(uri, true);\n\n  if (options.directConnection || options.directconnection) {\n    return callback(new MongoParseError('directConnection not supported with SRV URI'));\n  }\n\n  if (result.hostname.split('.').length < 3) {\n    return callback(new MongoParseError('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n\n  const hostname = uri.substring('mongodb+srv://'.length).split('/')[0];\n  if (hostname.match(',')) {\n    return callback(new MongoParseError('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new MongoParseError(`Ports not accepted with '${PROTOCOL_MONGODB_SRV}' URIs`));\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = result.host;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoParseError('No addresses found at host'));\n    }\n\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(\n          new MongoParseError('Server record does not share hostname with parent URI')\n        );\n      }\n    }\n\n    // Convert the original URL to a non-SRV URL.\n    result.protocol = 'mongodb';\n    result.host = addresses.map(address => `${address.name}:${address.port}`).join(',');\n\n    // Default to SSL true if it's not specified.\n    if (\n      !('ssl' in options) &&\n      (!result.search || !('ssl' in result.query) || result.query.ssl === null)\n    ) {\n      result.query.ssl = true;\n    }\n\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n        record = null;\n      }\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        record = qs.parse(record[0].join(''));\n        if (Object.keys(record).some(key => key !== 'authSource' && key !== 'replicaSet')) {\n          return callback(\n            new MongoParseError('Text record must only set `authSource` or `replicaSet`')\n          );\n        }\n\n        result.query = Object.assign({}, record, result.query);\n      }\n\n      // Set completed options back into the URL object.\n      result.search = qs.stringify(result.query);\n\n      const finalString = URL.format(result);\n      parseConnectionString(finalString, options, (err, ret) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        callback(null, Object.assign({}, ret, { srvHost: lookupAddress }));\n      });\n    });\n  });\n}\n\n/**\n * Parses a query string item according to the connection string spec\n *\n * @param {string} key The key for the parsed value\n * @param {Array|String} value The value to parse\n * @return {Array|Object|String} The parsed value\n */\nfunction parseQueryStringItemValue(key, value) {\n  if (Array.isArray(value)) {\n    // deduplicate and simplify arrays\n    value = value.filter((v, idx) => value.indexOf(v) === idx);\n    if (value.length === 1) value = value[0];\n  } else if (value.indexOf(':') > 0) {\n    value = value.split(',').reduce((result, pair) => {\n      const parts = pair.split(':');\n      result[parts[0]] = parseQueryStringItemValue(key, parts[1]);\n      return result;\n    }, {});\n  } else if (value.indexOf(',') > 0) {\n    value = value.split(',').map(v => {\n      return parseQueryStringItemValue(key, v);\n    });\n  } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {\n    value = value.toLowerCase() === 'true';\n  } else if (!Number.isNaN(value) && !STRING_OPTIONS.has(key)) {\n    const numericValue = parseFloat(value);\n    if (!Number.isNaN(numericValue)) {\n      value = parseFloat(value);\n    }\n  }\n\n  return value;\n}\n\n// Options that are known boolean types\nconst BOOLEAN_OPTIONS = new Set([\n  'slaveok',\n  'slave_ok',\n  'sslvalidate',\n  'fsync',\n  'safe',\n  'retrywrites',\n  'j'\n]);\n\n// Known string options, only used to bypass Number coercion in `parseQueryStringItemValue`\nconst STRING_OPTIONS = new Set(['authsource', 'replicaset']);\n\n// Supported text representations of auth mechanisms\n// NOTE: this list exists in native already, if it is merged here we should deduplicate\nconst AUTH_MECHANISMS = new Set([\n  'GSSAPI',\n  'MONGODB-AWS',\n  'MONGODB-X509',\n  'MONGODB-CR',\n  'DEFAULT',\n  'SCRAM-SHA-1',\n  'SCRAM-SHA-256',\n  'PLAIN'\n]);\n\n// Lookup table used to translate normalized (lower-cased) forms of connection string\n// options to their expected camelCase version\nconst CASE_TRANSLATION = {\n  replicaset: 'replicaSet',\n  connecttimeoutms: 'connectTimeoutMS',\n  sockettimeoutms: 'socketTimeoutMS',\n  maxpoolsize: 'maxPoolSize',\n  minpoolsize: 'minPoolSize',\n  maxidletimems: 'maxIdleTimeMS',\n  waitqueuemultiple: 'waitQueueMultiple',\n  waitqueuetimeoutms: 'waitQueueTimeoutMS',\n  wtimeoutms: 'wtimeoutMS',\n  readconcern: 'readConcern',\n  readconcernlevel: 'readConcernLevel',\n  readpreference: 'readPreference',\n  maxstalenessseconds: 'maxStalenessSeconds',\n  readpreferencetags: 'readPreferenceTags',\n  authsource: 'authSource',\n  authmechanism: 'authMechanism',\n  authmechanismproperties: 'authMechanismProperties',\n  gssapiservicename: 'gssapiServiceName',\n  localthresholdms: 'localThresholdMS',\n  serverselectiontimeoutms: 'serverSelectionTimeoutMS',\n  serverselectiontryonce: 'serverSelectionTryOnce',\n  heartbeatfrequencyms: 'heartbeatFrequencyMS',\n  retrywrites: 'retryWrites',\n  uuidrepresentation: 'uuidRepresentation',\n  zlibcompressionlevel: 'zlibCompressionLevel',\n  tlsallowinvalidcertificates: 'tlsAllowInvalidCertificates',\n  tlsallowinvalidhostnames: 'tlsAllowInvalidHostnames',\n  tlsinsecure: 'tlsInsecure',\n  tlscafile: 'tlsCAFile',\n  tlscertificatekeyfile: 'tlsCertificateKeyFile',\n  tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',\n  wtimeout: 'wTimeoutMS',\n  j: 'journal',\n  directconnection: 'directConnection'\n};\n\n/**\n * Sets the value for `key`, allowing for any required translation\n *\n * @param {object} obj The object to set the key on\n * @param {string} key The key to set the value for\n * @param {*} value The value to set\n * @param {object} options The options used for option parsing\n */\nfunction applyConnectionStringOption(obj, key, value, options) {\n  // simple key translation\n  if (key === 'journal') {\n    key = 'j';\n  } else if (key === 'wtimeoutms') {\n    key = 'wtimeout';\n  }\n\n  // more complicated translation\n  if (BOOLEAN_OPTIONS.has(key)) {\n    value = value === 'true' || value === true;\n  } else if (key === 'appname') {\n    value = decodeURIComponent(value);\n  } else if (key === 'readconcernlevel') {\n    obj['readConcernLevel'] = value;\n    key = 'readconcern';\n    value = { level: value };\n  }\n\n  // simple validation\n  if (key === 'compressors') {\n    value = Array.isArray(value) ? value : [value];\n\n    if (!value.every(c => c === 'snappy' || c === 'zlib')) {\n      throw new MongoParseError(\n        'Value for `compressors` must be at least one of: `snappy`, `zlib`'\n      );\n    }\n  }\n\n  if (key === 'authmechanism' && !AUTH_MECHANISMS.has(value)) {\n    throw new MongoParseError(\n      `Value for authMechanism must be one of: ${Array.from(AUTH_MECHANISMS).join(\n        ', '\n      )}, found: ${value}`\n    );\n  }\n\n  if (key === 'readpreference' && !ReadPreference.isValid(value)) {\n    throw new MongoParseError(\n      'Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`'\n    );\n  }\n\n  if (key === 'zlibcompressionlevel' && (value < -1 || value > 9)) {\n    throw new MongoParseError('zlibCompressionLevel must be an integer between -1 and 9');\n  }\n\n  // special cases\n  if (key === 'compressors' || key === 'zlibcompressionlevel') {\n    obj.compression = obj.compression || {};\n    obj = obj.compression;\n  }\n\n  if (key === 'authmechanismproperties') {\n    if (typeof value.SERVICE_NAME === 'string') obj.gssapiServiceName = value.SERVICE_NAME;\n    if (typeof value.SERVICE_REALM === 'string') obj.gssapiServiceRealm = value.SERVICE_REALM;\n    if (typeof value.CANONICALIZE_HOST_NAME !== 'undefined') {\n      obj.gssapiCanonicalizeHostName = value.CANONICALIZE_HOST_NAME;\n    }\n  }\n\n  if (key === 'readpreferencetags') {\n    value = Array.isArray(value) ? splitArrayOfMultipleReadPreferenceTags(value) : [value];\n  }\n\n  // set the actual value\n  if (options.caseTranslate && CASE_TRANSLATION[key]) {\n    obj[CASE_TRANSLATION[key]] = value;\n    return;\n  }\n\n  obj[key] = value;\n}\n\nconst USERNAME_REQUIRED_MECHANISMS = new Set([\n  'GSSAPI',\n  'MONGODB-CR',\n  'PLAIN',\n  'SCRAM-SHA-1',\n  'SCRAM-SHA-256'\n]);\n\nfunction splitArrayOfMultipleReadPreferenceTags(value) {\n  const parsedTags = [];\n\n  for (let i = 0; i < value.length; i++) {\n    parsedTags[i] = {};\n    value[i].split(',').forEach(individualTag => {\n      const splitTag = individualTag.split(':');\n      parsedTags[i][splitTag[0]] = splitTag[1];\n    });\n  }\n\n  return parsedTags;\n}\n\n/**\n * Modifies the parsed connection string object taking into account expectations we\n * have for authentication-related options.\n *\n * @param {object} parsed The parsed connection string result\n * @return The parsed connection string result possibly modified for auth expectations\n */\nfunction applyAuthExpectations(parsed) {\n  if (parsed.options == null) {\n    return;\n  }\n\n  const options = parsed.options;\n  const authSource = options.authsource || options.authSource;\n  if (authSource != null) {\n    parsed.auth = Object.assign({}, parsed.auth, { db: authSource });\n  }\n\n  const authMechanism = options.authmechanism || options.authMechanism;\n  if (authMechanism != null) {\n    if (\n      USERNAME_REQUIRED_MECHANISMS.has(authMechanism) &&\n      (!parsed.auth || parsed.auth.username == null)\n    ) {\n      throw new MongoParseError(`Username required for mechanism \\`${authMechanism}\\``);\n    }\n\n    if (authMechanism === 'GSSAPI') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\n        );\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n    }\n\n    if (authMechanism === 'MONGODB-AWS') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\n        );\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n    }\n\n    if (authMechanism === 'MONGODB-X509') {\n      if (parsed.auth && parsed.auth.password != null) {\n        throw new MongoParseError(`Password not allowed for mechanism \\`${authMechanism}\\``);\n      }\n\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\n        );\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n    }\n\n    if (authMechanism === 'PLAIN') {\n      if (parsed.auth && parsed.auth.db == null) {\n        parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n      }\n    }\n  }\n\n  // default to `admin` if nothing else was resolved\n  if (parsed.auth && parsed.auth.db == null) {\n    parsed.auth = Object.assign({}, parsed.auth, { db: 'admin' });\n  }\n\n  return parsed;\n}\n\n/**\n * Parses a query string according the connection string spec.\n *\n * @param {String} query The query string to parse\n * @param {object} [options] The options used for options parsing\n * @return {Object|Error} The parsed query string as an object, or an error if one was encountered\n */\nfunction parseQueryString(query, options) {\n  const result = {};\n  let parsedQueryString = qs.parse(query);\n\n  checkTLSOptions(parsedQueryString);\n\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key];\n    if (value === '' || value == null) {\n      throw new MongoParseError('Incomplete key value pair for option');\n    }\n\n    const normalizedKey = key.toLowerCase();\n    const parsedValue = FILE_PATH_OPTIONS.has(normalizedKey)\n      ? value\n      : parseQueryStringItemValue(normalizedKey, value);\n    applyConnectionStringOption(result, normalizedKey, parsedValue, options);\n  }\n\n  // special cases for known deprecated options\n  if (result.wtimeout && result.wtimeoutms) {\n    delete result.wtimeout;\n    emitWarningOnce('Unsupported option `wtimeout` specified');\n  }\n\n  return Object.keys(result).length ? result : null;\n}\n\n/// Adds support for modern `tls` variants of out `ssl` options\nfunction translateTLSOptions(queryString) {\n  if (queryString.tls) {\n    queryString.ssl = queryString.tls;\n  }\n\n  if (queryString.tlsInsecure) {\n    queryString.checkServerIdentity = false;\n    queryString.sslValidate = false;\n  } else {\n    Object.assign(queryString, {\n      checkServerIdentity: queryString.tlsAllowInvalidHostnames ? false : true,\n      sslValidate: queryString.tlsAllowInvalidCertificates ? false : true\n    });\n  }\n\n  if (queryString.tlsCAFile) {\n    queryString.ssl = true;\n    queryString.sslCA = queryString.tlsCAFile;\n  }\n\n  if (queryString.tlsCertificateKeyFile) {\n    queryString.ssl = true;\n    if (queryString.tlsCertificateFile) {\n      queryString.sslCert = queryString.tlsCertificateFile;\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n    } else {\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n      queryString.sslCert = queryString.tlsCertificateKeyFile;\n    }\n  }\n\n  if (queryString.tlsCertificateKeyFilePassword) {\n    queryString.ssl = true;\n    queryString.sslPass = queryString.tlsCertificateKeyFilePassword;\n  }\n\n  return queryString;\n}\n\n/**\n * Checks a query string for invalid tls options according to the URI options spec.\n *\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n */\nfunction checkTLSOptions(queryString) {\n  const queryStringKeys = Object.keys(queryString);\n  if (\n    queryStringKeys.indexOf('tlsInsecure') !== -1 &&\n    (queryStringKeys.indexOf('tlsAllowInvalidCertificates') !== -1 ||\n      queryStringKeys.indexOf('tlsAllowInvalidHostnames') !== -1)\n  ) {\n    throw new MongoParseError(\n      'The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.'\n    );\n  }\n\n  const tlsValue = assertTlsOptionsAreEqual('tls', queryString, queryStringKeys);\n  const sslValue = assertTlsOptionsAreEqual('ssl', queryString, queryStringKeys);\n\n  if (tlsValue != null && sslValue != null) {\n    if (tlsValue !== sslValue) {\n      throw new MongoParseError('All values of `tls` and `ssl` must be the same.');\n    }\n  }\n}\n\n/**\n * Checks a query string to ensure all tls/ssl options are the same.\n *\n * @param {string} key The key (tls or ssl) to check\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n * @return The value of the tls/ssl option\n */\nfunction assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {\n  const queryStringHasTLSOption = queryStringKeys.indexOf(optionName) !== -1;\n\n  let optionValue;\n  if (Array.isArray(queryString[optionName])) {\n    optionValue = queryString[optionName][0];\n  } else {\n    optionValue = queryString[optionName];\n  }\n\n  if (queryStringHasTLSOption) {\n    if (Array.isArray(queryString[optionName])) {\n      const firstValue = queryString[optionName][0];\n      queryString[optionName].forEach(tlsValue => {\n        if (tlsValue !== firstValue) {\n          throw new MongoParseError(`All values of ${optionName} must be the same.`);\n        }\n      });\n    }\n  }\n\n  return optionValue;\n}\n\nconst PROTOCOL_MONGODB = 'mongodb';\nconst PROTOCOL_MONGODB_SRV = 'mongodb+srv';\nconst SUPPORTED_PROTOCOLS = [PROTOCOL_MONGODB, PROTOCOL_MONGODB_SRV];\n\n/**\n * Parses a MongoDB connection string\n *\n * @param {*} uri the MongoDB connection string to parse\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.caseTranslate] Whether the parser should translate options back into camelCase after normalization\n * @param {parseCallback} callback\n */\nfunction parseConnectionString(uri, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, { caseTranslate: true }, options);\n\n  // Check for bad uris before we parse\n  try {\n    URL.parse(uri);\n  } catch (e) {\n    return callback(new MongoParseError('URI malformed, cannot be parsed'));\n  }\n\n  const cap = uri.match(HOSTS_RX);\n  if (!cap) {\n    return callback(new MongoParseError('Invalid connection string'));\n  }\n\n  const protocol = cap[1];\n  if (SUPPORTED_PROTOCOLS.indexOf(protocol) === -1) {\n    return callback(new MongoParseError('Invalid protocol provided'));\n  }\n\n  const dbAndQuery = cap[4].split('?');\n  const db = dbAndQuery.length > 0 ? dbAndQuery[0] : null;\n  const query = dbAndQuery.length > 1 ? dbAndQuery[1] : null;\n\n  let parsedOptions;\n  try {\n    parsedOptions = parseQueryString(query, options);\n  } catch (parseError) {\n    return callback(parseError);\n  }\n\n  parsedOptions = Object.assign({}, parsedOptions, options);\n\n  if (protocol === PROTOCOL_MONGODB_SRV) {\n    return parseSrvConnectionString(uri, parsedOptions, callback);\n  }\n\n  const auth = { username: null, password: null, db: db && db !== '' ? qs.unescape(db) : null };\n  if (parsedOptions.auth) {\n    // maintain support for legacy options passed into `MongoClient`\n    if (parsedOptions.auth.username) auth.username = parsedOptions.auth.username;\n    if (parsedOptions.auth.user) auth.username = parsedOptions.auth.user;\n    if (parsedOptions.auth.password) auth.password = parsedOptions.auth.password;\n  } else {\n    if (parsedOptions.username) auth.username = parsedOptions.username;\n    if (parsedOptions.user) auth.username = parsedOptions.user;\n    if (parsedOptions.password) auth.password = parsedOptions.password;\n  }\n\n  if (cap[4].split('?')[0].indexOf('@') !== -1) {\n    return callback(new MongoParseError('Unescaped slash in userinfo section'));\n  }\n\n  const authorityParts = cap[3].split('@');\n  if (authorityParts.length > 2) {\n    return callback(new MongoParseError('Unescaped at-sign in authority section'));\n  }\n\n  if (authorityParts[0] == null || authorityParts[0] === '') {\n    return callback(new MongoParseError('No username provided in authority section'));\n  }\n\n  if (authorityParts.length > 1) {\n    const authParts = authorityParts.shift().split(':');\n    if (authParts.length > 2) {\n      return callback(new MongoParseError('Unescaped colon in authority section'));\n    }\n\n    if (authParts[0] === '') {\n      return callback(new MongoParseError('Invalid empty username provided'));\n    }\n\n    if (!auth.username) auth.username = qs.unescape(authParts[0]);\n    if (!auth.password) auth.password = authParts[1] ? qs.unescape(authParts[1]) : null;\n  }\n\n  let hostParsingError = null;\n  const hosts = authorityParts\n    .shift()\n    .split(',')\n    .map(host => {\n      let parsedHost = URL.parse(`mongodb://${host}`);\n      if (parsedHost.path === '/:') {\n        hostParsingError = new MongoParseError('Double colon in host identifier');\n        return null;\n      }\n\n      // heuristically determine if we're working with a domain socket\n      if (host.match(/\\.sock/)) {\n        parsedHost.hostname = qs.unescape(host);\n        parsedHost.port = null;\n      }\n\n      if (Number.isNaN(parsedHost.port)) {\n        hostParsingError = new MongoParseError('Invalid port (non-numeric string)');\n        return;\n      }\n\n      const result = {\n        host: parsedHost.hostname,\n        port: parsedHost.port ? parseInt(parsedHost.port) : 27017\n      };\n\n      if (result.port === 0) {\n        hostParsingError = new MongoParseError('Invalid port (zero) with hostname');\n        return;\n      }\n\n      if (result.port > 65535) {\n        hostParsingError = new MongoParseError('Invalid port (larger than 65535) with hostname');\n        return;\n      }\n\n      if (result.port < 0) {\n        hostParsingError = new MongoParseError('Invalid port (negative number)');\n        return;\n      }\n\n      return result;\n    })\n    .filter(host => !!host);\n\n  if (hostParsingError) {\n    return callback(hostParsingError);\n  }\n\n  if (hosts.length === 0 || hosts[0].host === '' || hosts[0].host === null) {\n    return callback(new MongoParseError('No hostname or hostnames provided in connection string'));\n  }\n\n  const directConnection = !!parsedOptions.directConnection;\n  if (directConnection && hosts.length !== 1) {\n    // If the option is set to true, the driver MUST validate that there is exactly one host given\n    // in the host list in the URI, and fail client creation otherwise.\n    return callback(new MongoParseError('directConnection option requires exactly one host'));\n  }\n\n  // NOTE: this behavior will go away in v4.0, we will always auto discover there\n  if (\n    parsedOptions.directConnection == null &&\n    hosts.length === 1 &&\n    parsedOptions.replicaSet == null\n  ) {\n    parsedOptions.directConnection = true;\n  }\n\n  const result = {\n    hosts: hosts,\n    auth: auth.db || auth.username ? auth : null,\n    options: Object.keys(parsedOptions).length ? parsedOptions : null\n  };\n\n  if (result.auth && result.auth.db) {\n    result.defaultDatabase = result.auth.db;\n  } else {\n    result.defaultDatabase = 'test';\n  }\n\n  // support modern `tls` variants to SSL options\n  result.options = translateTLSOptions(result.options);\n\n  try {\n    applyAuthExpectations(result);\n  } catch (authError) {\n    return callback(authError);\n  }\n\n  callback(null, result);\n}\n\nmodule.exports = parseConnectionString;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}