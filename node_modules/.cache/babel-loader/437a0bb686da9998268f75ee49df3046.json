{"ast":null,"code":"'use strict';\n\nconst ReadPreference = require('../topologies/read_preference');\nconst MongoError = require('../error').MongoError;\nconst ServerType = require('../sdam/common').ServerType;\nconst TopologyDescription = require('../sdam/topology_description').TopologyDescription;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n\n// OPCODE Numbers\n// Defined at https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#request-opcodes\nvar opcodes = {\n  OP_REPLY: 1,\n  OP_UPDATE: 2001,\n  OP_INSERT: 2002,\n  OP_QUERY: 2004,\n  OP_GETMORE: 2005,\n  OP_DELETE: 2006,\n  OP_KILL_CURSORS: 2007,\n  OP_COMPRESSED: 2012,\n  OP_MSG: 2013\n};\nvar getReadPreference = function (cmd, options) {\n  // Default to command version of the readPreference\n  var readPreference = cmd.readPreference || new ReadPreference('primary');\n  // If we have an option readPreference override the command one\n  if (options.readPreference) {\n    readPreference = options.readPreference;\n  }\n  if (typeof readPreference === 'string') {\n    readPreference = new ReadPreference(readPreference);\n  }\n  if (!(readPreference instanceof ReadPreference)) {\n    throw new MongoError('read preference must be a ReadPreference instance');\n  }\n  return readPreference;\n};\n\n// Parses the header of a wire protocol message\nvar parseHeader = function (message) {\n  return {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n};\nfunction applyCommonQueryOptions(queryOptions, options) {\n  Object.assign(queryOptions, {\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : false,\n    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false\n  });\n  if (typeof options.socketTimeout === 'number') {\n    queryOptions.socketTimeout = options.socketTimeout;\n  }\n  if (options.session) {\n    queryOptions.session = options.session;\n  }\n  if (typeof options.documentsReturnedIn === 'string') {\n    queryOptions.documentsReturnedIn = options.documentsReturnedIn;\n  }\n  return queryOptions;\n}\nfunction isSharded(topologyOrServer) {\n  if (topologyOrServer.type === 'mongos') return true;\n  if (topologyOrServer.description && topologyOrServer.description.type === ServerType.Mongos) {\n    return true;\n  }\n\n  // NOTE: This is incredibly inefficient, and should be removed once command construction\n  //       happens based on `Server` not `Topology`.\n  if (topologyOrServer.description && topologyOrServer.description instanceof TopologyDescription) {\n    const servers = Array.from(topologyOrServer.description.servers.values());\n    return servers.some(server => server.type === ServerType.Mongos);\n  }\n  return false;\n}\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\nfunction collectionNamespace(ns) {\n  return ns.split('.').slice(1).join('.');\n}\nmodule.exports = {\n  getReadPreference,\n  MESSAGE_HEADER_SIZE,\n  COMPRESSION_DETAILS_SIZE,\n  opcodes,\n  parseHeader,\n  applyCommonQueryOptions,\n  isSharded,\n  databaseNamespace,\n  collectionNamespace\n};","map":{"version":3,"names":["ReadPreference","require","MongoError","ServerType","TopologyDescription","MESSAGE_HEADER_SIZE","COMPRESSION_DETAILS_SIZE","opcodes","OP_REPLY","OP_UPDATE","OP_INSERT","OP_QUERY","OP_GETMORE","OP_DELETE","OP_KILL_CURSORS","OP_COMPRESSED","OP_MSG","getReadPreference","cmd","options","readPreference","parseHeader","message","length","readInt32LE","requestId","responseTo","opCode","applyCommonQueryOptions","queryOptions","Object","assign","raw","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","monitoring","fullResult","socketTimeout","session","documentsReturnedIn","isSharded","topologyOrServer","type","description","Mongos","servers","Array","from","values","some","server","databaseNamespace","ns","split","collectionNamespace","slice","join","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/wireprotocol/shared.js"],"sourcesContent":["'use strict';\n\nconst ReadPreference = require('../topologies/read_preference');\nconst MongoError = require('../error').MongoError;\nconst ServerType = require('../sdam/common').ServerType;\nconst TopologyDescription = require('../sdam/topology_description').TopologyDescription;\n\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n\n// OPCODE Numbers\n// Defined at https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#request-opcodes\nvar opcodes = {\n  OP_REPLY: 1,\n  OP_UPDATE: 2001,\n  OP_INSERT: 2002,\n  OP_QUERY: 2004,\n  OP_GETMORE: 2005,\n  OP_DELETE: 2006,\n  OP_KILL_CURSORS: 2007,\n  OP_COMPRESSED: 2012,\n  OP_MSG: 2013\n};\n\nvar getReadPreference = function(cmd, options) {\n  // Default to command version of the readPreference\n  var readPreference = cmd.readPreference || new ReadPreference('primary');\n  // If we have an option readPreference override the command one\n  if (options.readPreference) {\n    readPreference = options.readPreference;\n  }\n\n  if (typeof readPreference === 'string') {\n    readPreference = new ReadPreference(readPreference);\n  }\n\n  if (!(readPreference instanceof ReadPreference)) {\n    throw new MongoError('read preference must be a ReadPreference instance');\n  }\n\n  return readPreference;\n};\n\n// Parses the header of a wire protocol message\nvar parseHeader = function(message) {\n  return {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n};\n\nfunction applyCommonQueryOptions(queryOptions, options) {\n  Object.assign(queryOptions, {\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : false,\n    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false\n  });\n\n  if (typeof options.socketTimeout === 'number') {\n    queryOptions.socketTimeout = options.socketTimeout;\n  }\n\n  if (options.session) {\n    queryOptions.session = options.session;\n  }\n\n  if (typeof options.documentsReturnedIn === 'string') {\n    queryOptions.documentsReturnedIn = options.documentsReturnedIn;\n  }\n\n  return queryOptions;\n}\n\nfunction isSharded(topologyOrServer) {\n  if (topologyOrServer.type === 'mongos') return true;\n  if (topologyOrServer.description && topologyOrServer.description.type === ServerType.Mongos) {\n    return true;\n  }\n\n  // NOTE: This is incredibly inefficient, and should be removed once command construction\n  //       happens based on `Server` not `Topology`.\n  if (topologyOrServer.description && topologyOrServer.description instanceof TopologyDescription) {\n    const servers = Array.from(topologyOrServer.description.servers.values());\n    return servers.some(server => server.type === ServerType.Mongos);\n  }\n\n  return false;\n}\n\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\nfunction collectionNamespace(ns) {\n  return ns\n    .split('.')\n    .slice(1)\n    .join('.');\n}\n\nmodule.exports = {\n  getReadPreference,\n  MESSAGE_HEADER_SIZE,\n  COMPRESSION_DETAILS_SIZE,\n  opcodes,\n  parseHeader,\n  applyCommonQueryOptions,\n  isSharded,\n  databaseNamespace,\n  collectionNamespace\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}