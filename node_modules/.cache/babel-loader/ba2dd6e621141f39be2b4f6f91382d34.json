{"ast":null,"code":"'use strict';\n\nconst MongoError = require('./core/error').MongoError;\nconst ExplainVerbosity = {\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n};\n\n/**\n * @class\n * @property {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'} verbosity The verbosity mode for the explain output.\n */\nclass Explain {\n  /**\n   * Constructs an Explain from the explain verbosity.\n   *\n   * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n   * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n   * ignores the verbosity parameter and executes in \"queryPlanner\".\n   *\n   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity] The verbosity mode for the explain output.\n   */\n  constructor(verbosity) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity ? 'allPlansExecution' : 'queryPlanner';\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n\n  /**\n   * Construct an Explain given an options object.\n   *\n   * @param {object} [options] The options object from which to extract the explain.\n   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output\n   * @return {Explain}\n   */\n  static fromOptions(options) {\n    if (options == null || options.explain === undefined) {\n      return;\n    }\n    const explain = options.explain;\n    if (typeof explain === 'boolean' || explain in ExplainVerbosity) {\n      return new Explain(options.explain);\n    }\n    throw new MongoError(`explain must be one of ${Object.keys(ExplainVerbosity)} or a boolean`);\n  }\n}\nmodule.exports = {\n  Explain\n};","map":{"version":3,"names":["MongoError","require","ExplainVerbosity","queryPlanner","queryPlannerExtended","executionStats","allPlansExecution","Explain","constructor","verbosity","fromOptions","options","explain","undefined","Object","keys","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/explain.js"],"sourcesContent":["'use strict';\n\nconst MongoError = require('./core/error').MongoError;\n\nconst ExplainVerbosity = {\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n};\n\n/**\n * @class\n * @property {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'} verbosity The verbosity mode for the explain output.\n */\nclass Explain {\n  /**\n   * Constructs an Explain from the explain verbosity.\n   *\n   * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n   * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n   * ignores the verbosity parameter and executes in \"queryPlanner\".\n   *\n   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity] The verbosity mode for the explain output.\n   */\n  constructor(verbosity) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity ? 'allPlansExecution' : 'queryPlanner';\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n\n  /**\n   * Construct an Explain given an options object.\n   *\n   * @param {object} [options] The options object from which to extract the explain.\n   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output\n   * @return {Explain}\n   */\n  static fromOptions(options) {\n    if (options == null || options.explain === undefined) {\n      return;\n    }\n\n    const explain = options.explain;\n    if (typeof explain === 'boolean' || explain in ExplainVerbosity) {\n      return new Explain(options.explain);\n    }\n\n    throw new MongoError(`explain must be one of ${Object.keys(ExplainVerbosity)} or a boolean`);\n  }\n}\n\nmodule.exports = { Explain };\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC,CAACD,UAAU;AAErD,MAAME,gBAAgB,GAAG;EACvBC,YAAY,EAAE,cAAc;EAC5BC,oBAAoB,EAAE,sBAAsB;EAC5CC,cAAc,EAAE,gBAAgB;EAChCC,iBAAiB,EAAE;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,OAAO,CAAC;EACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,SAAS,EAAE;IACrB,IAAI,OAAOA,SAAS,KAAK,SAAS,EAAE;MAClC,IAAI,CAACA,SAAS,GAAGA,SAAS,GAAG,mBAAmB,GAAG,cAAc;IACnE,CAAC,MAAM;MACL,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,WAAW,CAACC,OAAO,EAAE;IAC1B,IAAIA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACC,OAAO,KAAKC,SAAS,EAAE;MACpD;IACF;IAEA,MAAMD,OAAO,GAAGD,OAAO,CAACC,OAAO;IAC/B,IAAI,OAAOA,OAAO,KAAK,SAAS,IAAIA,OAAO,IAAIV,gBAAgB,EAAE;MAC/D,OAAO,IAAIK,OAAO,CAACI,OAAO,CAACC,OAAO,CAAC;IACrC;IAEA,MAAM,IAAIZ,UAAU,CAAE,0BAAyBc,MAAM,CAACC,IAAI,CAACb,gBAAgB,CAAE,eAAc,CAAC;EAC9F;AACF;AAEAc,MAAM,CAACC,OAAO,GAAG;EAAEV;AAAQ,CAAC"},"metadata":{},"sourceType":"script"}