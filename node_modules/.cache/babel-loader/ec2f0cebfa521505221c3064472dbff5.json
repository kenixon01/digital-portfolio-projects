{"ast":null,"code":"'use strict';\n\nconst parseServerType = require('../core/sdam/server_description').parseServerType;\nconst RESPONSE_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', '__nodejs_mock_server__'];\nclass StreamDescription {\n  constructor(address, options) {\n    this.address = address;\n    this.type = parseServerType(null);\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.compressors = options && options.compression && Array.isArray(options.compression.compressors) ? options.compression.compressors : [];\n  }\n  receiveResponse(response) {\n    this.type = parseServerType(response);\n    RESPONSE_FIELDS.forEach(field => {\n      if (typeof response[field] !== 'undefined') {\n        this[field] = response[field];\n      }\n    });\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => response.compression.indexOf(c) !== -1)[0];\n    }\n  }\n}\nmodule.exports = {\n  StreamDescription\n};","map":{"version":3,"names":["parseServerType","require","RESPONSE_FIELDS","StreamDescription","constructor","address","options","type","minWireVersion","undefined","maxWireVersion","maxBsonObjectSize","maxMessageSizeBytes","maxWriteBatchSize","compressors","compression","Array","isArray","receiveResponse","response","forEach","field","compressor","filter","c","indexOf","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/cmap/stream_description.js"],"sourcesContent":["'use strict';\nconst parseServerType = require('../core/sdam/server_description').parseServerType;\n\nconst RESPONSE_FIELDS = [\n  'minWireVersion',\n  'maxWireVersion',\n  'maxBsonObjectSize',\n  'maxMessageSizeBytes',\n  'maxWriteBatchSize',\n  '__nodejs_mock_server__'\n];\n\nclass StreamDescription {\n  constructor(address, options) {\n    this.address = address;\n    this.type = parseServerType(null);\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.compressors =\n      options && options.compression && Array.isArray(options.compression.compressors)\n        ? options.compression.compressors\n        : [];\n  }\n\n  receiveResponse(response) {\n    this.type = parseServerType(response);\n\n    RESPONSE_FIELDS.forEach(field => {\n      if (typeof response[field] !== 'undefined') {\n        this[field] = response[field];\n      }\n    });\n\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => response.compression.indexOf(c) !== -1)[0];\n    }\n  }\n}\n\nmodule.exports = {\n  StreamDescription\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,iCAAiC,CAAC,CAACD,eAAe;AAElF,MAAME,eAAe,GAAG,CACtB,gBAAgB,EAChB,gBAAgB,EAChB,mBAAmB,EACnB,qBAAqB,EACrB,mBAAmB,EACnB,wBAAwB,CACzB;AAED,MAAMC,iBAAiB,CAAC;EACtBC,WAAW,CAACC,OAAO,EAAEC,OAAO,EAAE;IAC5B,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,IAAI,GAAGP,eAAe,CAAC,IAAI,CAAC;IACjC,IAAI,CAACQ,cAAc,GAAGC,SAAS;IAC/B,IAAI,CAACC,cAAc,GAAGD,SAAS;IAC/B,IAAI,CAACE,iBAAiB,GAAG,QAAQ;IACjC,IAAI,CAACC,mBAAmB,GAAG,QAAQ;IACnC,IAAI,CAACC,iBAAiB,GAAG,MAAM;IAC/B,IAAI,CAACC,WAAW,GACdR,OAAO,IAAIA,OAAO,CAACS,WAAW,IAAIC,KAAK,CAACC,OAAO,CAACX,OAAO,CAACS,WAAW,CAACD,WAAW,CAAC,GAC5ER,OAAO,CAACS,WAAW,CAACD,WAAW,GAC/B,EAAE;EACV;EAEAI,eAAe,CAACC,QAAQ,EAAE;IACxB,IAAI,CAACZ,IAAI,GAAGP,eAAe,CAACmB,QAAQ,CAAC;IAErCjB,eAAe,CAACkB,OAAO,CAACC,KAAK,IAAI;MAC/B,IAAI,OAAOF,QAAQ,CAACE,KAAK,CAAC,KAAK,WAAW,EAAE;QAC1C,IAAI,CAACA,KAAK,CAAC,GAAGF,QAAQ,CAACE,KAAK,CAAC;MAC/B;IACF,CAAC,CAAC;IAEF,IAAIF,QAAQ,CAACJ,WAAW,EAAE;MACxB,IAAI,CAACO,UAAU,GAAG,IAAI,CAACR,WAAW,CAACS,MAAM,CAACC,CAAC,IAAIL,QAAQ,CAACJ,WAAW,CAACU,OAAO,CAACD,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3F;EACF;AACF;AAEAE,MAAM,CAACC,OAAO,GAAG;EACfxB;AACF,CAAC"},"metadata":{},"sourceType":"script"}