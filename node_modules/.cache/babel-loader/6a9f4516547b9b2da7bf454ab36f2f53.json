{"ast":null,"code":"'use strict';\n\nvar f = require('util').format,\n  MongoError = require('../error').MongoError;\n\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null;\n// Save the process id\nvar pid = process.pid;\n// current logger\nvar currentLogger = null;\n\n/**\n * @callback Logger~loggerCallback\n * @param {string} msg message being logged\n * @param {object} state an object containing more metadata about the logging message\n */\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Logger~loggerCallback} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n */\nvar Logger = function (className, options) {\n  if (!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {};\n\n  // Current reference\n  this.className = className;\n\n  // Current logger\n  if (options.logger) {\n    currentLogger = options.logger;\n  } else if (currentLogger == null) {\n    // eslint-disable-next-line no-console\n    currentLogger = console.log;\n  }\n\n  // Set level of logging, default is error\n  if (options.loggerLevel) {\n    level = options.loggerLevel || 'error';\n  }\n\n  // Add all class names\n  if (filteredClasses[this.className] == null) classFilters[this.className] = true;\n};\n\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.debug = function (message, object) {\n  if (this.isDebug() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n    var state = {\n      type: 'debug',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n};\n\n/**\n * Log a message at the warn level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.warn = function (message, object) {\n  if (this.isWarn() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n    var state = {\n      type: 'warn',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n/**\n * Log a message at the info level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.info = function (message, object) {\n  if (this.isInfo() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n    var state = {\n      type: 'info',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n/**\n * Log a message at the error level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.error = function (message, object) {\n  if (this.isError() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n    var state = {\n      type: 'error',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n/**\n * Is the logger set at info level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isInfo = function () {\n  return level === 'info' || level === 'debug';\n},\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isError = function () {\n  return level === 'error' || level === 'info' || level === 'debug';\n},\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isWarn = function () {\n  return level === 'error' || level === 'warn' || level === 'info' || level === 'debug';\n},\n/**\n * Is the logger set at debug level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isDebug = function () {\n  return level === 'debug';\n};\n\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\nLogger.reset = function () {\n  level = 'error';\n  filteredClasses = {};\n};\n\n/**\n * Get the current logger function\n * @method\n * @return {Logger~loggerCallback}\n */\nLogger.currentLogger = function () {\n  return currentLogger;\n};\n\n/**\n * Set the current logger function\n * @method\n * @param {Logger~loggerCallback} logger Logger function.\n * @return {null}\n */\nLogger.setCurrentLogger = function (logger) {\n  if (typeof logger !== 'function') throw new MongoError('current logger must be a function');\n  currentLogger = logger;\n};\n\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\nLogger.filter = function (type, values) {\n  if (type === 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n    values.forEach(function (x) {\n      filteredClasses[x] = true;\n    });\n  }\n};\n\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\nLogger.setLevel = function (_level) {\n  if (_level !== 'info' && _level !== 'error' && _level !== 'debug' && _level !== 'warn') {\n    throw new Error(f('%s is an illegal logging level', _level));\n  }\n  level = _level;\n};\nmodule.exports = Logger;","map":{"version":3,"names":["f","require","format","MongoError","classFilters","filteredClasses","level","pid","process","currentLogger","Logger","className","options","logger","console","log","loggerLevel","prototype","debug","message","object","isDebug","Object","keys","length","dateTime","Date","getTime","msg","state","type","date","meta","warn","isWarn","info","isInfo","error","isError","reset","setCurrentLogger","filter","values","Array","isArray","forEach","x","setLevel","_level","Error","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/connection/logger.js"],"sourcesContent":["'use strict';\n\nvar f = require('util').format,\n  MongoError = require('../error').MongoError;\n\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null;\n// Save the process id\nvar pid = process.pid;\n// current logger\nvar currentLogger = null;\n\n/**\n * @callback Logger~loggerCallback\n * @param {string} msg message being logged\n * @param {object} state an object containing more metadata about the logging message\n */\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Logger~loggerCallback} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n */\nvar Logger = function(className, options) {\n  if (!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {};\n\n  // Current reference\n  this.className = className;\n\n  // Current logger\n  if (options.logger) {\n    currentLogger = options.logger;\n  } else if (currentLogger == null) {\n    // eslint-disable-next-line no-console\n    currentLogger = console.log;\n  }\n\n  // Set level of logging, default is error\n  if (options.loggerLevel) {\n    level = options.loggerLevel || 'error';\n  }\n\n  // Add all class names\n  if (filteredClasses[this.className] == null) classFilters[this.className] = true;\n};\n\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.debug = function(message, object) {\n  if (\n    this.isDebug() &&\n    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n  ) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n    var state = {\n      type: 'debug',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n};\n\n/**\n * Log a message at the warn level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\n(Logger.prototype.warn = function(message, object) {\n  if (\n    this.isWarn() &&\n    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n  ) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n    var state = {\n      type: 'warn',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n}),\n  /**\n   * Log a message at the info level\n   * @method\n   * @param {string} message The message to log\n   * @param {object} object additional meta data to log\n   * @return {null}\n   */\n  (Logger.prototype.info = function(message, object) {\n    if (\n      this.isInfo() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      var dateTime = new Date().getTime();\n      var msg = f('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      var state = {\n        type: 'info',\n        message: message,\n        className: this.className,\n        pid: pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }),\n  /**\n   * Log a message at the error level\n   * @method\n   * @param {string} message The message to log\n   * @param {object} object additional meta data to log\n   * @return {null}\n   */\n  (Logger.prototype.error = function(message, object) {\n    if (\n      this.isError() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      var dateTime = new Date().getTime();\n      var msg = f('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      var state = {\n        type: 'error',\n        message: message,\n        className: this.className,\n        pid: pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }),\n  /**\n   * Is the logger set at info level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isInfo = function() {\n    return level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at error level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isError = function() {\n    return level === 'error' || level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at error level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isWarn = function() {\n    return level === 'error' || level === 'warn' || level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at debug level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isDebug = function() {\n    return level === 'debug';\n  });\n\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\nLogger.reset = function() {\n  level = 'error';\n  filteredClasses = {};\n};\n\n/**\n * Get the current logger function\n * @method\n * @return {Logger~loggerCallback}\n */\nLogger.currentLogger = function() {\n  return currentLogger;\n};\n\n/**\n * Set the current logger function\n * @method\n * @param {Logger~loggerCallback} logger Logger function.\n * @return {null}\n */\nLogger.setCurrentLogger = function(logger) {\n  if (typeof logger !== 'function') throw new MongoError('current logger must be a function');\n  currentLogger = logger;\n};\n\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\nLogger.filter = function(type, values) {\n  if (type === 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n\n    values.forEach(function(x) {\n      filteredClasses[x] = true;\n    });\n  }\n};\n\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\nLogger.setLevel = function(_level) {\n  if (_level !== 'info' && _level !== 'error' && _level !== 'debug' && _level !== 'warn') {\n    throw new Error(f('%s is an illegal logging level', _level));\n  }\n\n  level = _level;\n};\n\nmodule.exports = Logger;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC,CAACC,MAAM;EAC5BC,UAAU,GAAGF,OAAO,CAAC,UAAU,CAAC,CAACE,UAAU;;AAE7C;AACA,IAAIC,YAAY,GAAG,CAAC,CAAC;AACrB,IAAIC,eAAe,GAAG,CAAC,CAAC;AACxB,IAAIC,KAAK,GAAG,IAAI;AAChB;AACA,IAAIC,GAAG,GAAGC,OAAO,CAACD,GAAG;AACrB;AACA,IAAIE,aAAa,GAAG,IAAI;;AAExB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAG,UAASC,SAAS,EAAEC,OAAO,EAAE;EACxC,IAAI,EAAE,IAAI,YAAYF,MAAM,CAAC,EAAE,OAAO,IAAIA,MAAM,CAACC,SAAS,EAAEC,OAAO,CAAC;EACpEA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;EAEvB;EACA,IAAI,CAACD,SAAS,GAAGA,SAAS;;EAE1B;EACA,IAAIC,OAAO,CAACC,MAAM,EAAE;IAClBJ,aAAa,GAAGG,OAAO,CAACC,MAAM;EAChC,CAAC,MAAM,IAAIJ,aAAa,IAAI,IAAI,EAAE;IAChC;IACAA,aAAa,GAAGK,OAAO,CAACC,GAAG;EAC7B;;EAEA;EACA,IAAIH,OAAO,CAACI,WAAW,EAAE;IACvBV,KAAK,GAAGM,OAAO,CAACI,WAAW,IAAI,OAAO;EACxC;;EAEA;EACA,IAAIX,eAAe,CAAC,IAAI,CAACM,SAAS,CAAC,IAAI,IAAI,EAAEP,YAAY,CAAC,IAAI,CAACO,SAAS,CAAC,GAAG,IAAI;AAClF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,MAAM,CAACO,SAAS,CAACC,KAAK,GAAG,UAASC,OAAO,EAAEC,MAAM,EAAE;EACjD,IACE,IAAI,CAACC,OAAO,EAAE,KACZC,MAAM,CAACC,IAAI,CAAClB,eAAe,CAAC,CAACmB,MAAM,GAAG,CAAC,IAAInB,eAAe,CAAC,IAAI,CAACM,SAAS,CAAC,IACzEW,MAAM,CAACC,IAAI,CAAClB,eAAe,CAAC,CAACmB,MAAM,KAAK,CAAC,IAAIpB,YAAY,CAAC,IAAI,CAACO,SAAS,CAAE,CAAC,EAC9E;IACA,IAAIc,QAAQ,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACnC,IAAIC,GAAG,GAAG5B,CAAC,CAAC,kBAAkB,EAAE,OAAO,EAAE,IAAI,CAACW,SAAS,EAAEJ,GAAG,EAAEkB,QAAQ,EAAEN,OAAO,CAAC;IAChF,IAAIU,KAAK,GAAG;MACVC,IAAI,EAAE,OAAO;MACbX,OAAO,EAAEA,OAAO;MAChBR,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBJ,GAAG,EAAEA,GAAG;MACRwB,IAAI,EAAEN;IACR,CAAC;IACD,IAAIL,MAAM,EAAES,KAAK,CAACG,IAAI,GAAGZ,MAAM;IAC/BX,aAAa,CAACmB,GAAG,EAAEC,KAAK,CAAC;EAC3B;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACCnB,MAAM,CAACO,SAAS,CAACgB,IAAI,GAAG,UAASd,OAAO,EAAEC,MAAM,EAAE;EACjD,IACE,IAAI,CAACc,MAAM,EAAE,KACXZ,MAAM,CAACC,IAAI,CAAClB,eAAe,CAAC,CAACmB,MAAM,GAAG,CAAC,IAAInB,eAAe,CAAC,IAAI,CAACM,SAAS,CAAC,IACzEW,MAAM,CAACC,IAAI,CAAClB,eAAe,CAAC,CAACmB,MAAM,KAAK,CAAC,IAAIpB,YAAY,CAAC,IAAI,CAACO,SAAS,CAAE,CAAC,EAC9E;IACA,IAAIc,QAAQ,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACnC,IAAIC,GAAG,GAAG5B,CAAC,CAAC,kBAAkB,EAAE,MAAM,EAAE,IAAI,CAACW,SAAS,EAAEJ,GAAG,EAAEkB,QAAQ,EAAEN,OAAO,CAAC;IAC/E,IAAIU,KAAK,GAAG;MACVC,IAAI,EAAE,MAAM;MACZX,OAAO,EAAEA,OAAO;MAChBR,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBJ,GAAG,EAAEA,GAAG;MACRwB,IAAI,EAAEN;IACR,CAAC;IACD,IAAIL,MAAM,EAAES,KAAK,CAACG,IAAI,GAAGZ,MAAM;IAC/BX,aAAa,CAACmB,GAAG,EAAEC,KAAK,CAAC;EAC3B;AACF,CAAC;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACGnB,MAAM,CAACO,SAAS,CAACkB,IAAI,GAAG,UAAShB,OAAO,EAAEC,MAAM,EAAE;EACjD,IACE,IAAI,CAACgB,MAAM,EAAE,KACXd,MAAM,CAACC,IAAI,CAAClB,eAAe,CAAC,CAACmB,MAAM,GAAG,CAAC,IAAInB,eAAe,CAAC,IAAI,CAACM,SAAS,CAAC,IACzEW,MAAM,CAACC,IAAI,CAAClB,eAAe,CAAC,CAACmB,MAAM,KAAK,CAAC,IAAIpB,YAAY,CAAC,IAAI,CAACO,SAAS,CAAE,CAAC,EAC9E;IACA,IAAIc,QAAQ,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACnC,IAAIC,GAAG,GAAG5B,CAAC,CAAC,kBAAkB,EAAE,MAAM,EAAE,IAAI,CAACW,SAAS,EAAEJ,GAAG,EAAEkB,QAAQ,EAAEN,OAAO,CAAC;IAC/E,IAAIU,KAAK,GAAG;MACVC,IAAI,EAAE,MAAM;MACZX,OAAO,EAAEA,OAAO;MAChBR,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBJ,GAAG,EAAEA,GAAG;MACRwB,IAAI,EAAEN;IACR,CAAC;IACD,IAAIL,MAAM,EAAES,KAAK,CAACG,IAAI,GAAGZ,MAAM;IAC/BX,aAAa,CAACmB,GAAG,EAAEC,KAAK,CAAC;EAC3B;AACF,CAAC;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACGnB,MAAM,CAACO,SAAS,CAACoB,KAAK,GAAG,UAASlB,OAAO,EAAEC,MAAM,EAAE;EAClD,IACE,IAAI,CAACkB,OAAO,EAAE,KACZhB,MAAM,CAACC,IAAI,CAAClB,eAAe,CAAC,CAACmB,MAAM,GAAG,CAAC,IAAInB,eAAe,CAAC,IAAI,CAACM,SAAS,CAAC,IACzEW,MAAM,CAACC,IAAI,CAAClB,eAAe,CAAC,CAACmB,MAAM,KAAK,CAAC,IAAIpB,YAAY,CAAC,IAAI,CAACO,SAAS,CAAE,CAAC,EAC9E;IACA,IAAIc,QAAQ,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACnC,IAAIC,GAAG,GAAG5B,CAAC,CAAC,kBAAkB,EAAE,OAAO,EAAE,IAAI,CAACW,SAAS,EAAEJ,GAAG,EAAEkB,QAAQ,EAAEN,OAAO,CAAC;IAChF,IAAIU,KAAK,GAAG;MACVC,IAAI,EAAE,OAAO;MACbX,OAAO,EAAEA,OAAO;MAChBR,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBJ,GAAG,EAAEA,GAAG;MACRwB,IAAI,EAAEN;IACR,CAAC;IACD,IAAIL,MAAM,EAAES,KAAK,CAACG,IAAI,GAAGZ,MAAM;IAC/BX,aAAa,CAACmB,GAAG,EAAEC,KAAK,CAAC;EAC3B;AACF,CAAC;AACD;AACF;AACA;AACA;AACA;AACGnB,MAAM,CAACO,SAAS,CAACmB,MAAM,GAAG,YAAW;EACpC,OAAO9B,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,OAAO;AAC9C,CAAC;AACD;AACF;AACA;AACA;AACA;AACGI,MAAM,CAACO,SAAS,CAACqB,OAAO,GAAG,YAAW;EACrC,OAAOhC,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,OAAO;AACnE,CAAC;AACD;AACF;AACA;AACA;AACA;AACGI,MAAM,CAACO,SAAS,CAACiB,MAAM,GAAG,YAAW;EACpC,OAAO5B,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,OAAO;AACvF,CAAC;AACD;AACF;AACA;AACA;AACA;AACGI,MAAM,CAACO,SAAS,CAACI,OAAO,GAAG,YAAW;EACrC,OAAOf,KAAK,KAAK,OAAO;AAC1B,CAAE;;AAEJ;AACA;AACA;AACA;AACA;AACAI,MAAM,CAAC6B,KAAK,GAAG,YAAW;EACxBjC,KAAK,GAAG,OAAO;EACfD,eAAe,GAAG,CAAC,CAAC;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAK,MAAM,CAACD,aAAa,GAAG,YAAW;EAChC,OAAOA,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAAC8B,gBAAgB,GAAG,UAAS3B,MAAM,EAAE;EACzC,IAAI,OAAOA,MAAM,KAAK,UAAU,EAAE,MAAM,IAAIV,UAAU,CAAC,mCAAmC,CAAC;EAC3FM,aAAa,GAAGI,MAAM;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,MAAM,CAAC+B,MAAM,GAAG,UAASX,IAAI,EAAEY,MAAM,EAAE;EACrC,IAAIZ,IAAI,KAAK,OAAO,IAAIa,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;IAC7CrC,eAAe,GAAG,CAAC,CAAC;IAEpBqC,MAAM,CAACG,OAAO,CAAC,UAASC,CAAC,EAAE;MACzBzC,eAAe,CAACyC,CAAC,CAAC,GAAG,IAAI;IAC3B,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACApC,MAAM,CAACqC,QAAQ,GAAG,UAASC,MAAM,EAAE;EACjC,IAAIA,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,OAAO,IAAIA,MAAM,KAAK,OAAO,IAAIA,MAAM,KAAK,MAAM,EAAE;IACtF,MAAM,IAAIC,KAAK,CAACjD,CAAC,CAAC,gCAAgC,EAAEgD,MAAM,CAAC,CAAC;EAC9D;EAEA1C,KAAK,GAAG0C,MAAM;AAChB,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGzC,MAAM"},"metadata":{},"sourceType":"script"}