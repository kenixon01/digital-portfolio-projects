{"ast":null,"code":"'use strict';\n\nconst MongoError = require('./error').MongoError;\nconst ReadPreference = require('./topologies/read_preference');\nconst ReadConcern = require('../read_concern');\nconst WriteConcern = require('../write_concern');\nlet TxnState;\nlet stateMachine;\n(() => {\n  const NO_TRANSACTION = 'NO_TRANSACTION';\n  const STARTING_TRANSACTION = 'STARTING_TRANSACTION';\n  const TRANSACTION_IN_PROGRESS = 'TRANSACTION_IN_PROGRESS';\n  const TRANSACTION_COMMITTED = 'TRANSACTION_COMMITTED';\n  const TRANSACTION_COMMITTED_EMPTY = 'TRANSACTION_COMMITTED_EMPTY';\n  const TRANSACTION_ABORTED = 'TRANSACTION_ABORTED';\n  TxnState = {\n    NO_TRANSACTION,\n    STARTING_TRANSACTION,\n    TRANSACTION_IN_PROGRESS,\n    TRANSACTION_COMMITTED,\n    TRANSACTION_COMMITTED_EMPTY,\n    TRANSACTION_ABORTED\n  };\n  stateMachine = {\n    [NO_TRANSACTION]: [NO_TRANSACTION, STARTING_TRANSACTION],\n    [STARTING_TRANSACTION]: [TRANSACTION_IN_PROGRESS, TRANSACTION_COMMITTED, TRANSACTION_COMMITTED_EMPTY, TRANSACTION_ABORTED],\n    [TRANSACTION_IN_PROGRESS]: [TRANSACTION_IN_PROGRESS, TRANSACTION_COMMITTED, TRANSACTION_ABORTED],\n    [TRANSACTION_COMMITTED]: [TRANSACTION_COMMITTED, TRANSACTION_COMMITTED_EMPTY, STARTING_TRANSACTION, NO_TRANSACTION],\n    [TRANSACTION_ABORTED]: [STARTING_TRANSACTION, NO_TRANSACTION],\n    [TRANSACTION_COMMITTED_EMPTY]: [TRANSACTION_COMMITTED_EMPTY, NO_TRANSACTION]\n  };\n})();\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @typedef {Object} ReadConcern\n * @property {'local'|'available'|'majority'|'linearizable'|'snapshot'} level The readConcern Level\n * @see https://docs.mongodb.com/manual/reference/read-concern/\n */\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @typedef {Object} WriteConcern\n * @property {number|'majority'|string} [w=1] requests acknowledgement that the write operation has\n * propagated to a specified number of mongod hosts\n * @property {boolean} [j=false] requests acknowledgement from MongoDB that the write operation has\n * been written to the journal\n * @property {number} [wtimeout] a time limit, in milliseconds, for the write concern\n * @see https://docs.mongodb.com/manual/reference/write-concern/\n */\n\n/**\n * Configuration options for a transaction.\n * @typedef {Object} TransactionOptions\n * @property {ReadConcern} [readConcern] A default read concern for commands in this transaction\n * @property {WriteConcern} [writeConcern] A default writeConcern for commands in this transaction\n * @property {ReadPreference} [readPreference] A default read preference for commands in this transaction\n */\n\n/**\n * A class maintaining state related to a server transaction. Internal Only\n * @ignore\n */\nclass Transaction {\n  /**\n   * Create a transaction\n   *\n   * @ignore\n   * @param {TransactionOptions} [options] Optional settings\n   */\n  constructor(options) {\n    options = options || {};\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w <= 0) {\n        throw new MongoError('Transactions do not support unacknowledged write concern');\n      }\n      this.options.writeConcern = writeConcern;\n    }\n    if (options.readConcern) {\n      this.options.readConcern = ReadConcern.fromOptions(options);\n    }\n    if (options.readPreference) {\n      this.options.readPreference = ReadPreference.fromOptions(options);\n    }\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n  get server() {\n    return this._pinnedServer;\n  }\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n  get isPinned() {\n    return !!this.server;\n  }\n\n  /**\n   * @ignore\n   * @return Whether this session is presently in a transaction\n   */\n  get isActive() {\n    return [TxnState.STARTING_TRANSACTION, TxnState.TRANSACTION_IN_PROGRESS].indexOf(this.state) !== -1;\n  }\n\n  /**\n   * Transition the transaction in the state machine\n   * @ignore\n   * @param {TxnState} state The new state to transition to\n   */\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n    if (nextStates && nextStates.indexOf(nextState) !== -1) {\n      this.state = nextState;\n      if (this.state === TxnState.NO_TRANSACTION || this.state === TxnState.STARTING_TRANSACTION) {\n        this.unpinServer();\n      }\n      return;\n    }\n    throw new MongoError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n  }\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n}\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\nmodule.exports = {\n  TxnState,\n  Transaction,\n  isTransactionCommand\n};","map":{"version":3,"names":["MongoError","require","ReadPreference","ReadConcern","WriteConcern","TxnState","stateMachine","NO_TRANSACTION","STARTING_TRANSACTION","TRANSACTION_IN_PROGRESS","TRANSACTION_COMMITTED","TRANSACTION_COMMITTED_EMPTY","TRANSACTION_ABORTED","Transaction","constructor","options","state","writeConcern","fromOptions","w","readConcern","readPreference","maxCommitTimeMS","maxTimeMS","_pinnedServer","undefined","_recoveryToken","server","recoveryToken","isPinned","isActive","indexOf","transition","nextState","nextStates","unpinServer","pinServer","isTransactionCommand","command","commitTransaction","abortTransaction","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/transactions.js"],"sourcesContent":["'use strict';\nconst MongoError = require('./error').MongoError;\nconst ReadPreference = require('./topologies/read_preference');\nconst ReadConcern = require('../read_concern');\nconst WriteConcern = require('../write_concern');\n\nlet TxnState;\nlet stateMachine;\n\n(() => {\n  const NO_TRANSACTION = 'NO_TRANSACTION';\n  const STARTING_TRANSACTION = 'STARTING_TRANSACTION';\n  const TRANSACTION_IN_PROGRESS = 'TRANSACTION_IN_PROGRESS';\n  const TRANSACTION_COMMITTED = 'TRANSACTION_COMMITTED';\n  const TRANSACTION_COMMITTED_EMPTY = 'TRANSACTION_COMMITTED_EMPTY';\n  const TRANSACTION_ABORTED = 'TRANSACTION_ABORTED';\n\n  TxnState = {\n    NO_TRANSACTION,\n    STARTING_TRANSACTION,\n    TRANSACTION_IN_PROGRESS,\n    TRANSACTION_COMMITTED,\n    TRANSACTION_COMMITTED_EMPTY,\n    TRANSACTION_ABORTED\n  };\n\n  stateMachine = {\n    [NO_TRANSACTION]: [NO_TRANSACTION, STARTING_TRANSACTION],\n    [STARTING_TRANSACTION]: [\n      TRANSACTION_IN_PROGRESS,\n      TRANSACTION_COMMITTED,\n      TRANSACTION_COMMITTED_EMPTY,\n      TRANSACTION_ABORTED\n    ],\n    [TRANSACTION_IN_PROGRESS]: [\n      TRANSACTION_IN_PROGRESS,\n      TRANSACTION_COMMITTED,\n      TRANSACTION_ABORTED\n    ],\n    [TRANSACTION_COMMITTED]: [\n      TRANSACTION_COMMITTED,\n      TRANSACTION_COMMITTED_EMPTY,\n      STARTING_TRANSACTION,\n      NO_TRANSACTION\n    ],\n    [TRANSACTION_ABORTED]: [STARTING_TRANSACTION, NO_TRANSACTION],\n    [TRANSACTION_COMMITTED_EMPTY]: [TRANSACTION_COMMITTED_EMPTY, NO_TRANSACTION]\n  };\n})();\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @typedef {Object} ReadConcern\n * @property {'local'|'available'|'majority'|'linearizable'|'snapshot'} level The readConcern Level\n * @see https://docs.mongodb.com/manual/reference/read-concern/\n */\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @typedef {Object} WriteConcern\n * @property {number|'majority'|string} [w=1] requests acknowledgement that the write operation has\n * propagated to a specified number of mongod hosts\n * @property {boolean} [j=false] requests acknowledgement from MongoDB that the write operation has\n * been written to the journal\n * @property {number} [wtimeout] a time limit, in milliseconds, for the write concern\n * @see https://docs.mongodb.com/manual/reference/write-concern/\n */\n\n/**\n * Configuration options for a transaction.\n * @typedef {Object} TransactionOptions\n * @property {ReadConcern} [readConcern] A default read concern for commands in this transaction\n * @property {WriteConcern} [writeConcern] A default writeConcern for commands in this transaction\n * @property {ReadPreference} [readPreference] A default read preference for commands in this transaction\n */\n\n/**\n * A class maintaining state related to a server transaction. Internal Only\n * @ignore\n */\nclass Transaction {\n  /**\n   * Create a transaction\n   *\n   * @ignore\n   * @param {TransactionOptions} [options] Optional settings\n   */\n  constructor(options) {\n    options = options || {};\n\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w <= 0) {\n        throw new MongoError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n\n  get server() {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n\n  get isPinned() {\n    return !!this.server;\n  }\n\n  /**\n   * @ignore\n   * @return Whether this session is presently in a transaction\n   */\n  get isActive() {\n    return (\n      [TxnState.STARTING_TRANSACTION, TxnState.TRANSACTION_IN_PROGRESS].indexOf(this.state) !== -1\n    );\n  }\n\n  /**\n   * Transition the transaction in the state machine\n   * @ignore\n   * @param {TxnState} state The new state to transition to\n   */\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n    if (nextStates && nextStates.indexOf(nextState) !== -1) {\n      this.state = nextState;\n      if (this.state === TxnState.NO_TRANSACTION || this.state === TxnState.STARTING_TRANSACTION) {\n        this.unpinServer();\n      }\n      return;\n    }\n\n    throw new MongoError(\n      `Attempted illegal state transition from [${this.state}] to [${nextState}]`\n    );\n  }\n\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n}\n\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n\nmodule.exports = { TxnState, Transaction, isTransactionCommand };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}