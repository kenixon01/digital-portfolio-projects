{"ast":null,"code":"'use strict';\n\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\nconst Buffer = require('safe-buffer').Buffer;\nconst opcodes = require('../wireprotocol/shared').opcodes;\nconst databaseNamespace = require('../wireprotocol/shared').databaseNamespace;\nconst ReadPreference = require('../topologies/read_preference');\nconst MongoError = require('../../core/error').MongoError;\n\n// Incrementing request id\nlet _requestId = 0;\n\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\nclass Msg {\n  constructor(bson, ns, command, options) {\n    // Basic options needed to be passed in\n    if (command == null) throw new Error('query must be specified for query');\n\n    // Basic options\n    this.bson = bson;\n    this.ns = ns;\n    this.command = command;\n    this.command.$db = databaseNamespace(ns);\n    if (options.readPreference && options.readPreference.mode !== ReadPreference.PRIMARY) {\n      this.command.$readPreference = options.readPreference.toJSON();\n    }\n\n    // Ensure empty options\n    this.options = options || {};\n\n    // Additional options\n    this.requestId = options.requestId ? options.requestId : Msg.getRequestId();\n\n    // Serialization option\n    this.serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n\n    // flags\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed = typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n  toBin() {\n    const buffers = [];\n    let flags = 0;\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n    const header = Buffer.alloc(4 * 4 +\n    // Header\n    4 // Flags\n    );\n\n    buffers.push(header);\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n    header.writeInt32LE(totalLength, 0); // messageLength\n    header.writeInt32LE(this.requestId, 4); // requestID\n    header.writeInt32LE(0, 8); // responseTo\n    header.writeInt32LE(opcodes.OP_MSG, 12); // opCode\n    header.writeUInt32LE(flags, 16); // flags\n    return buffers;\n  }\n  makeDocumentSegment(buffers, document) {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n  serializeBson(document) {\n    return this.bson.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n}\nMsg.getRequestId = function () {\n  _requestId = _requestId + 1 & 0x7fffffff;\n  return _requestId;\n};\nclass BinMsg {\n  constructor(bson, message, msgHeader, msgBody, opts) {\n    opts = opts || {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    };\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.bson = bson;\n    this.opts = opts;\n\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n\n    // Read response flags\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;\n    this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;\n    this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;\n    this.bsonRegExp = typeof opts.bsonRegExp === 'boolean' ? opts.bsonRegExp : false;\n    this.documents = [];\n  }\n  isParsed() {\n    return this.parsed;\n  }\n  parse(options) {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options || {};\n    this.index = 4;\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs = typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;\n    const promoteValues = typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;\n    const promoteBuffers = typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : this.opts.promoteBuffers;\n    const bsonRegExp = typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : this.opts.bsonRegExp;\n\n    // Set up the options\n    const _options = {\n      promoteLongs: promoteLongs,\n      promoteValues: promoteValues,\n      promoteBuffers: promoteBuffers,\n      bsonRegExp: bsonRegExp\n    };\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n      if (payloadType === 1) {\n        // It was decided that no driver makes use of payload type 1\n        throw new MongoError('OP_MSG Payload Type 1 detected unsupported protocol');\n      } else if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : this.bson.deserialize(bin, _options));\n        this.index += bsonSize;\n      }\n    }\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n      const doc = this.bson.deserialize(this.documents[0], _options);\n      this.documents = [doc];\n    }\n    this.parsed = true;\n  }\n}\nmodule.exports = {\n  Msg,\n  BinMsg\n};","map":{"version":3,"names":["Buffer","require","opcodes","databaseNamespace","ReadPreference","MongoError","_requestId","OPTS_CHECKSUM_PRESENT","OPTS_MORE_TO_COME","OPTS_EXHAUST_ALLOWED","Msg","constructor","bson","ns","command","options","Error","$db","readPreference","mode","PRIMARY","$readPreference","toJSON","requestId","getRequestId","serializeFunctions","ignoreUndefined","checkKeys","maxBsonSize","checksumPresent","moreToCome","exhaustAllowed","toBin","buffers","flags","header","alloc","push","totalLength","length","makeDocumentSegment","writeInt32LE","OP_MSG","writeUInt32LE","document","payloadTypeBuffer","documentBuffer","serializeBson","serialize","BinMsg","message","msgHeader","msgBody","opts","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","parsed","raw","data","responseTo","opCode","fromCompressed","responseFlags","readInt32LE","documents","isParsed","parse","index","documentsReturnedIn","_options","payloadType","readUInt8","bsonSize","readUInt32LE","bin","slice","deserialize","fieldsAsRaw","doc","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/connection/msg.js"],"sourcesContent":["'use strict';\n\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n\nconst Buffer = require('safe-buffer').Buffer;\nconst opcodes = require('../wireprotocol/shared').opcodes;\nconst databaseNamespace = require('../wireprotocol/shared').databaseNamespace;\nconst ReadPreference = require('../topologies/read_preference');\nconst MongoError = require('../../core/error').MongoError;\n\n// Incrementing request id\nlet _requestId = 0;\n\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n\nclass Msg {\n  constructor(bson, ns, command, options) {\n    // Basic options needed to be passed in\n    if (command == null) throw new Error('query must be specified for query');\n\n    // Basic options\n    this.bson = bson;\n    this.ns = ns;\n    this.command = command;\n    this.command.$db = databaseNamespace(ns);\n\n    if (options.readPreference && options.readPreference.mode !== ReadPreference.PRIMARY) {\n      this.command.$readPreference = options.readPreference.toJSON();\n    }\n\n    // Ensure empty options\n    this.options = options || {};\n\n    // Additional options\n    this.requestId = options.requestId ? options.requestId : Msg.getRequestId();\n\n    // Serialization option\n    this.serializeFunctions =\n      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined =\n      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n\n    // flags\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed =\n      typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n\n  toBin() {\n    const buffers = [];\n    let flags = 0;\n\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n\n    const header = Buffer.alloc(\n      4 * 4 + // Header\n        4 // Flags\n    );\n\n    buffers.push(header);\n\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n\n    header.writeInt32LE(totalLength, 0); // messageLength\n    header.writeInt32LE(this.requestId, 4); // requestID\n    header.writeInt32LE(0, 8); // responseTo\n    header.writeInt32LE(opcodes.OP_MSG, 12); // opCode\n    header.writeUInt32LE(flags, 16); // flags\n    return buffers;\n  }\n\n  makeDocumentSegment(buffers, document) {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n\n  serializeBson(document) {\n    return this.bson.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n}\n\nMsg.getRequestId = function() {\n  _requestId = (_requestId + 1) & 0x7fffffff;\n  return _requestId;\n};\n\nclass BinMsg {\n  constructor(bson, message, msgHeader, msgBody, opts) {\n    opts = opts || {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    };\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.bson = bson;\n    this.opts = opts;\n\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n\n    // Read response flags\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;\n    this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;\n    this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;\n    this.bsonRegExp = typeof opts.bsonRegExp === 'boolean' ? opts.bsonRegExp : false;\n\n    this.documents = [];\n  }\n\n  isParsed() {\n    return this.parsed;\n  }\n\n  parse(options) {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options || {};\n\n    this.index = 4;\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs =\n      typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;\n    const promoteValues =\n      typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;\n    const promoteBuffers =\n      typeof options.promoteBuffers === 'boolean'\n        ? options.promoteBuffers\n        : this.opts.promoteBuffers;\n    const bsonRegExp =\n      typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : this.opts.bsonRegExp;\n\n    // Set up the options\n    const _options = {\n      promoteLongs: promoteLongs,\n      promoteValues: promoteValues,\n      promoteBuffers: promoteBuffers,\n      bsonRegExp: bsonRegExp\n    };\n\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n      if (payloadType === 1) {\n        // It was decided that no driver makes use of payload type 1\n        throw new MongoError('OP_MSG Payload Type 1 detected unsupported protocol');\n      } else if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : this.bson.deserialize(bin, _options));\n\n        this.index += bsonSize;\n      }\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n\n      const doc = this.bson.deserialize(this.documents[0], _options);\n      this.documents = [doc];\n    }\n\n    this.parsed = true;\n  }\n}\n\nmodule.exports = { Msg, BinMsg };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}