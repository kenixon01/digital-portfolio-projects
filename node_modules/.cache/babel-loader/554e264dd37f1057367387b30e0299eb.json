{"ast":null,"code":"'use strict';\n\nconst Msg = require('./core/connection/msg').Msg;\nconst KillCursor = require('./core/connection/commands').KillCursor;\nconst GetMore = require('./core/connection/commands').GetMore;\nconst deepCopy = require('./utils').deepCopy;\n\n/** Commands that we want to redact because of the sensitive nature of their contents */\nconst SENSITIVE_COMMANDS = new Set(['authenticate', 'saslStart', 'saslContinue', 'getnonce', 'createUser', 'updateUser', 'copydbgetnonce', 'copydbsaslstart', 'copydb']);\nconst HELLO_COMMANDS = new Set(['hello', 'ismaster', 'isMaster']);\nconst LEGACY_FIND_QUERY_MAP = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldsSelector: 'projection'\n};\nconst OP_QUERY_KEYS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial', 'exhaust'];\nconst collectionName = command => command.ns.split('.')[1];\nconst shouldRedactCommand = (commandName, cmd) => SENSITIVE_COMMANDS.has(commandName) || HELLO_COMMANDS.has(commandName) && !!cmd.speculativeAuthenticate;\n\n/**\n * Extract the actual command from the query, possibly upconverting if it's a legacy\n * format\n *\n * @param {Object} command the command\n */\nconst extractCommand = command => {\n  let extractedCommand;\n  if (command instanceof GetMore) {\n    extractedCommand = {\n      getMore: deepCopy(command.cursorId),\n      collection: collectionName(command),\n      batchSize: command.numberToReturn\n    };\n  } else if (command instanceof KillCursor) {\n    extractedCommand = {\n      killCursors: collectionName(command),\n      cursors: deepCopy(command.cursorIds)\n    };\n  } else if (command instanceof Msg) {\n    extractedCommand = deepCopy(command.command);\n  } else if (command.query && command.query.$query) {\n    let result;\n    if (command.ns === 'admin.$cmd') {\n      // upconvert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // upconvert legacy find command\n      result = {\n        find: collectionName(command)\n      };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (typeof command.query[key] !== 'undefined') result[LEGACY_FIND_QUERY_MAP[key]] = deepCopy(command.query[key]);\n      });\n    }\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      if (typeof command[key] !== 'undefined') result[LEGACY_FIND_OPTIONS_MAP[key]] = deepCopy(command[key]);\n    });\n    OP_QUERY_KEYS.forEach(key => {\n      if (command[key]) result[key] = command[key];\n    });\n    if (typeof command.pre32Limit !== 'undefined') {\n      result.limit = command.pre32Limit;\n    }\n    if (command.query.$explain) {\n      extractedCommand = {\n        explain: result\n      };\n    } else {\n      extractedCommand = result;\n    }\n  } else {\n    extractedCommand = deepCopy(command.query || command);\n  }\n  const commandName = Object.keys(extractedCommand)[0];\n  return {\n    cmd: extractedCommand,\n    name: commandName,\n    shouldRedact: shouldRedactCommand(commandName, extractedCommand)\n  };\n};\nmodule.exports = {\n  extractCommand\n};","map":{"version":3,"names":["Msg","require","KillCursor","GetMore","deepCopy","SENSITIVE_COMMANDS","Set","HELLO_COMMANDS","LEGACY_FIND_QUERY_MAP","$query","$orderby","$hint","$comment","$maxScan","$max","$min","$returnKey","$showDiskLoc","$maxTimeMS","$snapshot","LEGACY_FIND_OPTIONS_MAP","numberToSkip","numberToReturn","returnFieldsSelector","OP_QUERY_KEYS","collectionName","command","ns","split","shouldRedactCommand","commandName","cmd","has","speculativeAuthenticate","extractCommand","extractedCommand","getMore","cursorId","collection","batchSize","killCursors","cursors","cursorIds","query","result","Object","assign","find","keys","forEach","key","pre32Limit","limit","$explain","explain","name","shouldRedact","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/command_utils.js"],"sourcesContent":["'use strict';\nconst Msg = require('./core/connection/msg').Msg;\nconst KillCursor = require('./core/connection/commands').KillCursor;\nconst GetMore = require('./core/connection/commands').GetMore;\nconst deepCopy = require('./utils').deepCopy;\n\n/** Commands that we want to redact because of the sensitive nature of their contents */\nconst SENSITIVE_COMMANDS = new Set([\n  'authenticate',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'createUser',\n  'updateUser',\n  'copydbgetnonce',\n  'copydbsaslstart',\n  'copydb'\n]);\n\nconst HELLO_COMMANDS = new Set(['hello', 'ismaster', 'isMaster']);\n\nconst LEGACY_FIND_QUERY_MAP = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\n\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldsSelector: 'projection'\n};\n\nconst OP_QUERY_KEYS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'partial',\n  'exhaust'\n];\n\nconst collectionName = command => command.ns.split('.')[1];\n\nconst shouldRedactCommand = (commandName, cmd) =>\n  SENSITIVE_COMMANDS.has(commandName) ||\n  (HELLO_COMMANDS.has(commandName) && !!cmd.speculativeAuthenticate);\n\n/**\n * Extract the actual command from the query, possibly upconverting if it's a legacy\n * format\n *\n * @param {Object} command the command\n */\nconst extractCommand = command => {\n  let extractedCommand;\n  if (command instanceof GetMore) {\n    extractedCommand = {\n      getMore: deepCopy(command.cursorId),\n      collection: collectionName(command),\n      batchSize: command.numberToReturn\n    };\n  } else if (command instanceof KillCursor) {\n    extractedCommand = {\n      killCursors: collectionName(command),\n      cursors: deepCopy(command.cursorIds)\n    };\n  } else if (command instanceof Msg) {\n    extractedCommand = deepCopy(command.command);\n  } else if (command.query && command.query.$query) {\n    let result;\n    if (command.ns === 'admin.$cmd') {\n      // upconvert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // upconvert legacy find command\n      result = { find: collectionName(command) };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (typeof command.query[key] !== 'undefined')\n          result[LEGACY_FIND_QUERY_MAP[key]] = deepCopy(command.query[key]);\n      });\n    }\n\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      if (typeof command[key] !== 'undefined')\n        result[LEGACY_FIND_OPTIONS_MAP[key]] = deepCopy(command[key]);\n    });\n\n    OP_QUERY_KEYS.forEach(key => {\n      if (command[key]) result[key] = command[key];\n    });\n\n    if (typeof command.pre32Limit !== 'undefined') {\n      result.limit = command.pre32Limit;\n    }\n\n    if (command.query.$explain) {\n      extractedCommand = { explain: result };\n    } else {\n      extractedCommand = result;\n    }\n  } else {\n    extractedCommand = deepCopy(command.query || command);\n  }\n\n  const commandName = Object.keys(extractedCommand)[0];\n  return {\n    cmd: extractedCommand,\n    name: commandName,\n    shouldRedact: shouldRedactCommand(commandName, extractedCommand)\n  };\n};\n\nmodule.exports = {\n  extractCommand\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}