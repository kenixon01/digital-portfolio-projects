{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.optionalRequireCwd = exports.optionalRequire = exports.makeOptionalRequire = exports.tryResolve = exports.tryRequire = exports.setDefaultLog = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar require_at_1 = __importDefault(require(\"require-at\"));\n/* eslint-disable max-params, complexity, no-eval */\n// `require` from this module's context\n// Using `eval` to avoid tripping bundlers like webpack\nvar xrequire = eval(\"require\");\n// Copied from https://github.com/yarnpkg/berry/blob/d5454007c9c76becfa97b36a92de299a3694afd5/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L27\n// Splits a require request into its components, or return null if the request is a file path\nvar pnpDependencyNameRegExp = /^(?![a-zA-Z]:[\\\\/]|\\\\\\\\|\\.{0,2}(?:\\/|$))((?:node:)?(?:@[^/]+\\/)?[^/]+)\\/*(.*|)$/;\n/**\n * Change a module name request into a Yarn Berry PnP dependency name,\n * since the dependency name is what will be included in the error message.\n * For example, `optionalRequire('my-package/package.json')` will print a message like\n * `Your application tried to access my-package,` without the `/package.json` at the end of it.\n * This function grabs the dependency name only, or returns `null` if it can't find it.\n * @param {string} name Requested name\n * @returns {string} Dependency name\n */\nfunction getPnpDependencyName(name) {\n  var dependencyNameMatch = name.match(pnpDependencyNameRegExp);\n  if (!dependencyNameMatch) return null;\n  return dependencyNameMatch[1];\n}\n/**\n * Check if an error from require is really due to the module not found,\n * and not because the module itself trying to require another module\n * that's not found.\n *\n * @param err - the error\n * @param name - name of the module being required\n * @returns true or false\n */\nfunction findModuleNotFound(err, name) {\n  // Check the first line of the error message\n  var msg = err.message.split(\"\\n\")[0];\n  /* istanbul ignore if */\n  if (!msg) {\n    return false;\n  }\n  // Check for \"Cannot find module 'foo'\"\n  if (msg.includes(\"'\" + name + \"'\")) {\n    return true;\n  }\n  var pnpDependencyName = getPnpDependencyName(name);\n  if (pnpDependencyName) {\n    return (\n      // Check for \"Your application tried to access foo (a peer dependency) ...\" (Yarn Berry PnP)\n      // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L680\n      msg.includes(\" \" + pnpDependencyName + \" \") ||\n      // Check for \"Your application tried to access foo. While ...\" (Yarn Berry PnP)\n      // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L704\n      msg.includes(\" \" + pnpDependencyName + \". \") ||\n      // Check for \"Your application tried to access foo, but ...\" (Yarn Berry PnP)\n      // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L718\n      msg.includes(\" \" + pnpDependencyName + \", \")\n    );\n  }\n  return false;\n}\n/**\n * Default log function\n *\n * @param message - message to log\n * @param path - path of the module to require\n */\nfunction defaultLog(message, path) {\n  console.log(\"Just FYI: \" + message + \"; Path \\\"\" + path + \"\\\"\");\n}\nvar __defaultLog = defaultLog;\nfunction setDefaultLog(log) {\n  __defaultLog = log;\n}\nexports.setDefaultLog = setDefaultLog;\nfunction _getOptions(optsOrMsg, requireFunction, log) {\n  if (requireFunction === void 0) {\n    requireFunction = xrequire;\n  }\n  if (typeof optsOrMsg === \"object\") {\n    var opts = __assign({\n      require: requireFunction,\n      log: log\n    }, optsOrMsg);\n    (0, assert_1.default)(!(opts.hasOwnProperty(\"notFound\") && opts.hasOwnProperty(\"default\")), \"optionalRequire: options set with both `notFound` and `default`\");\n    return opts;\n  } else {\n    return {\n      require: requireFunction,\n      log: log,\n      message: optsOrMsg\n    };\n  }\n}\n/**\n * Internal optional require implementation\n *\n * @param path - path to module to require\n * @param optsOrMsg - options or message to log in case module not found\n * @returns require or resolve result\n */\nfunction _optionalRequire(path, opts) {\n  try {\n    return opts.resolve ? opts.require.resolve(path) : opts.require(path);\n  } catch (e) {\n    // exception that's not due to the module itself not found\n    if (e.code !== \"MODULE_NOT_FOUND\" || !findModuleNotFound(e, path)) {\n      // if the module we are requiring fail because it try to require a\n      // module that's not found, then we have to report this as failed.\n      if (typeof opts.fail === \"function\") {\n        return opts.fail(e);\n      }\n      throw e;\n    }\n    if (opts.message) {\n      var message = opts.message === true ? \"\" : opts.message + \" - \";\n      var r = opts.resolve ? \"resolved\" : \"found\";\n      opts.log(message + \"optional module not \" + r, path);\n    }\n    if (typeof opts.notFound === \"function\") {\n      return opts.notFound(e);\n    }\n    return opts.default;\n  }\n}\n/**\n * try to require a module with optional handling in case it's not found or fail to require\n *\n * @param callerRequire - `require` from caller context\n * @param path - path to module to require\n * @param optsOrMsg - options or message to log in case of exceptions\n * @returns require result\n */\nfunction tryRequire(callerRequire, path, optsOrMsg) {\n  var opts = _getOptions(optsOrMsg, callerRequire, __defaultLog);\n  opts.resolve = false;\n  return _optionalRequire(path, opts);\n}\nexports.tryRequire = tryRequire;\n/**\n * try to resolve a module with optional handling in case it's not found or fail to require\n *\n * @param callerRequire - `require` from caller context\n * @param path - path to module to require\n * @param optsOrMsg - options or message to log in case of exceptions\n * @returns resolve result\n */\nfunction tryResolve(callerRequire, path, optsOrMsg) {\n  var opts = _getOptions(optsOrMsg, callerRequire, __defaultLog);\n  opts.resolve = true;\n  return _optionalRequire(path, opts);\n}\nexports.tryResolve = tryResolve;\n/**\n * Make an optional require function, using the `require` from caller's context.\n *\n * @param callerRequire - `require` from caller's context\n * @param log - function to log if module is not found\n * @returns required module\n */\nfunction makeOptionalRequire(callerRequire, log) {\n  var x = function (path, optsOrMsg) {\n    var opts = _getOptions(optsOrMsg, callerRequire, x.log);\n    return _optionalRequire(path, opts);\n  };\n  x.resolve = function (path, optsOrMsg) {\n    var opts = _getOptions(optsOrMsg, callerRequire, x.log);\n    opts.resolve = true;\n    return _optionalRequire(path, opts);\n  };\n  x.log = log || __defaultLog;\n  return x;\n}\nexports.makeOptionalRequire = makeOptionalRequire;\n/**\n * A default optionalRequire function using `require` from optional-require's context.\n *\n * @remarks because `require` is from optional-require's context, you won't be able to\n * do `optionalRequire(\"./my-module\")`.\n *\n * You can still override the `require` using `options.require` with the one from your\n * calling context.\n *\n */\nexports.optionalRequire = makeOptionalRequire(xrequire);\n/**\n * An optionalRequire function using `require` from CWD context\n *\n * @remarks because `require` is from CWD context, if you do `optionalRequireCwd(\"./my-module\")`\n * then it will look for `my-module` in CWD.\n *\n * @remarks You can still override the `require` using `options.require` with the one from your\n * calling context.\n */\nexports.optionalRequireCwd = makeOptionalRequire((0, require_at_1.default)(process.cwd()));","map":{"version":3,"mappings":"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","names":["xrequire","eval","pnpDependencyNameRegExp","getPnpDependencyName","name","dependencyNameMatch","match","findModuleNotFound","err","msg","message","split","includes","pnpDependencyName","defaultLog","path","console","log","__defaultLog","setDefaultLog","exports","_getOptions","optsOrMsg","requireFunction","opts","require","hasOwnProperty","_optionalRequire","resolve","e","code","fail","r","notFound","default","tryRequire","callerRequire","tryResolve","makeOptionalRequire","x","process","cwd"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}