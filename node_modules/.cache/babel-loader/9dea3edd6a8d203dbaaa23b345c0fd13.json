{"ast":null,"code":"// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Long\". This\n * implementation is derived from LongLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a Long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Long.\n * @param {number} high the high (signed) 32 bits of the Long.\n * @return {Long}\n */\nfunction Long(low, high) {\n  if (!(this instanceof Long)) return new Long(low, high);\n  this._bsontype = 'Long';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @method\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nLong.prototype.toInt = function () {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nLong.prototype.toNumber = function () {\n  return this.high_ * Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/** Converts the Long to a BigInt (arbitrary precision). */\nLong.prototype.toBigInt = function () {\n  return BigInt(this.toString());\n};\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nLong.prototype.toJSON = function () {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nLong.prototype.toString = function (opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n  if (this.isZero()) {\n    return '0';\n  }\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n  rem = this;\n  var result = '';\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nLong.prototype.getHighBits = function () {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nLong.prototype.getLowBits = function () {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nLong.prototype.getLowBitsUnsigned = function () {\n  return this.low_ >= 0 ? this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Long.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Long.\n */\nLong.prototype.getNumBitsAbs = function () {\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & 1 << bit) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nLong.prototype.isZero = function () {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nLong.prototype.isNegative = function () {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nLong.prototype.isOdd = function () {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Long equals the other\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long equals the other\n */\nLong.prototype.equals = function (other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Long does not equal the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long does not equal the other.\n */\nLong.prototype.notEquals = function (other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Long is less than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than the other.\n */\nLong.prototype.lessThan = function (other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Long is less than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than or equal to the other.\n */\nLong.prototype.lessThanOrEqual = function (other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Long is greater than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than the other.\n */\nLong.prototype.greaterThan = function (other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Long is greater than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than or equal to the other.\n */\nLong.prototype.greaterThanOrEqual = function (other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Long with the given one.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nLong.prototype.compare = function (other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Long} the negation of this value.\n */\nLong.prototype.negate = function () {\n  if (this.equals(Long.MIN_VALUE)) {\n    return Long.MIN_VALUE;\n  } else {\n    return this.not().add(Long.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Long.\n *\n * @method\n * @param {Long} other Long to add to this one.\n * @return {Long} the sum of this and the given Long.\n */\nLong.prototype.add = function (other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n\n/**\n * Returns the difference of this and the given Long.\n *\n * @method\n * @param {Long} other Long to subtract from this.\n * @return {Long} the difference of this and the given Long.\n */\nLong.prototype.subtract = function (other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Long.\n *\n * @method\n * @param {Long} other Long to multiply with this.\n * @return {Long} the product of this and the other.\n */\nLong.prototype.multiply = function (other) {\n  if (this.isZero()) {\n    return Long.ZERO;\n  } else if (other.isZero()) {\n    return Long.ZERO;\n  }\n  if (this.equals(Long.MIN_VALUE)) {\n    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  }\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Longs are small, use float multiplication\n  if (this.lessThan(Long.TWO_PWR_24_) && other.lessThan(Long.TWO_PWR_24_)) {\n    return Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n\n/**\n * Returns this Long divided by the given one.\n *\n * @method\n * @param {Long} other Long by which to divide.\n * @return {Long} this Long divided by the given one.\n */\nLong.prototype.div = function (other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Long.ZERO;\n  }\n  if (this.equals(Long.MIN_VALUE)) {\n    if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n      return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Long.ZERO)) {\n        return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return Long.ZERO;\n  }\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Long.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Long.ONE;\n    }\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long modulo the given one.\n *\n * @method\n * @param {Long} other Long by which to mod.\n * @return {Long} this Long modulo the given one.\n */\nLong.prototype.modulo = function (other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Long} the bitwise-NOT of this value.\n */\nLong.prototype.not = function () {\n  return Long.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to AND.\n * @return {Long} the bitwise-AND of this and the other.\n */\nLong.prototype.and = function (other) {\n  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to OR.\n * @return {Long} the bitwise-OR of this and the other.\n */\nLong.prototype.or = function (other) {\n  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to XOR.\n * @return {Long} the bitwise-XOR of this and the other.\n */\nLong.prototype.xor = function (other) {\n  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the left by the given amount.\n */\nLong.prototype.shiftLeft = function (numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);\n    } else {\n      return Long.fromBits(0, low << numBits - 32);\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount.\n */\nLong.prototype.shiftRight = function (numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);\n    } else {\n      return Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nLong.prototype.shiftRightUnsigned = function (numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);\n    } else if (numBits === 32) {\n      return Long.fromBits(high, 0);\n    } else {\n      return Long.fromBits(high >>> numBits - 32, 0);\n    }\n  }\n};\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromInt = function (value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Long.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n  var obj = new Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Long.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromNumber = function (value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Long.ZERO;\n  } else if (value <= -Long.TWO_PWR_63_DBL_) {\n    return Long.MIN_VALUE;\n  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {\n    return Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Long.fromNumber(-value).negate();\n  } else {\n    return new Long(value % Long.TWO_PWR_32_DBL_ | 0, value / Long.TWO_PWR_32_DBL_ | 0);\n  }\n};\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @param {bigint} value - The number in question\n * @returns {Long} The corresponding Long value\n */\nLong.fromBigInt = function (value) {\n  return Long.fromString(value.toString(10), 10);\n};\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Long} the corresponding Long value.\n */\nLong.fromBits = function (lowBits, highBits) {\n  return new Long(lowBits, highBits);\n};\n\n/**\n * Returns a Long representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Long.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Long} the corresponding Long value.\n */\nLong.fromString = function (str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n  if (str.charAt(0) === '-') {\n    return Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n  var result = Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {Object}\n * @ignore\n */\nLong.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Long} */\nLong.ZERO = Long.fromInt(0);\n\n/** @type {Long} */\nLong.ONE = Long.fromInt(1);\n\n/** @type {Long} */\nLong.NEG_ONE = Long.fromInt(-1);\n\n/** @type {Long} */\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Long} */\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Long}\n * @ignore\n */\nLong.TWO_PWR_24_ = Long.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Long;\nmodule.exports.Long = Long;","map":{"version":3,"names":["Long","low","high","_bsontype","low_","high_","prototype","toInt","toNumber","TWO_PWR_32_DBL_","getLowBitsUnsigned","toBigInt","BigInt","toString","toJSON","opt_radix","radix","Error","isZero","isNegative","equals","MIN_VALUE","radixLong","fromNumber","div","rem","multiply","subtract","negate","radixToPower","Math","pow","result","remDiv","intval","digits","length","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","other","notEquals","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","add","ONE","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","fromBits","ZERO","TWO_PWR_24_","NEG_ONE","halfThis","shiftRight","approx","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","fromInt","value","cachedObj","INT_CACHE_","obj","isNaN","isFinite","TWO_PWR_63_DBL_","MAX_VALUE","fromBigInt","fromString","lowBits","highBits","str","charAt","substring","indexOf","i","size","min","parseInt","power","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/bson/lib/bson/long.js"],"sourcesContent":["// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Long\". This\n * implementation is derived from LongLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a Long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Long.\n * @param {number} high the high (signed) 32 bits of the Long.\n * @return {Long}\n */\nfunction Long(low, high) {\n  if (!(this instanceof Long)) return new Long(low, high);\n\n  this._bsontype = 'Long';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @method\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nLong.prototype.toInt = function() {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nLong.prototype.toNumber = function() {\n  return this.high_ * Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/** Converts the Long to a BigInt (arbitrary precision). */\nLong.prototype.toBigInt = function () {\n  return BigInt(this.toString());\n}\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nLong.prototype.toJSON = function() {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nLong.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nLong.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nLong.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nLong.prototype.getLowBitsUnsigned = function() {\n  return this.low_ >= 0 ? this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Long.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Long.\n */\nLong.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nLong.prototype.isZero = function() {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nLong.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nLong.prototype.isOdd = function() {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Long equals the other\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long equals the other\n */\nLong.prototype.equals = function(other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Long does not equal the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long does not equal the other.\n */\nLong.prototype.notEquals = function(other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Long is less than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than the other.\n */\nLong.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Long is less than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than or equal to the other.\n */\nLong.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Long is greater than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than the other.\n */\nLong.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Long is greater than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than or equal to the other.\n */\nLong.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Long with the given one.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nLong.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Long} the negation of this value.\n */\nLong.prototype.negate = function() {\n  if (this.equals(Long.MIN_VALUE)) {\n    return Long.MIN_VALUE;\n  } else {\n    return this.not().add(Long.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Long.\n *\n * @method\n * @param {Long} other Long to add to this one.\n * @return {Long} the sum of this and the given Long.\n */\nLong.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns the difference of this and the given Long.\n *\n * @method\n * @param {Long} other Long to subtract from this.\n * @return {Long} the difference of this and the given Long.\n */\nLong.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Long.\n *\n * @method\n * @param {Long} other Long to multiply with this.\n * @return {Long} the product of this and the other.\n */\nLong.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Long.ZERO;\n  } else if (other.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate()\n        .multiply(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Longs are small, use float multiplication\n  if (this.lessThan(Long.TWO_PWR_24_) && other.lessThan(Long.TWO_PWR_24_)) {\n    return Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns this Long divided by the given one.\n *\n * @method\n * @param {Long} other Long by which to divide.\n * @return {Long} this Long divided by the given one.\n */\nLong.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n      return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Long.ZERO)) {\n        return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate()\n        .div(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Long.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long modulo the given one.\n *\n * @method\n * @param {Long} other Long by which to mod.\n * @return {Long} this Long modulo the given one.\n */\nLong.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Long} the bitwise-NOT of this value.\n */\nLong.prototype.not = function() {\n  return Long.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to AND.\n * @return {Long} the bitwise-AND of this and the other.\n */\nLong.prototype.and = function(other) {\n  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to OR.\n * @return {Long} the bitwise-OR of this and the other.\n */\nLong.prototype.or = function(other) {\n  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to XOR.\n * @return {Long} the bitwise-XOR of this and the other.\n */\nLong.prototype.xor = function(other) {\n  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the left by the given amount.\n */\nLong.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Long.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount.\n */\nLong.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return Long.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nLong.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits === 32) {\n      return Long.fromBits(high, 0);\n    } else {\n      return Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Long.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Long.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Long.ZERO;\n  } else if (value <= -Long.TWO_PWR_63_DBL_) {\n    return Long.MIN_VALUE;\n  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {\n    return Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Long.fromNumber(-value).negate();\n  } else {\n    return new Long((value % Long.TWO_PWR_32_DBL_) | 0, (value / Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @param {bigint} value - The number in question\n * @returns {Long} The corresponding Long value\n */\nLong.fromBigInt =  function(value) {\n  return Long.fromString(value.toString(10), 10);\n}\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Long} the corresponding Long value.\n */\nLong.fromBits = function(lowBits, highBits) {\n  return new Long(lowBits, highBits);\n};\n\n/**\n * Returns a Long representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Long.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Long} the corresponding Long value.\n */\nLong.fromString = function(str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {Object}\n * @ignore\n */\nLong.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Long} */\nLong.ZERO = Long.fromInt(0);\n\n/** @type {Long} */\nLong.ONE = Long.fromInt(1);\n\n/** @type {Long} */\nLong.NEG_ONE = Long.fromInt(-1);\n\n/** @type {Long} */\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Long} */\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Long}\n * @ignore\n */\nLong.TWO_PWR_24_ = Long.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Long;\nmodule.exports.Long = Long;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}