{"ast":null,"code":"// Custom inspect property name / symbol.\nvar inspect = 'inspect';\nvar utils = require('./parser/utils');\n\n/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n * @ignore\n */\nvar MACHINE_ID = parseInt(Math.random() * 0xffffff, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Check if buffer exists\ntry {\n  if (Buffer && Buffer.from) {\n    var hasBufferType = true;\n    inspect = require('util').inspect.custom || 'inspect';\n  }\n} catch (err) {\n  hasBufferType = false;\n}\n\n/**\n* Create a new ObjectID instance\n*\n* @class\n* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n* @property {number} generationTime The generation time of this ObjectId instance\n* @return {ObjectID} instance of ObjectID.\n*/\nvar ObjectID = function ObjectID(id) {\n  // Duck-typing to support ObjectId from different npm packages\n  if (id instanceof ObjectID) return id;\n  if (!(this instanceof ObjectID)) return new ObjectID(id);\n  this._bsontype = 'ObjectID';\n\n  // The most common usecase (blank id, new objectId instance)\n  if (id == null || typeof id === 'number') {\n    // Generate a new id\n    this.id = this.generate(id);\n    // If we are caching the hex string\n    if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n    // Return the object\n    return;\n  }\n\n  // Check if the passed in id is valid\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if (!valid && id != null) {\n    throw new Error('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');\n  } else if (valid && typeof id === 'string' && id.length === 24 && hasBufferType) {\n    return new ObjectID(utils.toBuffer(id, 'hex'));\n  } else if (valid && typeof id === 'string' && id.length === 24) {\n    return ObjectID.createFromHexString(id);\n  } else if (id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if (id != null && typeof id.toHexString === 'function') {\n    // Duck-typing to support ObjectId from different npm packages\n    return id;\n  } else {\n    throw new Error('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');\n  }\n  if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n};\n\n// Allow usage of ObjectId as well as ObjectID\n// var ObjectId = ObjectID;\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n/**\n* Return the ObjectID id as a 24 byte hex string representation\n*\n* @method\n* @return {string} return the 24 byte hex string representation.\n*/\nObjectID.prototype.toHexString = function () {\n  if (ObjectID.cacheHexString && this.__id) return this.__id;\n  var hexString = '';\n  if (!this.id || !this.id.length) {\n    throw new Error('invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' + JSON.stringify(this.id) + ']');\n  }\n  if (this.id instanceof _Buffer) {\n    hexString = convertToHex(this.id);\n    if (ObjectID.cacheHexString) this.__id = hexString;\n    return hexString;\n  }\n  for (var i = 0; i < this.id.length; i++) {\n    hexString += hexTable[this.id.charCodeAt(i)];\n  }\n  if (ObjectID.cacheHexString) this.__id = hexString;\n  return hexString;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.get_inc = function () {\n  return ObjectID.index = (ObjectID.index + 1) % 0xffffff;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.getInc = function () {\n  return this.get_inc();\n};\n\n/**\n* Generate a 12 byte id buffer used in ObjectID's\n*\n* @method\n* @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n* @return {Buffer} return the 12 byte id buffer string.\n*/\nObjectID.prototype.generate = function (time) {\n  if ('number' !== typeof time) {\n    time = ~~(Date.now() / 1000);\n  }\n\n  // Use pid\n  var pid = (typeof process === 'undefined' || process.pid === 1 ? Math.floor(Math.random() * 100000) : process.pid) % 0xffff;\n  var inc = this.get_inc();\n  // Buffer used\n  var buffer = utils.allocBuffer(12);\n  // Encode time\n  buffer[3] = time & 0xff;\n  buffer[2] = time >> 8 & 0xff;\n  buffer[1] = time >> 16 & 0xff;\n  buffer[0] = time >> 24 & 0xff;\n  // Encode machine\n  buffer[6] = MACHINE_ID & 0xff;\n  buffer[5] = MACHINE_ID >> 8 & 0xff;\n  buffer[4] = MACHINE_ID >> 16 & 0xff;\n  // Encode pid\n  buffer[8] = pid & 0xff;\n  buffer[7] = pid >> 8 & 0xff;\n  // Encode index\n  buffer[11] = inc & 0xff;\n  buffer[10] = inc >> 8 & 0xff;\n  buffer[9] = inc >> 16 & 0xff;\n  // Return the buffer\n  return buffer;\n};\n\n/**\n* Converts the id into a 24 byte hex string for printing\n*\n* @param {String} format The Buffer toString format parameter.\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toString = function (format) {\n  // Is the id a buffer then use the buffer toString method to return the format\n  if (this.id && this.id.copy) {\n    return this.id.toString(typeof format === 'string' ? format : 'hex');\n  }\n\n  // if(this.buffer )\n  return this.toHexString();\n};\n\n/**\n* Converts to a string representation of this Id.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype[inspect] = ObjectID.prototype.toString;\n\n/**\n* Converts to its JSON representation.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toJSON = function () {\n  return this.toHexString();\n};\n\n/**\n* Compares the equality of this ObjectID with `otherID`.\n*\n* @method\n* @param {object} otherID ObjectID instance to compare against.\n* @return {boolean} the result of comparing two ObjectID's\n*/\nObjectID.prototype.equals = function equals(otherId) {\n  // var id;\n\n  if (otherId instanceof ObjectID) {\n    return this.toString() === otherId.toString();\n  } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12 && this.id instanceof _Buffer) {\n    return otherId === this.id.toString('binary');\n  } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 24) {\n    return otherId.toLowerCase() === this.toHexString();\n  } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12) {\n    return otherId === this.id;\n  } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n    return otherId.toHexString() === this.toHexString();\n  } else {\n    return false;\n  }\n};\n\n/**\n* Returns the generation date (accurate up to the second) that this ID was generated.\n*\n* @method\n* @return {date} the generation date\n*/\nObjectID.prototype.getTimestamp = function () {\n  var timestamp = new Date();\n  var time = this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;\n  timestamp.setTime(Math.floor(time) * 1000);\n  return timestamp;\n};\n\n/**\n* @ignore\n*/\nObjectID.index = ~~(Math.random() * 0xffffff);\n\n/**\n* @ignore\n*/\nObjectID.createPk = function createPk() {\n  return new ObjectID();\n};\n\n/**\n* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n*\n* @method\n* @param {number} time an integer number representing a number of seconds.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromTime = function createFromTime(time) {\n  var buffer = utils.toBuffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  // Encode time into first 4 bytes\n  buffer[3] = time & 0xff;\n  buffer[2] = time >> 8 & 0xff;\n  buffer[1] = time >> 16 & 0xff;\n  buffer[0] = time >> 24 & 0xff;\n  // Return the new objectId\n  return new ObjectID(buffer);\n};\n\n// Lookup tables\n//var encodeLookup = '0123456789abcdef'.split('');\nvar decodeLookup = [];\ni = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\nvar _Buffer = Buffer;\nvar convertToHex = function (bytes) {\n  return bytes.toString('hex');\n};\n\n/**\n* Creates an ObjectID from a hex string representation of an ObjectID.\n*\n* @method\n* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromHexString = function createFromHexString(string) {\n  // Throw an error if it's not a valid setup\n  if (typeof string === 'undefined' || string != null && string.length !== 24) {\n    throw new Error('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');\n  }\n\n  // Use Buffer.from method if available\n  if (hasBufferType) return new ObjectID(utils.toBuffer(string, 'hex'));\n\n  // Calculate lengths\n  var array = new _Buffer(12);\n  var n = 0;\n  var i = 0;\n  while (i < 24) {\n    array[n++] = decodeLookup[string.charCodeAt(i++)] << 4 | decodeLookup[string.charCodeAt(i++)];\n  }\n  return new ObjectID(array);\n};\n\n/**\n* Checks if a value is a valid bson ObjectId\n*\n* @method\n* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n*/\nObjectID.isValid = function isValid(id) {\n  if (id == null) return false;\n  if (typeof id === 'number') {\n    return true;\n  }\n  if (typeof id === 'string') {\n    return id.length === 12 || id.length === 24 && checkForHexRegExp.test(id);\n  }\n  if (id instanceof ObjectID) {\n    return true;\n  }\n  if (id instanceof _Buffer) {\n    return true;\n  }\n\n  // Duck-Typing detection of ObjectId like objects\n  if (typeof id.toHexString === 'function' && (id.id instanceof _Buffer || typeof id.id === 'string')) {\n    return id.id.length === 12 || id.id.length === 24 && checkForHexRegExp.test(id.id);\n  }\n  return false;\n};\n\n/**\n* @ignore\n*/\nObject.defineProperty(ObjectID.prototype, 'generationTime', {\n  enumerable: true,\n  get: function () {\n    return this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;\n  },\n  set: function (value) {\n    // Encode time into first 4 bytes\n    this.id[3] = value & 0xff;\n    this.id[2] = value >> 8 & 0xff;\n    this.id[1] = value >> 16 & 0xff;\n    this.id[0] = value >> 24 & 0xff;\n  }\n});\n\n/**\n * Expose.\n */\nmodule.exports = ObjectID;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.ObjectId = ObjectID;","map":{"version":3,"names":["inspect","utils","require","MACHINE_ID","parseInt","Math","random","checkForHexRegExp","RegExp","Buffer","from","hasBufferType","custom","err","ObjectID","id","_bsontype","generate","cacheHexString","__id","toString","valid","isValid","Error","length","toBuffer","createFromHexString","toHexString","hexTable","i","prototype","hexString","JSON","stringify","_Buffer","convertToHex","charCodeAt","get_inc","index","getInc","time","Date","now","pid","process","floor","inc","buffer","allocBuffer","format","copy","toJSON","equals","otherId","toLowerCase","getTimestamp","timestamp","setTime","createPk","createFromTime","decodeLookup","bytes","string","array","n","test","Object","defineProperty","enumerable","get","set","value","module","exports","ObjectId"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/bson/lib/bson/objectid.js"],"sourcesContent":["// Custom inspect property name / symbol.\nvar inspect = 'inspect';\n\nvar utils = require('./parser/utils');\n\n/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n * @ignore\n */\nvar MACHINE_ID = parseInt(Math.random() * 0xffffff, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Check if buffer exists\ntry {\n  if (Buffer && Buffer.from) {\n    var hasBufferType = true;\n    inspect = require('util').inspect.custom || 'inspect';\n  }\n} catch (err) {\n  hasBufferType = false;\n}\n\n/**\n* Create a new ObjectID instance\n*\n* @class\n* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n* @property {number} generationTime The generation time of this ObjectId instance\n* @return {ObjectID} instance of ObjectID.\n*/\nvar ObjectID = function ObjectID(id) {\n  // Duck-typing to support ObjectId from different npm packages\n  if (id instanceof ObjectID) return id;\n  if (!(this instanceof ObjectID)) return new ObjectID(id);\n\n  this._bsontype = 'ObjectID';\n\n  // The most common usecase (blank id, new objectId instance)\n  if (id == null || typeof id === 'number') {\n    // Generate a new id\n    this.id = this.generate(id);\n    // If we are caching the hex string\n    if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n    // Return the object\n    return;\n  }\n\n  // Check if the passed in id is valid\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if (!valid && id != null) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  } else if (valid && typeof id === 'string' && id.length === 24 && hasBufferType) {\n    return new ObjectID(utils.toBuffer(id, 'hex'));\n  } else if (valid && typeof id === 'string' && id.length === 24) {\n    return ObjectID.createFromHexString(id);\n  } else if (id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if (id != null && typeof id.toHexString === 'function') {\n    // Duck-typing to support ObjectId from different npm packages\n    return id;\n  } else {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n};\n\n// Allow usage of ObjectId as well as ObjectID\n// var ObjectId = ObjectID;\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n/**\n* Return the ObjectID id as a 24 byte hex string representation\n*\n* @method\n* @return {string} return the 24 byte hex string representation.\n*/\nObjectID.prototype.toHexString = function() {\n  if (ObjectID.cacheHexString && this.__id) return this.__id;\n\n  var hexString = '';\n  if (!this.id || !this.id.length) {\n    throw new Error(\n      'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +\n        JSON.stringify(this.id) +\n        ']'\n    );\n  }\n\n  if (this.id instanceof _Buffer) {\n    hexString = convertToHex(this.id);\n    if (ObjectID.cacheHexString) this.__id = hexString;\n    return hexString;\n  }\n\n  for (var i = 0; i < this.id.length; i++) {\n    hexString += hexTable[this.id.charCodeAt(i)];\n  }\n\n  if (ObjectID.cacheHexString) this.__id = hexString;\n  return hexString;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.get_inc = function() {\n  return (ObjectID.index = (ObjectID.index + 1) % 0xffffff);\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.getInc = function() {\n  return this.get_inc();\n};\n\n/**\n* Generate a 12 byte id buffer used in ObjectID's\n*\n* @method\n* @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n* @return {Buffer} return the 12 byte id buffer string.\n*/\nObjectID.prototype.generate = function(time) {\n  if ('number' !== typeof time) {\n    time = ~~(Date.now() / 1000);\n  }\n\n  // Use pid\n  var pid =\n    (typeof process === 'undefined' || process.pid === 1\n      ? Math.floor(Math.random() * 100000)\n      : process.pid) % 0xffff;\n  var inc = this.get_inc();\n  // Buffer used\n  var buffer = utils.allocBuffer(12);\n  // Encode time\n  buffer[3] = time & 0xff;\n  buffer[2] = (time >> 8) & 0xff;\n  buffer[1] = (time >> 16) & 0xff;\n  buffer[0] = (time >> 24) & 0xff;\n  // Encode machine\n  buffer[6] = MACHINE_ID & 0xff;\n  buffer[5] = (MACHINE_ID >> 8) & 0xff;\n  buffer[4] = (MACHINE_ID >> 16) & 0xff;\n  // Encode pid\n  buffer[8] = pid & 0xff;\n  buffer[7] = (pid >> 8) & 0xff;\n  // Encode index\n  buffer[11] = inc & 0xff;\n  buffer[10] = (inc >> 8) & 0xff;\n  buffer[9] = (inc >> 16) & 0xff;\n  // Return the buffer\n  return buffer;\n};\n\n/**\n* Converts the id into a 24 byte hex string for printing\n*\n* @param {String} format The Buffer toString format parameter.\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toString = function(format) {\n  // Is the id a buffer then use the buffer toString method to return the format\n  if (this.id && this.id.copy) {\n    return this.id.toString(typeof format === 'string' ? format : 'hex');\n  }\n\n  // if(this.buffer )\n  return this.toHexString();\n};\n\n/**\n* Converts to a string representation of this Id.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype[inspect] = ObjectID.prototype.toString;\n\n/**\n* Converts to its JSON representation.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toJSON = function() {\n  return this.toHexString();\n};\n\n/**\n* Compares the equality of this ObjectID with `otherID`.\n*\n* @method\n* @param {object} otherID ObjectID instance to compare against.\n* @return {boolean} the result of comparing two ObjectID's\n*/\nObjectID.prototype.equals = function equals(otherId) {\n  // var id;\n\n  if (otherId instanceof ObjectID) {\n    return this.toString() === otherId.toString();\n  } else if (\n    typeof otherId === 'string' &&\n    ObjectID.isValid(otherId) &&\n    otherId.length === 12 &&\n    this.id instanceof _Buffer\n  ) {\n    return otherId === this.id.toString('binary');\n  } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 24) {\n    return otherId.toLowerCase() === this.toHexString();\n  } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12) {\n    return otherId === this.id;\n  } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n    return otherId.toHexString() === this.toHexString();\n  } else {\n    return false;\n  }\n};\n\n/**\n* Returns the generation date (accurate up to the second) that this ID was generated.\n*\n* @method\n* @return {date} the generation date\n*/\nObjectID.prototype.getTimestamp = function() {\n  var timestamp = new Date();\n  var time = this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n  timestamp.setTime(Math.floor(time) * 1000);\n  return timestamp;\n};\n\n/**\n* @ignore\n*/\nObjectID.index = ~~(Math.random() * 0xffffff);\n\n/**\n* @ignore\n*/\nObjectID.createPk = function createPk() {\n  return new ObjectID();\n};\n\n/**\n* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n*\n* @method\n* @param {number} time an integer number representing a number of seconds.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromTime = function createFromTime(time) {\n  var buffer = utils.toBuffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  // Encode time into first 4 bytes\n  buffer[3] = time & 0xff;\n  buffer[2] = (time >> 8) & 0xff;\n  buffer[1] = (time >> 16) & 0xff;\n  buffer[0] = (time >> 24) & 0xff;\n  // Return the new objectId\n  return new ObjectID(buffer);\n};\n\n// Lookup tables\n//var encodeLookup = '0123456789abcdef'.split('');\nvar decodeLookup = [];\ni = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\n\nvar _Buffer = Buffer;\nvar convertToHex = function(bytes) {\n  return bytes.toString('hex');\n};\n\n/**\n* Creates an ObjectID from a hex string representation of an ObjectID.\n*\n* @method\n* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromHexString = function createFromHexString(string) {\n  // Throw an error if it's not a valid setup\n  if (typeof string === 'undefined' || (string != null && string.length !== 24)) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  // Use Buffer.from method if available\n  if (hasBufferType) return new ObjectID(utils.toBuffer(string, 'hex'));\n\n  // Calculate lengths\n  var array = new _Buffer(12);\n  var n = 0;\n  var i = 0;\n\n  while (i < 24) {\n    array[n++] = (decodeLookup[string.charCodeAt(i++)] << 4) | decodeLookup[string.charCodeAt(i++)];\n  }\n\n  return new ObjectID(array);\n};\n\n/**\n* Checks if a value is a valid bson ObjectId\n*\n* @method\n* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n*/\nObjectID.isValid = function isValid(id) {\n  if (id == null) return false;\n\n  if (typeof id === 'number') {\n    return true;\n  }\n\n  if (typeof id === 'string') {\n    return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));\n  }\n\n  if (id instanceof ObjectID) {\n    return true;\n  }\n\n  if (id instanceof _Buffer) {\n    return true;\n  }\n\n  // Duck-Typing detection of ObjectId like objects\n  if (\n      typeof id.toHexString === 'function' &&\n      (id.id instanceof _Buffer || typeof id.id === 'string')\n  ) {\n    return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));\n  }\n\n  return false;\n};\n\n/**\n* @ignore\n*/\nObject.defineProperty(ObjectID.prototype, 'generationTime', {\n  enumerable: true,\n  get: function() {\n    return this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n  },\n  set: function(value) {\n    // Encode time into first 4 bytes\n    this.id[3] = value & 0xff;\n    this.id[2] = (value >> 8) & 0xff;\n    this.id[1] = (value >> 16) & 0xff;\n    this.id[0] = (value >> 24) & 0xff;\n  }\n});\n\n/**\n * Expose.\n */\nmodule.exports = ObjectID;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.ObjectId = ObjectID;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}