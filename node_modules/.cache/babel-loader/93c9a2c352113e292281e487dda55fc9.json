{"ast":null,"code":"// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * This type is for INTERNAL use in MongoDB only and should not be used in applications.\n * The appropriate corresponding type is the JavaScript Date type.\n * \n * Defines a Timestamp class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Timestamp\". This\n * implementation is derived from TimestampLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Timestamps.\n *\n * The internal representation of a Timestamp is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Timestamp.\n * @param {number} high the high (signed) 32 bits of the Timestamp.\n */\nfunction Timestamp(low, high) {\n  if (!(this instanceof Timestamp)) return new Timestamp(low, high);\n  this._bsontype = 'Timestamp';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nTimestamp.prototype.toInt = function () {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nTimestamp.prototype.toNumber = function () {\n  return this.high_ * Timestamp.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nTimestamp.prototype.toJSON = function () {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nTimestamp.prototype.toString = function (opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n  if (this.isZero()) {\n    return '0';\n  }\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      // We need to change the Timestamp value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixTimestamp = Timestamp.fromNumber(radix);\n      var div = this.div(radixTimestamp);\n      var rem = div.multiply(radixTimestamp).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 6));\n  rem = this;\n  var result = '';\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nTimestamp.prototype.getHighBits = function () {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nTimestamp.prototype.getLowBits = function () {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nTimestamp.prototype.getLowBitsUnsigned = function () {\n  return this.low_ >= 0 ? this.low_ : Timestamp.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Timestamp.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Timestamp.\n */\nTimestamp.prototype.getNumBitsAbs = function () {\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & 1 << bit) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nTimestamp.prototype.isZero = function () {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nTimestamp.prototype.isNegative = function () {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nTimestamp.prototype.isOdd = function () {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Timestamp equals the other\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp equals the other\n */\nTimestamp.prototype.equals = function (other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Timestamp does not equal the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp does not equal the other.\n */\nTimestamp.prototype.notEquals = function (other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Timestamp is less than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than the other.\n */\nTimestamp.prototype.lessThan = function (other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Timestamp is less than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than or equal to the other.\n */\nTimestamp.prototype.lessThanOrEqual = function (other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Timestamp is greater than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than the other.\n */\nTimestamp.prototype.greaterThan = function (other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Timestamp is greater than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than or equal to the other.\n */\nTimestamp.prototype.greaterThanOrEqual = function (other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Timestamp with the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nTimestamp.prototype.compare = function (other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Timestamp} the negation of this value.\n */\nTimestamp.prototype.negate = function () {\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.MIN_VALUE;\n  } else {\n    return this.not().add(Timestamp.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to add to this one.\n * @return {Timestamp} the sum of this and the given Timestamp.\n */\nTimestamp.prototype.add = function (other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n\n/**\n * Returns the difference of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to subtract from this.\n * @return {Timestamp} the difference of this and the given Timestamp.\n */\nTimestamp.prototype.subtract = function (other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to multiply with this.\n * @return {Timestamp} the product of this and the other.\n */\nTimestamp.prototype.multiply = function (other) {\n  if (this.isZero()) {\n    return Timestamp.ZERO;\n  } else if (other.isZero()) {\n    return Timestamp.ZERO;\n  }\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return other.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return this.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  }\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Timestamps are small, use float multiplication\n  if (this.lessThan(Timestamp.TWO_PWR_24_) && other.lessThan(Timestamp.TWO_PWR_24_)) {\n    return Timestamp.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n};\n\n/**\n * Returns this Timestamp divided by the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to divide.\n * @return {Timestamp} this Timestamp divided by the given one.\n */\nTimestamp.prototype.div = function (other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Timestamp.ZERO;\n  }\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    if (other.equals(Timestamp.ONE) || other.equals(Timestamp.NEG_ONE)) {\n      return Timestamp.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Timestamp.MIN_VALUE)) {\n      return Timestamp.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Timestamp.ZERO)) {\n        return other.isNegative() ? Timestamp.ONE : Timestamp.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.ZERO;\n  }\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Timestamp.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Timestamp.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Timestamp.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Timestamp.ONE;\n    }\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Timestamp modulo the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to mod.\n * @return {Timestamp} this Timestamp modulo the given one.\n */\nTimestamp.prototype.modulo = function (other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Timestamp} the bitwise-NOT of this value.\n */\nTimestamp.prototype.not = function () {\n  return Timestamp.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to AND.\n * @return {Timestamp} the bitwise-AND of this and the other.\n */\nTimestamp.prototype.and = function (other) {\n  return Timestamp.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to OR.\n * @return {Timestamp} the bitwise-OR of this and the other.\n */\nTimestamp.prototype.or = function (other) {\n  return Timestamp.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to XOR.\n * @return {Timestamp} the bitwise-XOR of this and the other.\n */\nTimestamp.prototype.xor = function (other) {\n  return Timestamp.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Timestamp with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the left by the given amount.\n */\nTimestamp.prototype.shiftLeft = function (numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Timestamp.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);\n    } else {\n      return Timestamp.fromBits(0, low << numBits - 32);\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount.\n */\nTimestamp.prototype.shiftRight = function (numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);\n    } else {\n      return Timestamp.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nTimestamp.prototype.shiftRightUnsigned = function (numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);\n    } else if (numBits === 32) {\n      return Timestamp.fromBits(high, 0);\n    } else {\n      return Timestamp.fromBits(high >>> numBits - 32, 0);\n    }\n  }\n};\n\n/**\n * Returns a Timestamp representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromInt = function (value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Timestamp.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n  var obj = new Timestamp(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Timestamp.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromNumber = function (value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Timestamp.ZERO;\n  } else if (value <= -Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MIN_VALUE;\n  } else if (value + 1 >= Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MAX_VALUE;\n  } else if (value < 0) {\n    return Timestamp.fromNumber(-value).negate();\n  } else {\n    return new Timestamp(value % Timestamp.TWO_PWR_32_DBL_ | 0, value / Timestamp.TWO_PWR_32_DBL_ | 0);\n  }\n};\n\n/**\n * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromBits = function (lowBits, highBits) {\n  return new Timestamp(lowBits, highBits);\n};\n\n/**\n * Returns a Timestamp representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Timestamp.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromString = function (str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n  if (str.charAt(0) === '-') {\n    return Timestamp.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 8));\n  var result = Timestamp.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Timestamp.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Timestamp.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Timestamp.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Timestamp representations of small integer values.\n * @type {Object}\n * @ignore\n */\nTimestamp.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_32_DBL_ = Timestamp.TWO_PWR_16_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_31_DBL_ = Timestamp.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_48_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_64_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_63_DBL_ = Timestamp.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Timestamp} */\nTimestamp.ZERO = Timestamp.fromInt(0);\n\n/** @type {Timestamp} */\nTimestamp.ONE = Timestamp.fromInt(1);\n\n/** @type {Timestamp} */\nTimestamp.NEG_ONE = Timestamp.fromInt(-1);\n\n/** @type {Timestamp} */\nTimestamp.MAX_VALUE = Timestamp.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Timestamp} */\nTimestamp.MIN_VALUE = Timestamp.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Timestamp}\n * @ignore\n */\nTimestamp.TWO_PWR_24_ = Timestamp.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Timestamp;\nmodule.exports.Timestamp = Timestamp;","map":{"version":3,"names":["Timestamp","low","high","_bsontype","low_","high_","prototype","toInt","toNumber","TWO_PWR_32_DBL_","getLowBitsUnsigned","toJSON","toString","opt_radix","radix","Error","isZero","isNegative","equals","MIN_VALUE","radixTimestamp","fromNumber","div","rem","multiply","subtract","negate","radixToPower","Math","pow","result","remDiv","intval","digits","length","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","other","notEquals","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","add","ONE","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","fromBits","ZERO","TWO_PWR_24_","NEG_ONE","halfThis","shiftRight","approx","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","fromInt","value","cachedObj","INT_CACHE_","obj","isNaN","isFinite","TWO_PWR_63_DBL_","MAX_VALUE","lowBits","highBits","fromString","str","charAt","substring","indexOf","i","size","min","parseInt","power","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/bson/lib/bson/timestamp.js"],"sourcesContent":["// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * This type is for INTERNAL use in MongoDB only and should not be used in applications.\n * The appropriate corresponding type is the JavaScript Date type.\n * \n * Defines a Timestamp class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Timestamp\". This\n * implementation is derived from TimestampLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Timestamps.\n *\n * The internal representation of a Timestamp is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Timestamp.\n * @param {number} high the high (signed) 32 bits of the Timestamp.\n */\nfunction Timestamp(low, high) {\n  if (!(this instanceof Timestamp)) return new Timestamp(low, high);\n  this._bsontype = 'Timestamp';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nTimestamp.prototype.toInt = function() {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nTimestamp.prototype.toNumber = function() {\n  return this.high_ * Timestamp.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nTimestamp.prototype.toJSON = function() {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nTimestamp.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      // We need to change the Timestamp value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixTimestamp = Timestamp.fromNumber(radix);\n      var div = this.div(radixTimestamp);\n      var rem = div.multiply(radixTimestamp).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 6));\n\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nTimestamp.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nTimestamp.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nTimestamp.prototype.getLowBitsUnsigned = function() {\n  return this.low_ >= 0 ? this.low_ : Timestamp.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Timestamp.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Timestamp.\n */\nTimestamp.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nTimestamp.prototype.isZero = function() {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nTimestamp.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nTimestamp.prototype.isOdd = function() {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Timestamp equals the other\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp equals the other\n */\nTimestamp.prototype.equals = function(other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Timestamp does not equal the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp does not equal the other.\n */\nTimestamp.prototype.notEquals = function(other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Timestamp is less than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than the other.\n */\nTimestamp.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Timestamp is less than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than or equal to the other.\n */\nTimestamp.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Timestamp is greater than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than the other.\n */\nTimestamp.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Timestamp is greater than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than or equal to the other.\n */\nTimestamp.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Timestamp with the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nTimestamp.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Timestamp} the negation of this value.\n */\nTimestamp.prototype.negate = function() {\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.MIN_VALUE;\n  } else {\n    return this.not().add(Timestamp.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to add to this one.\n * @return {Timestamp} the sum of this and the given Timestamp.\n */\nTimestamp.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns the difference of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to subtract from this.\n * @return {Timestamp} the difference of this and the given Timestamp.\n */\nTimestamp.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to multiply with this.\n * @return {Timestamp} the product of this and the other.\n */\nTimestamp.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Timestamp.ZERO;\n  } else if (other.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return other.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return this.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate()\n        .multiply(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Timestamps are small, use float multiplication\n  if (this.lessThan(Timestamp.TWO_PWR_24_) && other.lessThan(Timestamp.TWO_PWR_24_)) {\n    return Timestamp.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns this Timestamp divided by the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to divide.\n * @return {Timestamp} this Timestamp divided by the given one.\n */\nTimestamp.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    if (other.equals(Timestamp.ONE) || other.equals(Timestamp.NEG_ONE)) {\n      return Timestamp.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Timestamp.MIN_VALUE)) {\n      return Timestamp.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Timestamp.ZERO)) {\n        return other.isNegative() ? Timestamp.ONE : Timestamp.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate()\n        .div(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Timestamp.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Timestamp.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Timestamp.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Timestamp.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Timestamp modulo the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to mod.\n * @return {Timestamp} this Timestamp modulo the given one.\n */\nTimestamp.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Timestamp} the bitwise-NOT of this value.\n */\nTimestamp.prototype.not = function() {\n  return Timestamp.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to AND.\n * @return {Timestamp} the bitwise-AND of this and the other.\n */\nTimestamp.prototype.and = function(other) {\n  return Timestamp.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to OR.\n * @return {Timestamp} the bitwise-OR of this and the other.\n */\nTimestamp.prototype.or = function(other) {\n  return Timestamp.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to XOR.\n * @return {Timestamp} the bitwise-XOR of this and the other.\n */\nTimestamp.prototype.xor = function(other) {\n  return Timestamp.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Timestamp with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the left by the given amount.\n */\nTimestamp.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Timestamp.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Timestamp.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount.\n */\nTimestamp.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return Timestamp.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nTimestamp.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits === 32) {\n      return Timestamp.fromBits(high, 0);\n    } else {\n      return Timestamp.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n/**\n * Returns a Timestamp representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Timestamp.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Timestamp(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Timestamp.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Timestamp.ZERO;\n  } else if (value <= -Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MIN_VALUE;\n  } else if (value + 1 >= Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MAX_VALUE;\n  } else if (value < 0) {\n    return Timestamp.fromNumber(-value).negate();\n  } else {\n    return new Timestamp(\n      (value % Timestamp.TWO_PWR_32_DBL_) | 0,\n      (value / Timestamp.TWO_PWR_32_DBL_) | 0\n    );\n  }\n};\n\n/**\n * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromBits = function(lowBits, highBits) {\n  return new Timestamp(lowBits, highBits);\n};\n\n/**\n * Returns a Timestamp representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Timestamp.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromString = function(str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Timestamp.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 8));\n\n  var result = Timestamp.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Timestamp.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Timestamp.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Timestamp.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Timestamp representations of small integer values.\n * @type {Object}\n * @ignore\n */\nTimestamp.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_32_DBL_ = Timestamp.TWO_PWR_16_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_31_DBL_ = Timestamp.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_48_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_64_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_63_DBL_ = Timestamp.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Timestamp} */\nTimestamp.ZERO = Timestamp.fromInt(0);\n\n/** @type {Timestamp} */\nTimestamp.ONE = Timestamp.fromInt(1);\n\n/** @type {Timestamp} */\nTimestamp.NEG_ONE = Timestamp.fromInt(-1);\n\n/** @type {Timestamp} */\nTimestamp.MAX_VALUE = Timestamp.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Timestamp} */\nTimestamp.MIN_VALUE = Timestamp.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Timestamp}\n * @ignore\n */\nTimestamp.TWO_PWR_24_ = Timestamp.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Timestamp;\nmodule.exports.Timestamp = Timestamp;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}