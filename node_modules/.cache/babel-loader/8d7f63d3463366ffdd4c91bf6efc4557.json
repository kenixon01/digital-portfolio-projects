{"ast":null,"code":"'use strict';\n\nconst kErrorLabels = Symbol('errorLabels');\n\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n          this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        for (var name in message) {\n          if (name === 'errorLabels' || name === 'errmsg') {\n            continue;\n          }\n          this[name] = message[name];\n        }\n      }\n      Error.captureStackTrace(this, this.constructor);\n    }\n    this.name = 'MongoError';\n  }\n\n  /**\n   * Legacy name for server error responses\n   */\n  get errmsg() {\n    return this.message;\n  }\n\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n  static create(options) {\n    return new MongoError(options);\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   * @param {string} label The error label to check for\n   * @returns {boolean} returns true if the error has the provided error label\n   */\n  hasErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n    return this[kErrorLabels].has(label);\n  }\n  addErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n    this[kErrorLabels].add(label);\n  }\n  get errorLabels() {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n}\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\n\n/**\n * An error indicating an issue with the network, including TCP\n * errors and timeouts.\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @extends MongoError\n */\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n    this.name = 'MongoNetworkError';\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n}\n\n/**\n * An error indicating a network timeout occurred\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {object} [options.beforeHandshake] Indicates the timeout happened before a connection handshake completed\n * @extends MongoError\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n    this.name = 'MongoNetworkTimeoutError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @extends MongoError\n */\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n}\n\n/**\n * An error signifying a client-side timeout event\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoTimeoutError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n    this.name = 'MongoTimeoutError';\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoServerSelectionError extends MongoTimeoutError {\n  constructor(message, reason) {\n    super(message, reason);\n    this.name = 'MongoServerSelectionError';\n  }\n}\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n * @extends MongoError\n */\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n    if (result && Array.isArray(result.errorLabels)) {\n      this[kErrorLabels] = new Set(result.errorLabels);\n    }\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n}\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set([6,\n// HostUnreachable\n7,\n// HostNotFound\n89,\n// NetworkTimeout\n91,\n// ShutdownInProgress\n189,\n// PrimarySteppedDown\n9001,\n// SocketException\n10107,\n// NotMaster\n11600,\n// InterruptedAtShutdown\n11602,\n// InterruptedDueToReplStateChange\n13435,\n// NotMasterNoSlaveOk\n13436 // NotMasterOrSecondary\n]);\n\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([11600,\n// InterruptedAtShutdown\n11602,\n// InterruptedDueToReplStateChange\n10107,\n// NotMaster\n13435,\n// NotMasterNoSlaveOk\n13436,\n// NotMasterOrSecondary\n189,\n// PrimarySteppedDown\n91,\n// ShutdownInProgress\n7,\n// HostNotFound\n6,\n// HostUnreachable\n89,\n// NetworkTimeout\n9001,\n// SocketException\n262 // ExceededTimeLimit\n]);\n\nfunction isRetryableWriteError(error) {\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.code) || RETRYABLE_WRITE_ERROR_CODES.has(error.result.code);\n  }\n  return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @ignore\n * @param {MongoError|Error} error\n */\nfunction isRetryableError(error) {\n  return RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || error.message.match(/not master/) || error.message.match(/node is recovering/);\n}\nconst SDAM_RECOVERING_CODES = new Set([91,\n// ShutdownInProgress\n189,\n// PrimarySteppedDown\n11600,\n// InterruptedAtShutdown\n11602,\n// InterruptedDueToReplStateChange\n13436 // NotMasterOrSecondary\n]);\n\nconst SDAM_NOTMASTER_CODES = new Set([10107,\n// NotMaster\n13435 // NotMasterNoSlaveOk\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([11600,\n// InterruptedAtShutdown\n91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n  if (isRecoveringError(err)) {\n    return false;\n  }\n  return err.message.match(/not master/);\n}\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @ignore\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n * @param {MongoError|Error} error\n */\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    return true;\n  }\n  return false;\n}\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoServerSelectionError,\n  MongoWriteConcernError,\n  isRetryableError,\n  isSDAMUnrecoverableError,\n  isNodeShuttingDownError,\n  isRetryableWriteError,\n  isNetworkErrorBeforeHandshake\n};","map":{"version":3,"names":["kErrorLabels","Symbol","MongoError","Error","constructor","message","stack","errmsg","$err","errorLabels","Set","name","captureStackTrace","create","options","hasErrorLabel","label","has","addErrorLabel","add","Array","from","kBeforeHandshake","isNetworkErrorBeforeHandshake","err","MongoNetworkError","beforeHandshake","MongoNetworkTimeoutError","MongoParseError","MongoTimeoutError","reason","error","MongoServerSelectionError","makeWriteConcernResultObject","input","output","Object","assign","ok","code","codeName","MongoWriteConcernError","result","isArray","RETRYABLE_ERROR_CODES","RETRYABLE_WRITE_ERROR_CODES","isRetryableWriteError","isRetryableError","match","SDAM_RECOVERING_CODES","SDAM_NOTMASTER_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","isNotMasterError","isNodeShuttingDownError","isSDAMUnrecoverableError","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/error.js"],"sourcesContent":["'use strict';\n\nconst kErrorLabels = Symbol('errorLabels');\n\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n          this[kErrorLabels] = new Set(message.errorLabels);\n        }\n\n        for (var name in message) {\n          if (name === 'errorLabels' || name === 'errmsg') {\n            continue;\n          }\n\n          this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'MongoError';\n  }\n\n  /**\n   * Legacy name for server error responses\n   */\n  get errmsg() {\n    return this.message;\n  }\n\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n  static create(options) {\n    return new MongoError(options);\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   * @param {string} label The error label to check for\n   * @returns {boolean} returns true if the error has the provided error label\n   */\n  hasErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels() {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n}\n\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\n\n/**\n * An error indicating an issue with the network, including TCP\n * errors and timeouts.\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @extends MongoError\n */\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n    this.name = 'MongoNetworkError';\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n}\n\n/**\n * An error indicating a network timeout occurred\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {object} [options.beforeHandshake] Indicates the timeout happened before a connection handshake completed\n * @extends MongoError\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n    this.name = 'MongoNetworkTimeoutError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @extends MongoError\n */\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n}\n\n/**\n * An error signifying a client-side timeout event\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoTimeoutError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    this.name = 'MongoTimeoutError';\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoServerSelectionError extends MongoTimeoutError {\n  constructor(message, reason) {\n    super(message, reason);\n    this.name = 'MongoServerSelectionError';\n  }\n}\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n * @extends MongoError\n */\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n\n    if (result && Array.isArray(result.errorLabels)) {\n      this[kErrorLabels] = new Set(result.errorLabels);\n    }\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n}\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set([\n  6, // HostUnreachable\n  7, // HostNotFound\n  89, // NetworkTimeout\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  9001, // SocketException\n  10107, // NotMaster\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13435, // NotMasterNoSlaveOk\n  13436 // NotMasterOrSecondary\n]);\n\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  10107, // NotMaster\n  13435, // NotMasterNoSlaveOk\n  13436, // NotMasterOrSecondary\n  189, // PrimarySteppedDown\n  91, // ShutdownInProgress\n  7, // HostNotFound\n  6, // HostUnreachable\n  89, // NetworkTimeout\n  9001, // SocketException\n  262 // ExceededTimeLimit\n]);\n\nfunction isRetryableWriteError(error) {\n  if (error instanceof MongoWriteConcernError) {\n    return (\n      RETRYABLE_WRITE_ERROR_CODES.has(error.code) ||\n      RETRYABLE_WRITE_ERROR_CODES.has(error.result.code)\n    );\n  }\n\n  return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @ignore\n * @param {MongoError|Error} error\n */\nfunction isRetryableError(error) {\n  return (\n    RETRYABLE_ERROR_CODES.has(error.code) ||\n    error instanceof MongoNetworkError ||\n    error.message.match(/not master/) ||\n    error.message.match(/node is recovering/)\n  );\n}\n\nconst SDAM_RECOVERING_CODES = new Set([\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13436 // NotMasterOrSecondary\n]);\n\nconst SDAM_NOTMASTER_CODES = new Set([\n  10107, // NotMaster\n  13435 // NotMasterNoSlaveOk\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n  11600, // InterruptedAtShutdown\n  91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\n\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return err.message.match(/not master/);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @ignore\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n * @param {MongoError|Error} error\n */\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoServerSelectionError,\n  MongoWriteConcernError,\n  isRetryableError,\n  isSDAMUnrecoverableError,\n  isNodeShuttingDownError,\n  isRetryableWriteError,\n  isNetworkErrorBeforeHandshake\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,MAAM,CAAC,aAAa,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASC,KAAK,CAAC;EAC7BC,WAAW,CAACC,OAAO,EAAE;IACnB,IAAIA,OAAO,YAAYF,KAAK,EAAE;MAC5B,KAAK,CAACE,OAAO,CAACA,OAAO,CAAC;MACtB,IAAI,CAACC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC5B,CAAC,MAAM;MACL,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;QAC/B,KAAK,CAACA,OAAO,CAAC;MAChB,CAAC,MAAM;QACL,KAAK,CAACA,OAAO,CAACA,OAAO,IAAIA,OAAO,CAACE,MAAM,IAAIF,OAAO,CAACG,IAAI,IAAI,KAAK,CAAC;QACjE,IAAIH,OAAO,CAACI,WAAW,EAAE;UACvB,IAAI,CAACT,YAAY,CAAC,GAAG,IAAIU,GAAG,CAACL,OAAO,CAACI,WAAW,CAAC;QACnD;QAEA,KAAK,IAAIE,IAAI,IAAIN,OAAO,EAAE;UACxB,IAAIM,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,QAAQ,EAAE;YAC/C;UACF;UAEA,IAAI,CAACA,IAAI,CAAC,GAAGN,OAAO,CAACM,IAAI,CAAC;QAC5B;MACF;MAEAR,KAAK,CAACS,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACR,WAAW,CAAC;IACjD;IAEA,IAAI,CAACO,IAAI,GAAG,YAAY;EAC1B;;EAEA;AACF;AACA;EACE,IAAIJ,MAAM,GAAG;IACX,OAAO,IAAI,CAACF,OAAO;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOQ,MAAM,CAACC,OAAO,EAAE;IACrB,OAAO,IAAIZ,UAAU,CAACY,OAAO,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;EACEC,aAAa,CAACC,KAAK,EAAE;IACnB,IAAI,IAAI,CAAChB,YAAY,CAAC,IAAI,IAAI,EAAE;MAC9B,OAAO,KAAK;IACd;IAEA,OAAO,IAAI,CAACA,YAAY,CAAC,CAACiB,GAAG,CAACD,KAAK,CAAC;EACtC;EAEAE,aAAa,CAACF,KAAK,EAAE;IACnB,IAAI,IAAI,CAAChB,YAAY,CAAC,IAAI,IAAI,EAAE;MAC9B,IAAI,CAACA,YAAY,CAAC,GAAG,IAAIU,GAAG,EAAE;IAChC;IAEA,IAAI,CAACV,YAAY,CAAC,CAACmB,GAAG,CAACH,KAAK,CAAC;EAC/B;EAEA,IAAIP,WAAW,GAAG;IAChB,OAAO,IAAI,CAACT,YAAY,CAAC,GAAGoB,KAAK,CAACC,IAAI,CAAC,IAAI,CAACrB,YAAY,CAAC,CAAC,GAAG,EAAE;EACjE;AACF;AAEA,MAAMsB,gBAAgB,GAAGrB,MAAM,CAAC,iBAAiB,CAAC;AAClD,SAASsB,6BAA6B,CAACC,GAAG,EAAE;EAC1C,OAAOA,GAAG,CAACF,gBAAgB,CAAC,KAAK,IAAI;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,iBAAiB,SAASvB,UAAU,CAAC;EACzCE,WAAW,CAACC,OAAO,EAAES,OAAO,EAAE;IAC5B,KAAK,CAACT,OAAO,CAAC;IACd,IAAI,CAACM,IAAI,GAAG,mBAAmB;IAE/B,IAAIG,OAAO,IAAI,OAAOA,OAAO,CAACY,eAAe,KAAK,SAAS,EAAE;MAC3D,IAAI,CAACJ,gBAAgB,CAAC,GAAGR,OAAO,CAACY,eAAe;IAClD;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,SAASF,iBAAiB,CAAC;EACvDrB,WAAW,CAACC,OAAO,EAAES,OAAO,EAAE;IAC5B,KAAK,CAACT,OAAO,EAAES,OAAO,CAAC;IACvB,IAAI,CAACH,IAAI,GAAG,0BAA0B;EACxC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiB,eAAe,SAAS1B,UAAU,CAAC;EACvCE,WAAW,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACM,IAAI,GAAG,iBAAiB;EAC/B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkB,iBAAiB,SAAS3B,UAAU,CAAC;EACzCE,WAAW,CAACC,OAAO,EAAEyB,MAAM,EAAE;IAC3B,IAAIA,MAAM,IAAIA,MAAM,CAACC,KAAK,EAAE;MAC1B,KAAK,CAACD,MAAM,CAACC,KAAK,CAAC1B,OAAO,IAAIyB,MAAM,CAACC,KAAK,CAAC;IAC7C,CAAC,MAAM;MACL,KAAK,CAAC1B,OAAO,CAAC;IAChB;IAEA,IAAI,CAACM,IAAI,GAAG,mBAAmB;IAC/B,IAAImB,MAAM,EAAE;MACV,IAAI,CAACA,MAAM,GAAGA,MAAM;IACtB;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,yBAAyB,SAASH,iBAAiB,CAAC;EACxDzB,WAAW,CAACC,OAAO,EAAEyB,MAAM,EAAE;IAC3B,KAAK,CAACzB,OAAO,EAAEyB,MAAM,CAAC;IACtB,IAAI,CAACnB,IAAI,GAAG,2BAA2B;EACzC;AACF;AAEA,SAASsB,4BAA4B,CAACC,KAAK,EAAE;EAC3C,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,KAAK,CAAC;EAEvC,IAAIC,MAAM,CAACG,EAAE,KAAK,CAAC,EAAE;IACnBH,MAAM,CAACG,EAAE,GAAG,CAAC;IACb,OAAOH,MAAM,CAAC5B,MAAM;IACpB,OAAO4B,MAAM,CAACI,IAAI;IAClB,OAAOJ,MAAM,CAACK,QAAQ;EACxB;EAEA,OAAOL,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,sBAAsB,SAASvC,UAAU,CAAC;EAC9CE,WAAW,CAACC,OAAO,EAAEqC,MAAM,EAAE;IAC3B,KAAK,CAACrC,OAAO,CAAC;IACd,IAAI,CAACM,IAAI,GAAG,wBAAwB;IAEpC,IAAI+B,MAAM,IAAItB,KAAK,CAACuB,OAAO,CAACD,MAAM,CAACjC,WAAW,CAAC,EAAE;MAC/C,IAAI,CAACT,YAAY,CAAC,GAAG,IAAIU,GAAG,CAACgC,MAAM,CAACjC,WAAW,CAAC;IAClD;IAEA,IAAIiC,MAAM,IAAI,IAAI,EAAE;MAClB,IAAI,CAACA,MAAM,GAAGT,4BAA4B,CAACS,MAAM,CAAC;IACpD;EACF;AACF;;AAEA;AACA,MAAME,qBAAqB,GAAG,IAAIlC,GAAG,CAAC,CACpC,CAAC;AAAE;AACH,CAAC;AAAE;AACH,EAAE;AAAE;AACJ,EAAE;AAAE;AACJ,GAAG;AAAE;AACL,IAAI;AAAE;AACN,KAAK;AAAE;AACP,KAAK;AAAE;AACP,KAAK;AAAE;AACP,KAAK;AAAE;AACP,KAAK,CAAC;AAAA,CACP,CAAC;;AAEF,MAAMmC,2BAA2B,GAAG,IAAInC,GAAG,CAAC,CAC1C,KAAK;AAAE;AACP,KAAK;AAAE;AACP,KAAK;AAAE;AACP,KAAK;AAAE;AACP,KAAK;AAAE;AACP,GAAG;AAAE;AACL,EAAE;AAAE;AACJ,CAAC;AAAE;AACH,CAAC;AAAE;AACH,EAAE;AAAE;AACJ,IAAI;AAAE;AACN,GAAG,CAAC;AAAA,CACL,CAAC;;AAEF,SAASoC,qBAAqB,CAACf,KAAK,EAAE;EACpC,IAAIA,KAAK,YAAYU,sBAAsB,EAAE;IAC3C,OACEI,2BAA2B,CAAC5B,GAAG,CAACc,KAAK,CAACQ,IAAI,CAAC,IAC3CM,2BAA2B,CAAC5B,GAAG,CAACc,KAAK,CAACW,MAAM,CAACH,IAAI,CAAC;EAEtD;EAEA,OAAOM,2BAA2B,CAAC5B,GAAG,CAACc,KAAK,CAACQ,IAAI,CAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,gBAAgB,CAAChB,KAAK,EAAE;EAC/B,OACEa,qBAAqB,CAAC3B,GAAG,CAACc,KAAK,CAACQ,IAAI,CAAC,IACrCR,KAAK,YAAYN,iBAAiB,IAClCM,KAAK,CAAC1B,OAAO,CAAC2C,KAAK,CAAC,YAAY,CAAC,IACjCjB,KAAK,CAAC1B,OAAO,CAAC2C,KAAK,CAAC,oBAAoB,CAAC;AAE7C;AAEA,MAAMC,qBAAqB,GAAG,IAAIvC,GAAG,CAAC,CACpC,EAAE;AAAE;AACJ,GAAG;AAAE;AACL,KAAK;AAAE;AACP,KAAK;AAAE;AACP,KAAK,CAAC;AAAA,CACP,CAAC;;AAEF,MAAMwC,oBAAoB,GAAG,IAAIxC,GAAG,CAAC,CACnC,KAAK;AAAE;AACP,KAAK,CAAC;AAAA,CACP,CAAC;;AAEF,MAAMyC,mCAAmC,GAAG,IAAIzC,GAAG,CAAC,CAClD,KAAK;AAAE;AACP,EAAE,CAAC;AAAA,CACJ,CAAC;;AAEF,SAAS0C,iBAAiB,CAAC5B,GAAG,EAAE;EAC9B,IAAIA,GAAG,CAACe,IAAI,IAAIU,qBAAqB,CAAChC,GAAG,CAACO,GAAG,CAACe,IAAI,CAAC,EAAE;IACnD,OAAO,IAAI;EACb;EAEA,OAAOf,GAAG,CAACnB,OAAO,CAAC2C,KAAK,CAAC,yBAAyB,CAAC,IAAIxB,GAAG,CAACnB,OAAO,CAAC2C,KAAK,CAAC,oBAAoB,CAAC;AAChG;AAEA,SAASK,gBAAgB,CAAC7B,GAAG,EAAE;EAC7B,IAAIA,GAAG,CAACe,IAAI,IAAIW,oBAAoB,CAACjC,GAAG,CAACO,GAAG,CAACe,IAAI,CAAC,EAAE;IAClD,OAAO,IAAI;EACb;EAEA,IAAIa,iBAAiB,CAAC5B,GAAG,CAAC,EAAE;IAC1B,OAAO,KAAK;EACd;EAEA,OAAOA,GAAG,CAACnB,OAAO,CAAC2C,KAAK,CAAC,YAAY,CAAC;AACxC;AAEA,SAASM,uBAAuB,CAAC9B,GAAG,EAAE;EACpC,OAAOA,GAAG,CAACe,IAAI,IAAIY,mCAAmC,CAAClC,GAAG,CAACO,GAAG,CAACe,IAAI,CAAC;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgB,wBAAwB,CAACxB,KAAK,EAAE;EACvC;EACA;EACA,IAAIA,KAAK,YAAYH,eAAe,IAAIG,KAAK,IAAI,IAAI,EAAE;IACrD,OAAO,IAAI;EACb;EAEA,IAAIqB,iBAAiB,CAACrB,KAAK,CAAC,IAAIsB,gBAAgB,CAACtB,KAAK,CAAC,EAAE;IACvD,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd;AAEAyB,MAAM,CAACC,OAAO,GAAG;EACfvD,UAAU;EACVuB,iBAAiB;EACjBE,wBAAwB;EACxBC,eAAe;EACfC,iBAAiB;EACjBG,yBAAyB;EACzBS,sBAAsB;EACtBM,gBAAgB;EAChBQ,wBAAwB;EACxBD,uBAAuB;EACvBR,qBAAqB;EACrBvB;AACF,CAAC"},"metadata":{},"sourceType":"script"}