{"ast":null,"code":"'use strict';\n\nconst emitWarningOnce = require('../../utils').emitWarningOnce;\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @class\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @param {array} tags The tags object\n * @param {object} [options] Additional read preference options\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\n * @param {object} [options.hedge] Server mode in which the same query is dispatched in parallel to multiple replica set members.\n * @param {boolean} [options.hedge.enabled] Explicitly enable or disable hedged reads.\n * @see https://docs.mongodb.com/manual/core/read-preference/\n * @return {ReadPreference}\n */\nconst ReadPreference = function (mode, tags, options) {\n  if (!ReadPreference.isValid(mode)) {\n    throw new TypeError(`Invalid read preference mode ${mode}`);\n  }\n\n  // TODO(major): tags MUST be an array of tagsets\n  if (tags && !Array.isArray(tags)) {\n    emitWarningOnce('ReadPreference tags must be an array, this will change in the next major version');\n    const tagsHasMaxStalenessSeconds = typeof tags.maxStalenessSeconds !== 'undefined';\n    const tagsHasHedge = typeof tags.hedge !== 'undefined';\n    const tagsHasOptions = tagsHasMaxStalenessSeconds || tagsHasHedge;\n    if (tagsHasOptions) {\n      // this is likely an options object\n      options = tags;\n      tags = undefined;\n    } else {\n      tags = [tags];\n    }\n  }\n  this.mode = mode;\n  this.tags = tags;\n  this.hedge = options && options.hedge;\n  options = options || {};\n  if (options.maxStalenessSeconds != null) {\n    if (options.maxStalenessSeconds <= 0) {\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\n    }\n    this.maxStalenessSeconds = options.maxStalenessSeconds;\n\n    // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n    //       topology has a lower value then a MongoError will be thrown during server selection.\n    this.minWireVersion = 5;\n  }\n  if (this.mode === ReadPreference.PRIMARY) {\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n      throw new TypeError('Primary read preference cannot be combined with tags');\n    }\n    if (this.maxStalenessSeconds) {\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\n    }\n    if (this.hedge) {\n      throw new TypeError('Primary read preference cannot be combined with hedge');\n    }\n  }\n};\n\n// Support the deprecated `preference` property introduced in the porcelain layer\nObject.defineProperty(ReadPreference.prototype, 'preference', {\n  enumerable: true,\n  get: function () {\n    return this.mode;\n  }\n});\n\n/*\n * Read preference mode constants\n */\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\nconst VALID_MODES = [ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null];\n\n/**\n * Construct a ReadPreference given an options object.\n *\n * @param {object} options The options object from which to extract the read preference.\n * @return {ReadPreference}\n */\nReadPreference.fromOptions = function (options) {\n  if (!options) return null;\n  const readPreference = options.readPreference;\n  if (!readPreference) return null;\n  const readPreferenceTags = options.readPreferenceTags;\n  const maxStalenessSeconds = options.maxStalenessSeconds;\n  if (typeof readPreference === 'string') {\n    return new ReadPreference(readPreference, readPreferenceTags);\n  } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n    const mode = readPreference.mode || readPreference.preference;\n    if (mode && typeof mode === 'string') {\n      return new ReadPreference(mode, readPreference.tags, {\n        maxStalenessSeconds: readPreference.maxStalenessSeconds || maxStalenessSeconds,\n        hedge: readPreference.hedge\n      });\n    }\n  }\n  return readPreference;\n};\n\n/**\n * Resolves a read preference based on well-defined inheritance rules. This method will not only\n * determine the read preference (if there is one), but will also ensure the returned value is a\n * properly constructed instance of `ReadPreference`.\n *\n * @param {Collection|Db|MongoClient} parent The parent of the operation on which to determine the read\n * preference, used for determining the inherited read preference.\n * @param {object} options The options passed into the method, potentially containing a read preference\n * @returns {(ReadPreference|null)} The resolved read preference\n */\nReadPreference.resolve = function (parent, options) {\n  options = options || {};\n  const session = options.session;\n  const inheritedReadPreference = parent && parent.readPreference;\n  let readPreference;\n  if (options.readPreference) {\n    readPreference = ReadPreference.fromOptions(options);\n  } else if (session && session.inTransaction() && session.transaction.options.readPreference) {\n    // The transactionâ€™s read preference MUST override all other user configurable read preferences.\n    readPreference = session.transaction.options.readPreference;\n  } else if (inheritedReadPreference != null) {\n    readPreference = inheritedReadPreference;\n  } else {\n    readPreference = ReadPreference.primary;\n  }\n  return typeof readPreference === 'string' ? new ReadPreference(readPreference) : readPreference;\n};\n\n/**\n * Replaces options.readPreference with a ReadPreference instance\n */\nReadPreference.translate = function (options) {\n  if (options.readPreference == null) return options;\n  const r = options.readPreference;\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n  return options;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\nReadPreference.isValid = function (mode) {\n  return VALID_MODES.indexOf(mode) !== -1;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\nReadPreference.prototype.isValid = function (mode) {\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n};\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n\n/**\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n * @method\n * @return {boolean}\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n */\nReadPreference.prototype.slaveOk = function () {\n  return needSlaveOk.indexOf(this.mode) !== -1;\n};\n\n/**\n * Are the two read preference equal\n * @method\n * @param {ReadPreference} readPreference The read preference with which to check equality\n * @return {boolean} True if the two ReadPreferences are equivalent\n */\nReadPreference.prototype.equals = function (readPreference) {\n  return readPreference.mode === this.mode;\n};\n\n/**\n * Return JSON representation\n * @method\n * @return {Object} A JSON representation of the ReadPreference\n */\nReadPreference.prototype.toJSON = function () {\n  const readPreference = {\n    mode: this.mode\n  };\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  if (this.hedge) readPreference.hedge = this.hedge;\n  return readPreference;\n};\n\n/**\n * Primary read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.primary = new ReadPreference('primary');\n/**\n * Primary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\n * Secondary read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.secondary = new ReadPreference('secondary');\n/**\n * Secondary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\n * Nearest read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.nearest = new ReadPreference('nearest');\nmodule.exports = ReadPreference;","map":{"version":3,"names":["emitWarningOnce","require","ReadPreference","mode","tags","options","isValid","TypeError","Array","isArray","tagsHasMaxStalenessSeconds","maxStalenessSeconds","tagsHasHedge","hedge","tagsHasOptions","undefined","minWireVersion","PRIMARY","length","Object","defineProperty","prototype","enumerable","get","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","VALID_MODES","fromOptions","readPreference","readPreferenceTags","preference","resolve","parent","session","inheritedReadPreference","inTransaction","transaction","primary","translate","r","indexOf","needSlaveOk","slaveOk","equals","toJSON","primaryPreferred","secondary","secondaryPreferred","nearest","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/topologies/read_preference.js"],"sourcesContent":["'use strict';\nconst emitWarningOnce = require('../../utils').emitWarningOnce;\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @class\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @param {array} tags The tags object\n * @param {object} [options] Additional read preference options\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\n * @param {object} [options.hedge] Server mode in which the same query is dispatched in parallel to multiple replica set members.\n * @param {boolean} [options.hedge.enabled] Explicitly enable or disable hedged reads.\n * @see https://docs.mongodb.com/manual/core/read-preference/\n * @return {ReadPreference}\n */\nconst ReadPreference = function(mode, tags, options) {\n  if (!ReadPreference.isValid(mode)) {\n    throw new TypeError(`Invalid read preference mode ${mode}`);\n  }\n\n  // TODO(major): tags MUST be an array of tagsets\n  if (tags && !Array.isArray(tags)) {\n    emitWarningOnce(\n      'ReadPreference tags must be an array, this will change in the next major version'\n    );\n\n    const tagsHasMaxStalenessSeconds = typeof tags.maxStalenessSeconds !== 'undefined';\n    const tagsHasHedge = typeof tags.hedge !== 'undefined';\n    const tagsHasOptions = tagsHasMaxStalenessSeconds || tagsHasHedge;\n    if (tagsHasOptions) {\n      // this is likely an options object\n      options = tags;\n      tags = undefined;\n    } else {\n      tags = [tags];\n    }\n  }\n\n  this.mode = mode;\n  this.tags = tags;\n  this.hedge = options && options.hedge;\n\n  options = options || {};\n  if (options.maxStalenessSeconds != null) {\n    if (options.maxStalenessSeconds <= 0) {\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\n    }\n\n    this.maxStalenessSeconds = options.maxStalenessSeconds;\n\n    // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n    //       topology has a lower value then a MongoError will be thrown during server selection.\n    this.minWireVersion = 5;\n  }\n\n  if (this.mode === ReadPreference.PRIMARY) {\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n      throw new TypeError('Primary read preference cannot be combined with tags');\n    }\n\n    if (this.maxStalenessSeconds) {\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\n    }\n\n    if (this.hedge) {\n      throw new TypeError('Primary read preference cannot be combined with hedge');\n    }\n  }\n};\n\n// Support the deprecated `preference` property introduced in the porcelain layer\nObject.defineProperty(ReadPreference.prototype, 'preference', {\n  enumerable: true,\n  get: function() {\n    return this.mode;\n  }\n});\n\n/*\n * Read preference mode constants\n */\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\n\nconst VALID_MODES = [\n  ReadPreference.PRIMARY,\n  ReadPreference.PRIMARY_PREFERRED,\n  ReadPreference.SECONDARY,\n  ReadPreference.SECONDARY_PREFERRED,\n  ReadPreference.NEAREST,\n  null\n];\n\n/**\n * Construct a ReadPreference given an options object.\n *\n * @param {object} options The options object from which to extract the read preference.\n * @return {ReadPreference}\n */\nReadPreference.fromOptions = function(options) {\n  if (!options) return null;\n  const readPreference = options.readPreference;\n  if (!readPreference) return null;\n  const readPreferenceTags = options.readPreferenceTags;\n  const maxStalenessSeconds = options.maxStalenessSeconds;\n  if (typeof readPreference === 'string') {\n    return new ReadPreference(readPreference, readPreferenceTags);\n  } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n    const mode = readPreference.mode || readPreference.preference;\n    if (mode && typeof mode === 'string') {\n      return new ReadPreference(mode, readPreference.tags, {\n        maxStalenessSeconds: readPreference.maxStalenessSeconds || maxStalenessSeconds,\n        hedge: readPreference.hedge\n      });\n    }\n  }\n\n  return readPreference;\n};\n\n/**\n * Resolves a read preference based on well-defined inheritance rules. This method will not only\n * determine the read preference (if there is one), but will also ensure the returned value is a\n * properly constructed instance of `ReadPreference`.\n *\n * @param {Collection|Db|MongoClient} parent The parent of the operation on which to determine the read\n * preference, used for determining the inherited read preference.\n * @param {object} options The options passed into the method, potentially containing a read preference\n * @returns {(ReadPreference|null)} The resolved read preference\n */\nReadPreference.resolve = function(parent, options) {\n  options = options || {};\n  const session = options.session;\n\n  const inheritedReadPreference = parent && parent.readPreference;\n\n  let readPreference;\n  if (options.readPreference) {\n    readPreference = ReadPreference.fromOptions(options);\n  } else if (session && session.inTransaction() && session.transaction.options.readPreference) {\n    // The transactionâ€™s read preference MUST override all other user configurable read preferences.\n    readPreference = session.transaction.options.readPreference;\n  } else if (inheritedReadPreference != null) {\n    readPreference = inheritedReadPreference;\n  } else {\n    readPreference = ReadPreference.primary;\n  }\n\n  return typeof readPreference === 'string' ? new ReadPreference(readPreference) : readPreference;\n};\n\n/**\n * Replaces options.readPreference with a ReadPreference instance\n */\nReadPreference.translate = function(options) {\n  if (options.readPreference == null) return options;\n  const r = options.readPreference;\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\nReadPreference.isValid = function(mode) {\n  return VALID_MODES.indexOf(mode) !== -1;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean} True if a mode is valid\n */\nReadPreference.prototype.isValid = function(mode) {\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n};\n\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n\n/**\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n * @method\n * @return {boolean}\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n */\nReadPreference.prototype.slaveOk = function() {\n  return needSlaveOk.indexOf(this.mode) !== -1;\n};\n\n/**\n * Are the two read preference equal\n * @method\n * @param {ReadPreference} readPreference The read preference with which to check equality\n * @return {boolean} True if the two ReadPreferences are equivalent\n */\nReadPreference.prototype.equals = function(readPreference) {\n  return readPreference.mode === this.mode;\n};\n\n/**\n * Return JSON representation\n * @method\n * @return {Object} A JSON representation of the ReadPreference\n */\nReadPreference.prototype.toJSON = function() {\n  const readPreference = { mode: this.mode };\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  if (this.hedge) readPreference.hedge = this.hedge;\n  return readPreference;\n};\n\n/**\n * Primary read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.primary = new ReadPreference('primary');\n/**\n * Primary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\n * Secondary read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.secondary = new ReadPreference('secondary');\n/**\n * Secondary Preferred read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\n * Nearest read preference\n * @member\n * @type {ReadPreference}\n */\nReadPreference.nearest = new ReadPreference('nearest');\n\nmodule.exports = ReadPreference;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACD,eAAe;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,cAAc,GAAG,UAASC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACnD,IAAI,CAACH,cAAc,CAACI,OAAO,CAACH,IAAI,CAAC,EAAE;IACjC,MAAM,IAAII,SAAS,CAAE,gCAA+BJ,IAAK,EAAC,CAAC;EAC7D;;EAEA;EACA,IAAIC,IAAI,IAAI,CAACI,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;IAChCJ,eAAe,CACb,kFAAkF,CACnF;IAED,MAAMU,0BAA0B,GAAG,OAAON,IAAI,CAACO,mBAAmB,KAAK,WAAW;IAClF,MAAMC,YAAY,GAAG,OAAOR,IAAI,CAACS,KAAK,KAAK,WAAW;IACtD,MAAMC,cAAc,GAAGJ,0BAA0B,IAAIE,YAAY;IACjE,IAAIE,cAAc,EAAE;MAClB;MACAT,OAAO,GAAGD,IAAI;MACdA,IAAI,GAAGW,SAAS;IAClB,CAAC,MAAM;MACLX,IAAI,GAAG,CAACA,IAAI,CAAC;IACf;EACF;EAEA,IAAI,CAACD,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACS,KAAK,GAAGR,OAAO,IAAIA,OAAO,CAACQ,KAAK;EAErCR,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAIA,OAAO,CAACM,mBAAmB,IAAI,IAAI,EAAE;IACvC,IAAIN,OAAO,CAACM,mBAAmB,IAAI,CAAC,EAAE;MACpC,MAAM,IAAIJ,SAAS,CAAC,gDAAgD,CAAC;IACvE;IAEA,IAAI,CAACI,mBAAmB,GAAGN,OAAO,CAACM,mBAAmB;;IAEtD;IACA;IACA,IAAI,CAACK,cAAc,GAAG,CAAC;EACzB;EAEA,IAAI,IAAI,CAACb,IAAI,KAAKD,cAAc,CAACe,OAAO,EAAE;IACxC,IAAI,IAAI,CAACb,IAAI,IAAII,KAAK,CAACC,OAAO,CAAC,IAAI,CAACL,IAAI,CAAC,IAAI,IAAI,CAACA,IAAI,CAACc,MAAM,GAAG,CAAC,EAAE;MACjE,MAAM,IAAIX,SAAS,CAAC,sDAAsD,CAAC;IAC7E;IAEA,IAAI,IAAI,CAACI,mBAAmB,EAAE;MAC5B,MAAM,IAAIJ,SAAS,CAAC,qEAAqE,CAAC;IAC5F;IAEA,IAAI,IAAI,CAACM,KAAK,EAAE;MACd,MAAM,IAAIN,SAAS,CAAC,uDAAuD,CAAC;IAC9E;EACF;AACF,CAAC;;AAED;AACAY,MAAM,CAACC,cAAc,CAAClB,cAAc,CAACmB,SAAS,EAAE,YAAY,EAAE;EAC5DC,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,YAAW;IACd,OAAO,IAAI,CAACpB,IAAI;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACAD,cAAc,CAACe,OAAO,GAAG,SAAS;AAClCf,cAAc,CAACsB,iBAAiB,GAAG,kBAAkB;AACrDtB,cAAc,CAACuB,SAAS,GAAG,WAAW;AACtCvB,cAAc,CAACwB,mBAAmB,GAAG,oBAAoB;AACzDxB,cAAc,CAACyB,OAAO,GAAG,SAAS;AAElC,MAAMC,WAAW,GAAG,CAClB1B,cAAc,CAACe,OAAO,EACtBf,cAAc,CAACsB,iBAAiB,EAChCtB,cAAc,CAACuB,SAAS,EACxBvB,cAAc,CAACwB,mBAAmB,EAClCxB,cAAc,CAACyB,OAAO,EACtB,IAAI,CACL;;AAED;AACA;AACA;AACA;AACA;AACA;AACAzB,cAAc,CAAC2B,WAAW,GAAG,UAASxB,OAAO,EAAE;EAC7C,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI;EACzB,MAAMyB,cAAc,GAAGzB,OAAO,CAACyB,cAAc;EAC7C,IAAI,CAACA,cAAc,EAAE,OAAO,IAAI;EAChC,MAAMC,kBAAkB,GAAG1B,OAAO,CAAC0B,kBAAkB;EACrD,MAAMpB,mBAAmB,GAAGN,OAAO,CAACM,mBAAmB;EACvD,IAAI,OAAOmB,cAAc,KAAK,QAAQ,EAAE;IACtC,OAAO,IAAI5B,cAAc,CAAC4B,cAAc,EAAEC,kBAAkB,CAAC;EAC/D,CAAC,MAAM,IAAI,EAAED,cAAc,YAAY5B,cAAc,CAAC,IAAI,OAAO4B,cAAc,KAAK,QAAQ,EAAE;IAC5F,MAAM3B,IAAI,GAAG2B,cAAc,CAAC3B,IAAI,IAAI2B,cAAc,CAACE,UAAU;IAC7D,IAAI7B,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACpC,OAAO,IAAID,cAAc,CAACC,IAAI,EAAE2B,cAAc,CAAC1B,IAAI,EAAE;QACnDO,mBAAmB,EAAEmB,cAAc,CAACnB,mBAAmB,IAAIA,mBAAmB;QAC9EE,KAAK,EAAEiB,cAAc,CAACjB;MACxB,CAAC,CAAC;IACJ;EACF;EAEA,OAAOiB,cAAc;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,cAAc,CAAC+B,OAAO,GAAG,UAASC,MAAM,EAAE7B,OAAO,EAAE;EACjDA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,MAAM8B,OAAO,GAAG9B,OAAO,CAAC8B,OAAO;EAE/B,MAAMC,uBAAuB,GAAGF,MAAM,IAAIA,MAAM,CAACJ,cAAc;EAE/D,IAAIA,cAAc;EAClB,IAAIzB,OAAO,CAACyB,cAAc,EAAE;IAC1BA,cAAc,GAAG5B,cAAc,CAAC2B,WAAW,CAACxB,OAAO,CAAC;EACtD,CAAC,MAAM,IAAI8B,OAAO,IAAIA,OAAO,CAACE,aAAa,EAAE,IAAIF,OAAO,CAACG,WAAW,CAACjC,OAAO,CAACyB,cAAc,EAAE;IAC3F;IACAA,cAAc,GAAGK,OAAO,CAACG,WAAW,CAACjC,OAAO,CAACyB,cAAc;EAC7D,CAAC,MAAM,IAAIM,uBAAuB,IAAI,IAAI,EAAE;IAC1CN,cAAc,GAAGM,uBAAuB;EAC1C,CAAC,MAAM;IACLN,cAAc,GAAG5B,cAAc,CAACqC,OAAO;EACzC;EAEA,OAAO,OAAOT,cAAc,KAAK,QAAQ,GAAG,IAAI5B,cAAc,CAAC4B,cAAc,CAAC,GAAGA,cAAc;AACjG,CAAC;;AAED;AACA;AACA;AACA5B,cAAc,CAACsC,SAAS,GAAG,UAASnC,OAAO,EAAE;EAC3C,IAAIA,OAAO,CAACyB,cAAc,IAAI,IAAI,EAAE,OAAOzB,OAAO;EAClD,MAAMoC,CAAC,GAAGpC,OAAO,CAACyB,cAAc;EAEhC,IAAI,OAAOW,CAAC,KAAK,QAAQ,EAAE;IACzBpC,OAAO,CAACyB,cAAc,GAAG,IAAI5B,cAAc,CAACuC,CAAC,CAAC;EAChD,CAAC,MAAM,IAAIA,CAAC,IAAI,EAAEA,CAAC,YAAYvC,cAAc,CAAC,IAAI,OAAOuC,CAAC,KAAK,QAAQ,EAAE;IACvE,MAAMtC,IAAI,GAAGsC,CAAC,CAACtC,IAAI,IAAIsC,CAAC,CAACT,UAAU;IACnC,IAAI7B,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACpCE,OAAO,CAACyB,cAAc,GAAG,IAAI5B,cAAc,CAACC,IAAI,EAAEsC,CAAC,CAACrC,IAAI,EAAE;QACxDO,mBAAmB,EAAE8B,CAAC,CAAC9B;MACzB,CAAC,CAAC;IACJ;EACF,CAAC,MAAM,IAAI,EAAE8B,CAAC,YAAYvC,cAAc,CAAC,EAAE;IACzC,MAAM,IAAIK,SAAS,CAAC,2BAA2B,GAAGkC,CAAC,CAAC;EACtD;EAEA,OAAOpC,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,cAAc,CAACI,OAAO,GAAG,UAASH,IAAI,EAAE;EACtC,OAAOyB,WAAW,CAACc,OAAO,CAACvC,IAAI,CAAC,KAAK,CAAC,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,cAAc,CAACmB,SAAS,CAACf,OAAO,GAAG,UAASH,IAAI,EAAE;EAChD,OAAOD,cAAc,CAACI,OAAO,CAAC,OAAOH,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC;AAC5E,CAAC;AAED,MAAMwC,WAAW,GAAG,CAAC,kBAAkB,EAAE,WAAW,EAAE,oBAAoB,EAAE,SAAS,CAAC;;AAEtF;AACA;AACA;AACA;AACA;AACA;AACAzC,cAAc,CAACmB,SAAS,CAACuB,OAAO,GAAG,YAAW;EAC5C,OAAOD,WAAW,CAACD,OAAO,CAAC,IAAI,CAACvC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAD,cAAc,CAACmB,SAAS,CAACwB,MAAM,GAAG,UAASf,cAAc,EAAE;EACzD,OAAOA,cAAc,CAAC3B,IAAI,KAAK,IAAI,CAACA,IAAI;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAD,cAAc,CAACmB,SAAS,CAACyB,MAAM,GAAG,YAAW;EAC3C,MAAMhB,cAAc,GAAG;IAAE3B,IAAI,EAAE,IAAI,CAACA;EAAK,CAAC;EAC1C,IAAIK,KAAK,CAACC,OAAO,CAAC,IAAI,CAACL,IAAI,CAAC,EAAE0B,cAAc,CAAC1B,IAAI,GAAG,IAAI,CAACA,IAAI;EAC7D,IAAI,IAAI,CAACO,mBAAmB,EAAEmB,cAAc,CAACnB,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;EAC3F,IAAI,IAAI,CAACE,KAAK,EAAEiB,cAAc,CAACjB,KAAK,GAAG,IAAI,CAACA,KAAK;EACjD,OAAOiB,cAAc;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA5B,cAAc,CAACqC,OAAO,GAAG,IAAIrC,cAAc,CAAC,SAAS,CAAC;AACtD;AACA;AACA;AACA;AACA;AACAA,cAAc,CAAC6C,gBAAgB,GAAG,IAAI7C,cAAc,CAAC,kBAAkB,CAAC;AACxE;AACA;AACA;AACA;AACA;AACAA,cAAc,CAAC8C,SAAS,GAAG,IAAI9C,cAAc,CAAC,WAAW,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACAA,cAAc,CAAC+C,kBAAkB,GAAG,IAAI/C,cAAc,CAAC,oBAAoB,CAAC;AAC5E;AACA;AACA;AACA;AACA;AACAA,cAAc,CAACgD,OAAO,GAAG,IAAIhD,cAAc,CAAC,SAAS,CAAC;AAEtDiD,MAAM,CAACC,OAAO,GAAGlD,cAAc"},"metadata":{},"sourceType":"script"}