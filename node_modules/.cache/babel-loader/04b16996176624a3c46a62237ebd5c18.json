{"ast":null,"code":"'use strict';\n\nconst Query = require('../connection/commands').Query;\nconst Msg = require('../connection/msg').Msg;\nconst MongoError = require('../error').MongoError;\nconst getReadPreference = require('./shared').getReadPreference;\nconst isSharded = require('./shared').isSharded;\nconst databaseNamespace = require('./shared').databaseNamespace;\nconst isTransactionCommand = require('../transactions').isTransactionCommand;\nconst applySession = require('../sessions').applySession;\nconst MongoNetworkError = require('../error').MongoNetworkError;\nconst maxWireVersion = require('../utils').maxWireVersion;\nfunction isClientEncryptionEnabled(server) {\n  const wireVersion = maxWireVersion(server);\n  return wireVersion && server.autoEncrypter;\n}\nfunction command(server, ns, cmd, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  if (cmd == null) {\n    return callback(new MongoError(`command ${JSON.stringify(cmd)} does not return a cursor`));\n  }\n  if (!isClientEncryptionEnabled(server)) {\n    _command(server, ns, cmd, options, callback);\n    return;\n  }\n  const wireVersion = maxWireVersion(server);\n  if (typeof wireVersion !== 'number' || wireVersion < 8) {\n    callback(new MongoError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n    return;\n  }\n  _cryptCommand(server, ns, cmd, options, callback);\n}\nfunction _command(server, ns, cmd, options, callback) {\n  const bson = server.s.bson;\n  const pool = server.s.pool;\n  const readPreference = getReadPreference(cmd, options);\n  const shouldUseOpMsg = supportsOpMsg(server);\n  const session = options.session;\n  const serverClusterTime = server.clusterTime;\n  let clusterTime = serverClusterTime;\n  let finalCmd = Object.assign({}, cmd);\n  if (hasSessionSupport(server) && session) {\n    const sessionClusterTime = session.clusterTime;\n    if (serverClusterTime && serverClusterTime.clusterTime && sessionClusterTime && sessionClusterTime.clusterTime && sessionClusterTime.clusterTime.greaterThan(serverClusterTime.clusterTime)) {\n      clusterTime = sessionClusterTime;\n    }\n    const err = applySession(session, finalCmd, options);\n    if (err) {\n      return callback(err);\n    }\n  }\n  if (clusterTime) {\n    // if we have a known cluster time, gossip it\n    finalCmd.$clusterTime = clusterTime;\n  }\n  if (isSharded(server) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n    finalCmd = {\n      $query: finalCmd,\n      $readPreference: readPreference.toJSON()\n    };\n  }\n  const commandOptions = Object.assign({\n    command: true,\n    numberToSkip: 0,\n    numberToReturn: -1,\n    checkKeys: false\n  }, options);\n\n  // This value is not overridable\n  commandOptions.slaveOk = readPreference.slaveOk();\n  const cmdNs = `${databaseNamespace(ns)}.$cmd`;\n  const message = shouldUseOpMsg ? new Msg(bson, cmdNs, finalCmd, commandOptions) : new Query(bson, cmdNs, finalCmd, commandOptions);\n  const inTransaction = session && (session.inTransaction() || isTransactionCommand(finalCmd));\n  const commandResponseHandler = inTransaction ? function (err) {\n    // We need to add a TransientTransactionError errorLabel, as stated in the transaction spec.\n    if (err && err instanceof MongoNetworkError && !err.hasErrorLabel('TransientTransactionError')) {\n      err.addErrorLabel('TransientTransactionError');\n    }\n    if (!cmd.commitTransaction && err && err instanceof MongoError && err.hasErrorLabel('TransientTransactionError')) {\n      session.transaction.unpinServer();\n    }\n    return callback.apply(null, arguments);\n  } : callback;\n  try {\n    pool.write(message, commandOptions, commandResponseHandler);\n  } catch (err) {\n    commandResponseHandler(err);\n  }\n}\nfunction hasSessionSupport(topology) {\n  if (topology == null) return false;\n  if (topology.description) {\n    return topology.description.maxWireVersion >= 6;\n  }\n  return topology.ismaster == null ? false : topology.ismaster.maxWireVersion >= 6;\n}\nfunction supportsOpMsg(topologyOrServer) {\n  const description = topologyOrServer.ismaster ? topologyOrServer.ismaster : topologyOrServer.description;\n  if (description == null) {\n    return false;\n  }\n  return description.maxWireVersion >= 6 && description.__nodejs_mock_server__ == null;\n}\nfunction _cryptCommand(server, ns, cmd, options, callback) {\n  const autoEncrypter = server.autoEncrypter;\n  function commandResponseHandler(err, response) {\n    if (err || response == null) {\n      callback(err, response);\n      return;\n    }\n    autoEncrypter.decrypt(response.result, options, (err, decrypted) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n      response.result = decrypted;\n      response.message.documents = [decrypted];\n      callback(null, response);\n    });\n  }\n  autoEncrypter.encrypt(ns, cmd, options, (err, encrypted) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    _command(server, ns, encrypted, options, commandResponseHandler);\n  });\n}\nmodule.exports = command;","map":{"version":3,"names":["Query","require","Msg","MongoError","getReadPreference","isSharded","databaseNamespace","isTransactionCommand","applySession","MongoNetworkError","maxWireVersion","isClientEncryptionEnabled","server","wireVersion","autoEncrypter","command","ns","cmd","options","callback","JSON","stringify","_command","_cryptCommand","bson","s","pool","readPreference","shouldUseOpMsg","supportsOpMsg","session","serverClusterTime","clusterTime","finalCmd","Object","assign","hasSessionSupport","sessionClusterTime","greaterThan","err","$clusterTime","mode","$query","$readPreference","toJSON","commandOptions","numberToSkip","numberToReturn","checkKeys","slaveOk","cmdNs","message","inTransaction","commandResponseHandler","hasErrorLabel","addErrorLabel","commitTransaction","transaction","unpinServer","apply","arguments","write","topology","description","ismaster","topologyOrServer","__nodejs_mock_server__","response","decrypt","result","decrypted","documents","encrypt","encrypted","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/wireprotocol/command.js"],"sourcesContent":["'use strict';\n\nconst Query = require('../connection/commands').Query;\nconst Msg = require('../connection/msg').Msg;\nconst MongoError = require('../error').MongoError;\nconst getReadPreference = require('./shared').getReadPreference;\nconst isSharded = require('./shared').isSharded;\nconst databaseNamespace = require('./shared').databaseNamespace;\nconst isTransactionCommand = require('../transactions').isTransactionCommand;\nconst applySession = require('../sessions').applySession;\nconst MongoNetworkError = require('../error').MongoNetworkError;\nconst maxWireVersion = require('../utils').maxWireVersion;\n\nfunction isClientEncryptionEnabled(server) {\n  const wireVersion = maxWireVersion(server);\n  return wireVersion && server.autoEncrypter;\n}\n\nfunction command(server, ns, cmd, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  if (cmd == null) {\n    return callback(new MongoError(`command ${JSON.stringify(cmd)} does not return a cursor`));\n  }\n\n  if (!isClientEncryptionEnabled(server)) {\n    _command(server, ns, cmd, options, callback);\n    return;\n  }\n\n  const wireVersion = maxWireVersion(server);\n  if (typeof wireVersion !== 'number' || wireVersion < 8) {\n    callback(new MongoError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n    return;\n  }\n\n  _cryptCommand(server, ns, cmd, options, callback);\n}\n\nfunction _command(server, ns, cmd, options, callback) {\n  const bson = server.s.bson;\n  const pool = server.s.pool;\n  const readPreference = getReadPreference(cmd, options);\n  const shouldUseOpMsg = supportsOpMsg(server);\n  const session = options.session;\n\n  const serverClusterTime = server.clusterTime;\n  let clusterTime = serverClusterTime;\n  let finalCmd = Object.assign({}, cmd);\n  if (hasSessionSupport(server) && session) {\n    const sessionClusterTime = session.clusterTime;\n    if (\n      serverClusterTime &&\n      serverClusterTime.clusterTime &&\n      sessionClusterTime &&\n      sessionClusterTime.clusterTime &&\n      sessionClusterTime.clusterTime.greaterThan(serverClusterTime.clusterTime)\n    ) {\n      clusterTime = sessionClusterTime;\n    }\n\n    const err = applySession(session, finalCmd, options);\n    if (err) {\n      return callback(err);\n    }\n  }\n\n  if (clusterTime) {\n    // if we have a known cluster time, gossip it\n    finalCmd.$clusterTime = clusterTime;\n  }\n\n  if (isSharded(server) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n    finalCmd = {\n      $query: finalCmd,\n      $readPreference: readPreference.toJSON()\n    };\n  }\n\n  const commandOptions = Object.assign(\n    {\n      command: true,\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false\n    },\n    options\n  );\n\n  // This value is not overridable\n  commandOptions.slaveOk = readPreference.slaveOk();\n\n  const cmdNs = `${databaseNamespace(ns)}.$cmd`;\n  const message = shouldUseOpMsg\n    ? new Msg(bson, cmdNs, finalCmd, commandOptions)\n    : new Query(bson, cmdNs, finalCmd, commandOptions);\n\n  const inTransaction = session && (session.inTransaction() || isTransactionCommand(finalCmd));\n  const commandResponseHandler = inTransaction\n    ? function(err) {\n        // We need to add a TransientTransactionError errorLabel, as stated in the transaction spec.\n        if (\n          err &&\n          err instanceof MongoNetworkError &&\n          !err.hasErrorLabel('TransientTransactionError')\n        ) {\n          err.addErrorLabel('TransientTransactionError');\n        }\n\n        if (\n          !cmd.commitTransaction &&\n          err &&\n          err instanceof MongoError &&\n          err.hasErrorLabel('TransientTransactionError')\n        ) {\n          session.transaction.unpinServer();\n        }\n\n        return callback.apply(null, arguments);\n      }\n    : callback;\n\n  try {\n    pool.write(message, commandOptions, commandResponseHandler);\n  } catch (err) {\n    commandResponseHandler(err);\n  }\n}\n\nfunction hasSessionSupport(topology) {\n  if (topology == null) return false;\n  if (topology.description) {\n    return topology.description.maxWireVersion >= 6;\n  }\n\n  return topology.ismaster == null ? false : topology.ismaster.maxWireVersion >= 6;\n}\n\nfunction supportsOpMsg(topologyOrServer) {\n  const description = topologyOrServer.ismaster\n    ? topologyOrServer.ismaster\n    : topologyOrServer.description;\n\n  if (description == null) {\n    return false;\n  }\n\n  return description.maxWireVersion >= 6 && description.__nodejs_mock_server__ == null;\n}\n\nfunction _cryptCommand(server, ns, cmd, options, callback) {\n  const autoEncrypter = server.autoEncrypter;\n  function commandResponseHandler(err, response) {\n    if (err || response == null) {\n      callback(err, response);\n      return;\n    }\n\n    autoEncrypter.decrypt(response.result, options, (err, decrypted) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      response.result = decrypted;\n      response.message.documents = [decrypted];\n      callback(null, response);\n    });\n  }\n\n  autoEncrypter.encrypt(ns, cmd, options, (err, encrypted) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    _command(server, ns, encrypted, options, commandResponseHandler);\n  });\n}\n\nmodule.exports = command;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}