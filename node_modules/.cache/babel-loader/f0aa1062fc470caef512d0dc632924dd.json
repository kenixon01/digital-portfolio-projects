{"ast":null,"code":"'use strict';\n\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\nclass ServerDescriptionChangedEvent {\n  constructor(topologyId, address, previousDescription, newDescription) {\n    Object.assign(this, {\n      topologyId,\n      address,\n      previousDescription,\n      newDescription\n    });\n  }\n}\n\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\nclass ServerOpeningEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, {\n      topologyId,\n      address\n    });\n  }\n}\n\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\nclass ServerClosedEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, {\n      topologyId,\n      address\n    });\n  }\n}\n\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\nclass TopologyDescriptionChangedEvent {\n  constructor(topologyId, previousDescription, newDescription) {\n    Object.assign(this, {\n      topologyId,\n      previousDescription,\n      newDescription\n    });\n  }\n}\n\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyOpeningEvent {\n  constructor(topologyId) {\n    Object.assign(this, {\n      topologyId\n    });\n  }\n}\n\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyClosedEvent {\n  constructor(topologyId) {\n    Object.assign(this, {\n      topologyId\n    });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatStartedEvent {\n  constructor(connectionId) {\n    Object.assign(this, {\n      connectionId\n    });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatSucceededEvent {\n  constructor(duration, reply, connectionId) {\n    Object.assign(this, {\n      connectionId,\n      duration,\n      reply\n    });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatFailedEvent {\n  constructor(duration, failure, connectionId) {\n    Object.assign(this, {\n      connectionId,\n      duration,\n      failure\n    });\n  }\n}\nmodule.exports = {\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent\n};","map":{"version":3,"names":["ServerDescriptionChangedEvent","constructor","topologyId","address","previousDescription","newDescription","Object","assign","ServerOpeningEvent","ServerClosedEvent","TopologyDescriptionChangedEvent","TopologyOpeningEvent","TopologyClosedEvent","ServerHeartbeatStartedEvent","connectionId","ServerHeartbeatSucceededEvent","duration","reply","ServerHeartbeatFailedEvent","failure","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/sdam/events.js"],"sourcesContent":["'use strict';\n\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\nclass ServerDescriptionChangedEvent {\n  constructor(topologyId, address, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, address, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\nclass ServerOpeningEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\nclass ServerClosedEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\nclass TopologyDescriptionChangedEvent {\n  constructor(topologyId, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyOpeningEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyClosedEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatStartedEvent {\n  constructor(connectionId) {\n    Object.assign(this, { connectionId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatSucceededEvent {\n  constructor(duration, reply, connectionId) {\n    Object.assign(this, { connectionId, duration, reply });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatFailedEvent {\n  constructor(duration, failure, connectionId) {\n    Object.assign(this, { connectionId, duration, failure });\n  }\n}\n\nmodule.exports = {\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,6BAA6B,CAAC;EAClCC,WAAW,CAACC,UAAU,EAAEC,OAAO,EAAEC,mBAAmB,EAAEC,cAAc,EAAE;IACpEC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEL,UAAU;MAAEC,OAAO;MAAEC,mBAAmB;MAAEC;IAAe,CAAC,CAAC;EACnF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,kBAAkB,CAAC;EACvBP,WAAW,CAACC,UAAU,EAAEC,OAAO,EAAE;IAC/BG,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEL,UAAU;MAAEC;IAAQ,CAAC,CAAC;EAC9C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,iBAAiB,CAAC;EACtBR,WAAW,CAACC,UAAU,EAAEC,OAAO,EAAE;IAC/BG,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEL,UAAU;MAAEC;IAAQ,CAAC,CAAC;EAC9C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,+BAA+B,CAAC;EACpCT,WAAW,CAACC,UAAU,EAAEE,mBAAmB,EAAEC,cAAc,EAAE;IAC3DC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEL,UAAU;MAAEE,mBAAmB;MAAEC;IAAe,CAAC,CAAC;EAC1E;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMM,oBAAoB,CAAC;EACzBV,WAAW,CAACC,UAAU,EAAE;IACtBI,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEL;IAAW,CAAC,CAAC;EACrC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMU,mBAAmB,CAAC;EACxBX,WAAW,CAACC,UAAU,EAAE;IACtBI,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEL;IAAW,CAAC,CAAC;EACrC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,2BAA2B,CAAC;EAChCZ,WAAW,CAACa,YAAY,EAAE;IACxBR,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEO;IAAa,CAAC,CAAC;EACvC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,6BAA6B,CAAC;EAClCd,WAAW,CAACe,QAAQ,EAAEC,KAAK,EAAEH,YAAY,EAAE;IACzCR,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEO,YAAY;MAAEE,QAAQ;MAAEC;IAAM,CAAC,CAAC;EACxD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,CAAC;EAC/BjB,WAAW,CAACe,QAAQ,EAAEG,OAAO,EAAEL,YAAY,EAAE;IAC3CR,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEO,YAAY;MAAEE,QAAQ;MAAEG;IAAQ,CAAC,CAAC;EAC1D;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG;EACfrB,6BAA6B;EAC7BQ,kBAAkB;EAClBC,iBAAiB;EACjBC,+BAA+B;EAC/BC,oBAAoB;EACpBC,mBAAmB;EACnBC,2BAA2B;EAC3BE,6BAA6B;EAC7BG;AACF,CAAC"},"metadata":{},"sourceType":"script"}