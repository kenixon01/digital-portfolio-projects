{"ast":null,"code":"'use strict';\n\nconst Logger = require('../connection/logger');\nconst EventEmitter = require('events').EventEmitter;\nconst dns = require('dns');\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n  addresses() {\n    return new Set(this.srvRecords.map(record => `${record.name}:${record.port}`));\n  }\n}\nclass SrvPoller extends EventEmitter {\n  /**\n   * @param {object} options\n   * @param {string} options.srvHost\n   * @param {number} [options.heartbeatFrequencyMS]\n   * @param {function} [options.logger]\n   * @param {string} [options.loggerLevel]\n   */\n  constructor(options) {\n    super();\n    if (!options || !options.srvHost) {\n      throw new TypeError('options for SrvPoller must exist and include srvHost');\n    }\n    this.srvHost = options.srvHost;\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n    this.logger = Logger('srvPoller', options);\n    this.haMode = false;\n    this.generation = 0;\n    this._timeout = null;\n  }\n  get srvAddress() {\n    return `_mongodb._tcp.${this.srvHost}`;\n  }\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = null;\n    }\n  }\n  schedule() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this._poll(), this.intervalMS);\n  }\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit('srvRecordDiscovery', new SrvPollingEvent(srvRecords));\n  }\n  failure(message, obj) {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n  parentDomainMismatch(srvRecord) {\n    this.logger.warn(`parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`, srvRecord);\n  }\n  _poll() {\n    const generation = this.generation;\n    dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n      if (generation !== this.generation) {\n        return;\n      }\n      if (err) {\n        this.failure('DNS error', err);\n        return;\n      }\n      const finalAddresses = [];\n      srvRecords.forEach(record => {\n        if (matchesParentDomain(record.name, this.srvHost)) {\n          finalAddresses.push(record);\n        } else {\n          this.parentDomainMismatch(record);\n        }\n      });\n      if (!finalAddresses.length) {\n        this.failure('No valid addresses found at host');\n        return;\n      }\n      this.success(finalAddresses);\n    });\n  }\n}\nmodule.exports.SrvPollingEvent = SrvPollingEvent;\nmodule.exports.SrvPoller = SrvPoller;","map":{"version":3,"names":["Logger","require","EventEmitter","dns","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","SrvPollingEvent","constructor","srvRecords","addresses","Set","map","record","name","port","SrvPoller","options","srvHost","TypeError","rescanSrvIntervalMS","heartbeatFrequencyMS","logger","haMode","generation","_timeout","intervalMS","start","schedule","stop","clearTimeout","setTimeout","_poll","success","emit","failure","message","obj","warn","parentDomainMismatch","srvRecord","resolveSrv","err","finalAddresses","forEach","push","length","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/sdam/srv_polling.js"],"sourcesContent":["'use strict';\n\nconst Logger = require('../connection/logger');\nconst EventEmitter = require('events').EventEmitter;\nconst dns = require('dns');\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n\n  addresses() {\n    return new Set(this.srvRecords.map(record => `${record.name}:${record.port}`));\n  }\n}\n\nclass SrvPoller extends EventEmitter {\n  /**\n   * @param {object} options\n   * @param {string} options.srvHost\n   * @param {number} [options.heartbeatFrequencyMS]\n   * @param {function} [options.logger]\n   * @param {string} [options.loggerLevel]\n   */\n  constructor(options) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new TypeError('options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n    this.logger = Logger('srvPoller', options);\n\n    this.haMode = false;\n    this.generation = 0;\n\n    this._timeout = null;\n  }\n\n  get srvAddress() {\n    return `_mongodb._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = null;\n    }\n  }\n\n  schedule() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this._poll(), this.intervalMS);\n  }\n\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit('srvRecordDiscovery', new SrvPollingEvent(srvRecords));\n  }\n\n  failure(message, obj) {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n\n  parentDomainMismatch(srvRecord) {\n    this.logger.warn(\n      `parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`,\n      srvRecord\n    );\n  }\n\n  _poll() {\n    const generation = this.generation;\n    dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n      if (generation !== this.generation) {\n        return;\n      }\n\n      if (err) {\n        this.failure('DNS error', err);\n        return;\n      }\n\n      const finalAddresses = [];\n      srvRecords.forEach(record => {\n        if (matchesParentDomain(record.name, this.srvHost)) {\n          finalAddresses.push(record);\n        } else {\n          this.parentDomainMismatch(record);\n        }\n      });\n\n      if (!finalAddresses.length) {\n        this.failure('No valid addresses found at host');\n        return;\n      }\n\n      this.success(finalAddresses);\n    });\n  }\n}\n\nmodule.exports.SrvPollingEvent = SrvPollingEvent;\nmodule.exports.SrvPoller = SrvPoller;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}