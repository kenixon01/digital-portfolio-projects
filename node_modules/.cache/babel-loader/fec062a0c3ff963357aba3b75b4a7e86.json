{"ast":null,"code":"'use strict';\n\nconst KillCursor = require('../connection/commands').KillCursor;\nconst GetMore = require('../connection/commands').GetMore;\nconst calculateDurationInMs = require('../../utils').calculateDurationInMs;\nconst extractCommand = require('../../command_utils').extractCommand;\n\n// helper methods\nconst namespace = command => command.ns;\nconst databaseName = command => command.ns.split('.')[0];\nconst generateConnectionId = pool => pool.options ? `${pool.options.host}:${pool.options.port}` : pool.address;\nconst isLegacyPool = pool => pool.s && pool.queue;\nconst extractReply = (command, reply) => {\n  if (command instanceof GetMore) {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        nextBatch: reply.message.documents\n      }\n    };\n  }\n  if (command instanceof KillCursor) {\n    return {\n      ok: 1,\n      cursorsUnknown: command.cursorIds\n    };\n  }\n\n  // is this a legacy find command?\n  if (command.query && typeof command.query.$query !== 'undefined') {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        firstBatch: reply.message.documents\n      }\n    };\n  }\n  return reply && reply.result ? reply.result : reply;\n};\nconst extractConnectionDetails = pool => {\n  if (isLegacyPool(pool)) {\n    return {\n      connectionId: generateConnectionId(pool)\n    };\n  }\n\n  // APM in the modern pool is done at the `Connection` level, so we rename it here for\n  // readability.\n  const connection = pool;\n  return {\n    address: connection.address,\n    connectionId: connection.id\n  };\n};\n\n/** An event indicating the start of a given command */\nclass CommandStartedEvent {\n  /**\n   * Create a started event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   */\n  constructor(pool, command) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      databaseName: databaseName(command),\n      commandName,\n      command: extractedCommand.shouldRedact ? {} : extractedCommand.cmd\n    });\n  }\n}\n\n/** An event indicating the success of a given command */\nclass CommandSucceededEvent {\n  /**\n   * Create a succeeded event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {Object} reply the reply for this command from the server\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, reply, started) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      commandName,\n      duration: calculateDurationInMs(started),\n      reply: extractedCommand.shouldRedact ? {} : extractReply(command, reply)\n    });\n  }\n}\n\n/** An event indicating the failure of a given command */\nclass CommandFailedEvent {\n  /**\n   * Create a failure event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {MongoError|Object} error the generated error or a server error response\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, error, started) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      commandName,\n      duration: calculateDurationInMs(started),\n      failure: extractedCommand.shouldRedact ? {} : error\n    });\n  }\n}\nmodule.exports = {\n  CommandStartedEvent,\n  CommandSucceededEvent,\n  CommandFailedEvent\n};","map":{"version":3,"names":["KillCursor","require","GetMore","calculateDurationInMs","extractCommand","namespace","command","ns","databaseName","split","generateConnectionId","pool","options","host","port","address","isLegacyPool","s","queue","extractReply","reply","ok","cursor","id","message","cursorId","nextBatch","documents","cursorsUnknown","cursorIds","query","$query","firstBatch","result","extractConnectionDetails","connectionId","connection","CommandStartedEvent","constructor","extractedCommand","commandName","name","connectionDetails","Object","assign","requestId","shouldRedact","cmd","CommandSucceededEvent","started","duration","CommandFailedEvent","error","failure","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/connection/apm.js"],"sourcesContent":["'use strict';\nconst KillCursor = require('../connection/commands').KillCursor;\nconst GetMore = require('../connection/commands').GetMore;\nconst calculateDurationInMs = require('../../utils').calculateDurationInMs;\nconst extractCommand = require('../../command_utils').extractCommand;\n\n// helper methods\nconst namespace = command => command.ns;\nconst databaseName = command => command.ns.split('.')[0];\nconst generateConnectionId = pool =>\n  pool.options ? `${pool.options.host}:${pool.options.port}` : pool.address;\nconst isLegacyPool = pool => pool.s && pool.queue;\n\nconst extractReply = (command, reply) => {\n  if (command instanceof GetMore) {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        nextBatch: reply.message.documents\n      }\n    };\n  }\n\n  if (command instanceof KillCursor) {\n    return {\n      ok: 1,\n      cursorsUnknown: command.cursorIds\n    };\n  }\n\n  // is this a legacy find command?\n  if (command.query && typeof command.query.$query !== 'undefined') {\n    return {\n      ok: 1,\n      cursor: {\n        id: reply.message.cursorId,\n        ns: namespace(command),\n        firstBatch: reply.message.documents\n      }\n    };\n  }\n\n  return reply && reply.result ? reply.result : reply;\n};\n\nconst extractConnectionDetails = pool => {\n  if (isLegacyPool(pool)) {\n    return {\n      connectionId: generateConnectionId(pool)\n    };\n  }\n\n  // APM in the modern pool is done at the `Connection` level, so we rename it here for\n  // readability.\n  const connection = pool;\n  return {\n    address: connection.address,\n    connectionId: connection.id\n  };\n};\n\n/** An event indicating the start of a given command */\nclass CommandStartedEvent {\n  /**\n   * Create a started event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   */\n  constructor(pool, command) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      databaseName: databaseName(command),\n      commandName,\n      command: extractedCommand.shouldRedact ? {} : extractedCommand.cmd\n    });\n  }\n}\n\n/** An event indicating the success of a given command */\nclass CommandSucceededEvent {\n  /**\n   * Create a succeeded event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {Object} reply the reply for this command from the server\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, reply, started) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      commandName,\n      duration: calculateDurationInMs(started),\n      reply: extractedCommand.shouldRedact ? {} : extractReply(command, reply)\n    });\n  }\n}\n\n/** An event indicating the failure of a given command */\nclass CommandFailedEvent {\n  /**\n   * Create a failure event\n   *\n   * @param {Pool} pool the pool that originated the command\n   * @param {Object} command the command\n   * @param {MongoError|Object} error the generated error or a server error response\n   * @param {Array} started a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(pool, command, error, started) {\n    const extractedCommand = extractCommand(command);\n    const commandName = extractedCommand.name;\n    const connectionDetails = extractConnectionDetails(pool);\n\n    Object.assign(this, connectionDetails, {\n      requestId: command.requestId,\n      commandName,\n      duration: calculateDurationInMs(started),\n      failure: extractedCommand.shouldRedact ? {} : error\n    });\n  }\n}\n\nmodule.exports = {\n  CommandStartedEvent,\n  CommandSucceededEvent,\n  CommandFailedEvent\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}