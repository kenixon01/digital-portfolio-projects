{"ast":null,"code":"'use strict';\n\nconst Snappy = require('../connection/utils').retrieveSnappy();\nconst zlib = require('zlib');\nconst compressorIDs = {\n  snappy: 1,\n  zlib: 2\n};\nconst uncompressibleCommands = new Set(['ismaster', 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']);\n\n// Facilitate compressing a message using an agreed compressor\nfunction compress(self, dataToBeCompressed, callback) {\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      Snappy.compress(dataToBeCompressed, callback);\n      break;\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      var zlibOptions = {};\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n    default:\n      throw new Error('Attempt to compress message using unknown compressor \"' + self.options.agreedCompressor + '\".');\n  }\n}\n\n// Decompress a message using the given compressor\nfunction decompress(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > compressorIDs.length) {\n    throw new Error('Server sent message compressed using an unsupported compressor. (Received compressor ID ' + compressorID + ')');\n  }\n  switch (compressorID) {\n    case compressorIDs.snappy:\n      Snappy.uncompress(compressedData, callback);\n      break;\n    case compressorIDs.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n    default:\n      callback(null, compressedData);\n  }\n}\nmodule.exports = {\n  compressorIDs,\n  uncompressibleCommands,\n  compress,\n  decompress\n};","map":{"version":3,"names":["Snappy","require","retrieveSnappy","zlib","compressorIDs","snappy","uncompressibleCommands","Set","compress","self","dataToBeCompressed","callback","options","agreedCompressor","zlibOptions","zlibCompressionLevel","level","deflate","Error","decompress","compressorID","compressedData","length","uncompress","inflate","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/wireprotocol/compression.js"],"sourcesContent":["'use strict';\n\nconst Snappy = require('../connection/utils').retrieveSnappy();\nconst zlib = require('zlib');\n\nconst compressorIDs = {\n  snappy: 1,\n  zlib: 2\n};\n\nconst uncompressibleCommands = new Set([\n  'ismaster',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n]);\n\n// Facilitate compressing a message using an agreed compressor\nfunction compress(self, dataToBeCompressed, callback) {\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      Snappy.compress(dataToBeCompressed, callback);\n      break;\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      var zlibOptions = {};\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n    default:\n      throw new Error(\n        'Attempt to compress message using unknown compressor \"' +\n          self.options.agreedCompressor +\n          '\".'\n      );\n  }\n}\n\n// Decompress a message using the given compressor\nfunction decompress(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > compressorIDs.length) {\n    throw new Error(\n      'Server sent message compressed using an unsupported compressor. (Received compressor ID ' +\n        compressorID +\n        ')'\n    );\n  }\n  switch (compressorID) {\n    case compressorIDs.snappy:\n      Snappy.uncompress(compressedData, callback);\n      break;\n    case compressorIDs.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n    default:\n      callback(null, compressedData);\n  }\n}\n\nmodule.exports = {\n  compressorIDs,\n  uncompressibleCommands,\n  compress,\n  decompress\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,qBAAqB,CAAC,CAACC,cAAc,EAAE;AAC9D,MAAMC,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,aAAa,GAAG;EACpBC,MAAM,EAAE,CAAC;EACTF,IAAI,EAAE;AACR,CAAC;AAED,MAAMG,sBAAsB,GAAG,IAAIC,GAAG,CAAC,CACrC,UAAU,EACV,WAAW,EACX,cAAc,EACd,UAAU,EACV,cAAc,EACd,YAAY,EACZ,YAAY,EACZ,iBAAiB,EACjB,gBAAgB,EAChB,QAAQ,CACT,CAAC;;AAEF;AACA,SAASC,QAAQ,CAACC,IAAI,EAAEC,kBAAkB,EAAEC,QAAQ,EAAE;EACpD,QAAQF,IAAI,CAACG,OAAO,CAACC,gBAAgB;IACnC,KAAK,QAAQ;MACXb,MAAM,CAACQ,QAAQ,CAACE,kBAAkB,EAAEC,QAAQ,CAAC;MAC7C;IACF,KAAK,MAAM;MACT;MACA,IAAIG,WAAW,GAAG,CAAC,CAAC;MACpB,IAAIL,IAAI,CAACG,OAAO,CAACG,oBAAoB,EAAE;QACrCD,WAAW,CAACE,KAAK,GAAGP,IAAI,CAACG,OAAO,CAACG,oBAAoB;MACvD;MACAZ,IAAI,CAACc,OAAO,CAACP,kBAAkB,EAAEI,WAAW,EAAEH,QAAQ,CAAC;MACvD;IACF;MACE,MAAM,IAAIO,KAAK,CACb,wDAAwD,GACtDT,IAAI,CAACG,OAAO,CAACC,gBAAgB,GAC7B,IAAI,CACP;EAAC;AAER;;AAEA;AACA,SAASM,UAAU,CAACC,YAAY,EAAEC,cAAc,EAAEV,QAAQ,EAAE;EAC1D,IAAIS,YAAY,GAAG,CAAC,IAAIA,YAAY,GAAGhB,aAAa,CAACkB,MAAM,EAAE;IAC3D,MAAM,IAAIJ,KAAK,CACb,0FAA0F,GACxFE,YAAY,GACZ,GAAG,CACN;EACH;EACA,QAAQA,YAAY;IAClB,KAAKhB,aAAa,CAACC,MAAM;MACvBL,MAAM,CAACuB,UAAU,CAACF,cAAc,EAAEV,QAAQ,CAAC;MAC3C;IACF,KAAKP,aAAa,CAACD,IAAI;MACrBA,IAAI,CAACqB,OAAO,CAACH,cAAc,EAAEV,QAAQ,CAAC;MACtC;IACF;MACEA,QAAQ,CAAC,IAAI,EAAEU,cAAc,CAAC;EAAC;AAErC;AAEAI,MAAM,CAACC,OAAO,GAAG;EACftB,aAAa;EACbE,sBAAsB;EACtBE,QAAQ;EACRW;AACF,CAAC"},"metadata":{},"sourceType":"script"}