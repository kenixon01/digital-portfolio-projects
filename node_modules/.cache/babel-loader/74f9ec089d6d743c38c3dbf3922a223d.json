{"ast":null,"code":"import * as PropTypes from 'prop-types';\nimport { useMutation } from \"../hooks/index.js\";\nexport function Mutation(props) {\n  var _a = useMutation(props.mutation, props),\n    runMutation = _a[0],\n    result = _a[1];\n  return props.children ? props.children(runMutation, result) : null;\n}\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])), PropTypes.func]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,SAAS,MAAM,YAAY;AAIvC,SAASC,WAAW,QAAQ,mBAAW;AAEvC,OAAM,SAAUC,QAAQ,CACtBC,KAAkD;EAE5C,SAAwBF,WAAW,CAACE,KAAK,CAACC,QAAQ,EAAED,KAAK,CAAC;IAAzDE,WAAW;IAAEC,MAAM,QAAsC;EAChE,OAAOH,KAAK,CAACI,QAAQ,GAAGJ,KAAK,CAACI,QAAQ,CAACF,WAAW,EAAEC,MAAM,CAAC,GAAG,IAAI;AACpE;AAMAJ,QAAQ,CAACM,SAAS,GAAG;EACnBJ,QAAQ,EAAEJ,SAAS,CAACS,MAAM,CAACC,UAAU;EACrCC,SAAS,EAAEX,SAAS,CAACS,MAAM;EAC3BG,kBAAkB,EAAEZ,SAAS,CAACa,SAAS,CAAC,CAACb,SAAS,CAACS,MAAM,EAAET,SAAS,CAACc,IAAI,CAAC,CAAC;EAC3EC,cAAc,EAAEf,SAAS,CAACa,SAAS,CAAC,CAClCb,SAAS,CAACgB,OAAO,CACfhB,SAAS,CAACa,SAAS,CAAC,CAACb,SAAS,CAACiB,MAAM,EAAEjB,SAAS,CAACS,MAAM,CAAC,CAAC,CAC1D,EACDT,SAAS,CAACc,IAAI,CACf,CAAC;EACFI,mBAAmB,EAAElB,SAAS,CAACmB,IAAI;EACnCC,MAAM,EAAEpB,SAAS,CAACc,IAAI;EACtBP,QAAQ,EAAEP,SAAS,CAACc,IAAI,CAACJ,UAAU;EACnCW,WAAW,EAAErB,SAAS,CAACc,IAAI;EAC3BQ,OAAO,EAAEtB,SAAS,CAACc,IAAI;EACvBS,WAAW,EAAEvB,SAAS,CAACiB;CACW","names":["PropTypes","useMutation","Mutation","props","mutation","runMutation","result","children","propTypes","object","isRequired","variables","optimisticResponse","oneOfType","func","refetchQueries","arrayOf","string","awaitRefetchQueries","bool","update","onCompleted","onError","fetchPolicy"],"sources":["C:\\Users\\minix\\Documents\\GitHub\\digital-portfolio-projects\\digital-portfolio-projects\\node_modules\\@apollo\\src\\react\\components\\Mutation.tsx"],"sourcesContent":["import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { MutationComponentOptions } from './types';\nimport { useMutation } from '../hooks';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport interface Mutation<TData, TVariables> {\n  propTypes: PropTypes.InferProps<MutationComponentOptions<TData, TVariables>>;\n}\n\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    ),\n    PropTypes.func\n  ]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string,\n} as Mutation<any, any>[\"propTypes\"];\n"]},"metadata":{},"sourceType":"module"}