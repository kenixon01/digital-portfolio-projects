{"ast":null,"code":"'use strict';\n\nconst dns = require('dns');\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst retrieveKerberos = require('../utils').retrieveKerberos;\nconst MongoError = require('../error').MongoError;\nlet kerberos;\nclass GSSAPI extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (credentials == null) return callback(new MongoError('credentials required'));\n    const username = credentials.username;\n    function externalCommand(command, cb) {\n      return connection.command('$external.$cmd', command, cb);\n    }\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new MongoError('gssapi client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, response) => {\n          if (err) return callback(err);\n          const result = response.result;\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, response) => {\n              if (err) return callback(err);\n              const result = response.result;\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                }, (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\nmodule.exports = GSSAPI;\nfunction makeKerberosClient(authContext, callback) {\n  const host = authContext.options.host;\n  const port = authContext.options.port;\n  const credentials = authContext.credentials;\n  if (!host || !port || !credentials) {\n    return callback(new MongoError(`Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${credentials ? 'host' : 'credentials'}.`));\n  }\n  if (kerberos == null) {\n    try {\n      kerberos = retrieveKerberos();\n    } catch (e) {\n      return callback(e);\n    }\n  }\n  const username = credentials.username;\n  const password = credentials.password;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n  performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {\n    if (err) return callback(err);\n    const initOptions = {};\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n    kerberos.initializeClient(`${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`, initOptions, (err, client) => {\n      if (err) return callback(new MongoError(err));\n      callback(null, client);\n    });\n  });\n}\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n    // Wrap the response\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err);\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  const canonicalizeHostName = typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean' ? mechanismProperties.gssapiCanonicalizeHostName : false;\n  if (!canonicalizeHostName) return callback(undefined, host);\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err);\n    // Get the first resolve host id\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n    callback(undefined, host);\n  });\n}","map":{"version":3,"names":["dns","require","AuthProvider","retrieveKerberos","MongoError","kerberos","GSSAPI","auth","authContext","callback","connection","credentials","username","externalCommand","command","cb","makeKerberosClient","err","client","step","payload","saslStart","response","result","negotiate","saslContinue","conversationId","finalize","undefined","module","exports","host","options","port","e","password","mechanismProperties","serviceName","performGssapiCanonicalizeHostName","initOptions","Object","assign","user","initializeClient","process","platform","mechanism","autoAuthorize","retries","unwrap","wrap","wrapped","canonicalizeHostName","gssapiCanonicalizeHostName","resolveCname","r","Array","isArray","length"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/auth/gssapi.js"],"sourcesContent":["'use strict';\nconst dns = require('dns');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst retrieveKerberos = require('../utils').retrieveKerberos;\nconst MongoError = require('../error').MongoError;\n\nlet kerberos;\n\nclass GSSAPI extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (credentials == null) return callback(new MongoError('credentials required'));\n    const username = credentials.username;\n    function externalCommand(command, cb) {\n      return connection.command('$external.$cmd', command, cb);\n    }\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new MongoError('gssapi client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, response) => {\n          if (err) return callback(err);\n          const result = response.result;\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, response) => {\n              if (err) return callback(err);\n              const result = response.result;\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand(\n                  {\n                    saslContinue: 1,\n                    conversationId: result.conversationId,\n                    payload\n                  },\n                  (err, result) => {\n                    if (err) return callback(err);\n                    callback(undefined, result);\n                  }\n                );\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\nmodule.exports = GSSAPI;\n\nfunction makeKerberosClient(authContext, callback) {\n  const host = authContext.options.host;\n  const port = authContext.options.port;\n  const credentials = authContext.credentials;\n  if (!host || !port || !credentials) {\n    return callback(\n      new MongoError(\n        `Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${\n          credentials ? 'host' : 'credentials'\n        }.`\n      )\n    );\n  }\n  if (kerberos == null) {\n    try {\n      kerberos = retrieveKerberos();\n    } catch (e) {\n      return callback(e);\n    }\n  }\n  const username = credentials.username;\n  const password = credentials.password;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName =\n    mechanismProperties['gssapiservicename'] ||\n    mechanismProperties['gssapiServiceName'] ||\n    'mongodb';\n  performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {\n    if (err) return callback(err);\n    const initOptions = {};\n    if (password != null) {\n      Object.assign(initOptions, { user: username, password: password });\n    }\n    kerberos.initializeClient(\n      `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`,\n      initOptions,\n      (err, client) => {\n        if (err) return callback(new MongoError(err));\n        callback(null, client);\n      }\n    );\n  });\n}\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n    // Wrap the response\n    client.wrap(response || '', { user }, (err, wrapped) => {\n      if (err) return callback(err);\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  const canonicalizeHostName =\n    typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean'\n      ? mechanismProperties.gssapiCanonicalizeHostName\n      : false;\n  if (!canonicalizeHostName) return callback(undefined, host);\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err);\n    // Get the first resolve host id\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n    callback(undefined, host);\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}