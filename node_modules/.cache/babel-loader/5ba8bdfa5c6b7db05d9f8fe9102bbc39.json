{"ast":null,"code":"'use strict';\n\n// shared state names\nconst STATE_CLOSING = 'closing';\nconst STATE_CLOSED = 'closed';\nconst STATE_CONNECTING = 'connecting';\nconst STATE_CONNECTED = 'connected';\n\n// An enumeration of topology types we know about\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n};\n\n// An enumeration of server types we know about\nconst ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n};\n\n// helper to get a server's type that works for both legacy and unified topologies\nfunction serverType(server) {\n  let description = server.s.description || server.s.serverDescription;\n  if (description.topologyType === TopologyType.Single) return description.servers[0].type;\n  return description.type;\n}\nconst TOPOLOGY_DEFAULTS = {\n  useUnifiedTopology: true,\n  localThresholdMS: 15,\n  serverSelectionTimeoutMS: 30000,\n  heartbeatFrequencyMS: 10000,\n  minHeartbeatFrequencyMS: 500\n};\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\nfunction clearAndRemoveTimerFrom(timer, timers) {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\nmodule.exports = {\n  STATE_CLOSING,\n  STATE_CLOSED,\n  STATE_CONNECTING,\n  STATE_CONNECTED,\n  TOPOLOGY_DEFAULTS,\n  TopologyType,\n  ServerType,\n  serverType,\n  drainTimerQueue,\n  clearAndRemoveTimerFrom\n};","map":{"version":3,"names":["STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","TopologyType","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","Unknown","ServerType","Standalone","Mongos","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","serverType","server","description","s","serverDescription","topologyType","servers","type","TOPOLOGY_DEFAULTS","useUnifiedTopology","localThresholdMS","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","drainTimerQueue","queue","forEach","clearTimeout","clear","clearAndRemoveTimerFrom","timer","timers","delete","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/sdam/common.js"],"sourcesContent":["'use strict';\n\n// shared state names\nconst STATE_CLOSING = 'closing';\nconst STATE_CLOSED = 'closed';\nconst STATE_CONNECTING = 'connecting';\nconst STATE_CONNECTED = 'connected';\n\n// An enumeration of topology types we know about\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n};\n\n// An enumeration of server types we know about\nconst ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n};\n\n// helper to get a server's type that works for both legacy and unified topologies\nfunction serverType(server) {\n  let description = server.s.description || server.s.serverDescription;\n  if (description.topologyType === TopologyType.Single) return description.servers[0].type;\n  return description.type;\n}\n\nconst TOPOLOGY_DEFAULTS = {\n  useUnifiedTopology: true,\n  localThresholdMS: 15,\n  serverSelectionTimeoutMS: 30000,\n  heartbeatFrequencyMS: 10000,\n  minHeartbeatFrequencyMS: 500\n};\n\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\nfunction clearAndRemoveTimerFrom(timer, timers) {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\n\nmodule.exports = {\n  STATE_CLOSING,\n  STATE_CLOSED,\n  STATE_CONNECTING,\n  STATE_CONNECTED,\n  TOPOLOGY_DEFAULTS,\n  TopologyType,\n  ServerType,\n  serverType,\n  drainTimerQueue,\n  clearAndRemoveTimerFrom\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,MAAMA,aAAa,GAAG,SAAS;AAC/B,MAAMC,YAAY,GAAG,QAAQ;AAC7B,MAAMC,gBAAgB,GAAG,YAAY;AACrC,MAAMC,eAAe,GAAG,WAAW;;AAEnC;AACA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,QAAQ;EAChBC,mBAAmB,EAAE,qBAAqB;EAC1CC,qBAAqB,EAAE,uBAAuB;EAC9CC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG;EACjBC,UAAU,EAAE,YAAY;EACxBC,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE,iBAAiB;EAClCC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,WAAW;EACtBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,SAAS;EAClBT,OAAO,EAAE;AACX,CAAC;;AAED;AACA,SAASU,UAAU,CAACC,MAAM,EAAE;EAC1B,IAAIC,WAAW,GAAGD,MAAM,CAACE,CAAC,CAACD,WAAW,IAAID,MAAM,CAACE,CAAC,CAACC,iBAAiB;EACpE,IAAIF,WAAW,CAACG,YAAY,KAAKpB,YAAY,CAACC,MAAM,EAAE,OAAOgB,WAAW,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EACxF,OAAOL,WAAW,CAACK,IAAI;AACzB;AAEA,MAAMC,iBAAiB,GAAG;EACxBC,kBAAkB,EAAE,IAAI;EACxBC,gBAAgB,EAAE,EAAE;EACpBC,wBAAwB,EAAE,KAAK;EAC/BC,oBAAoB,EAAE,KAAK;EAC3BC,uBAAuB,EAAE;AAC3B,CAAC;AAED,SAASC,eAAe,CAACC,KAAK,EAAE;EAC9BA,KAAK,CAACC,OAAO,CAACC,YAAY,CAAC;EAC3BF,KAAK,CAACG,KAAK,EAAE;AACf;AAEA,SAASC,uBAAuB,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC9CJ,YAAY,CAACG,KAAK,CAAC;EACnB,OAAOC,MAAM,CAACC,MAAM,CAACF,KAAK,CAAC;AAC7B;AAEAG,MAAM,CAACC,OAAO,GAAG;EACf3C,aAAa;EACbC,YAAY;EACZC,gBAAgB;EAChBC,eAAe;EACfwB,iBAAiB;EACjBvB,YAAY;EACZM,UAAU;EACVS,UAAU;EACVc,eAAe;EACfK;AACF,CAAC"},"metadata":{},"sourceType":"script"}