{"ast":null,"code":"'use strict';\n\nvar Long = require('./long');\nvar PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nvar PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nvar PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\nvar EXPONENT_MAX = 6111;\nvar EXPONENT_MIN = -6176;\nvar EXPONENT_BIAS = 6176;\nvar MAX_DIGITS = 34;\n\n// Nan value bits as 32 bit values (due to lack of longs)\nvar NAN_BUFFER = [0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\n// Infinity value bits 32 bit values (due to lack of longs)\nvar INF_NEGATIVE_BUFFER = [0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\nvar INF_POSITIVE_BUFFER = [0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\nvar EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\nvar utils = require('./parser/utils');\n\n// Detect if the value is a digit\nvar isDigit = function (value) {\n  return !isNaN(parseInt(value, 10));\n};\n\n// Divide two uint128 values\nvar divideu128 = function (value) {\n  var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  var _rem = Long.fromNumber(0);\n  var i = 0;\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return {\n      quotient: value,\n      rem: _rem\n    };\n  }\n  for (i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32);\n    // Add the divided to _rem\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low_;\n    _rem = _rem.modulo(DIVISOR);\n  }\n  return {\n    quotient: value,\n    rem: _rem\n  };\n};\n\n// Multiply two Long values and return the 128 bit value\nvar multiply64x2 = function (left, right) {\n  if (!left && !right) {\n    return {\n      high: Long.fromNumber(0),\n      low: Long.fromNumber(0)\n    };\n  }\n  var leftHigh = left.shiftRightUnsigned(32);\n  var leftLow = new Long(left.getLowBits(), 0);\n  var rightHigh = right.shiftRightUnsigned(32);\n  var rightLow = new Long(right.getLowBits(), 0);\n  var productHigh = leftHigh.multiply(rightHigh);\n  var productMid = leftHigh.multiply(rightLow);\n  var productMid2 = leftLow.multiply(rightHigh);\n  var productLow = leftLow.multiply(rightLow);\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n\n  // Return the 128 bit result\n  return {\n    high: productHigh,\n    low: productLow\n  };\n};\nvar lessThan = function (left, right) {\n  // Make values unsigned\n  var uhleft = left.high_ >>> 0;\n  var uhright = right.high_ >>> 0;\n\n  // Compare high bits first\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft === uhright) {\n    var ulleft = left.low_ >>> 0;\n    var ulright = right.low_ >>> 0;\n    if (ulleft < ulright) return true;\n  }\n  return false;\n};\n\n// var longtoHex = function(value) {\n//   var buffer = utils.allocBuffer(8);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value.low_ & 0xff;\n//   buffer[index++] = (value.low_ >> 8) & 0xff;\n//   buffer[index++] = (value.low_ >> 16) & 0xff;\n//   buffer[index++] = (value.low_ >> 24) & 0xff;\n//   // Encode high bits\n//   buffer[index++] = value.high_ & 0xff;\n//   buffer[index++] = (value.high_ >> 8) & 0xff;\n//   buffer[index++] = (value.high_ >> 16) & 0xff;\n//   buffer[index++] = (value.high_ >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n// var int32toHex = function(value) {\n//   var buffer = utils.allocBuffer(4);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value & 0xff;\n//   buffer[index++] = (value >> 8) & 0xff;\n//   buffer[index++] = (value >> 16) & 0xff;\n//   buffer[index++] = (value >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n/**\n * A class representation of the BSON Decimal128 type.\n *\n * @class\n * @param {Buffer} bytes a buffer containing the raw Decimal128 bytes.\n * @return {Double}\n */\nvar Decimal128 = function (bytes) {\n  this._bsontype = 'Decimal128';\n  this.bytes = bytes;\n};\n\n/**\n * Create a Decimal128 instance from a string representation\n *\n * @method\n * @param {string} string a numeric string representation.\n * @return {Decimal128} returns a Decimal128 instance.\n */\nDecimal128.fromString = function (string) {\n  // Parse state tracking\n  var isNegative = false;\n  var sawRadix = false;\n  var foundNonZero = false;\n\n  // Total number of significant digits (no leading or trailing zero)\n  var significantDigits = 0;\n  // Total number of significand digits read\n  var nDigitsRead = 0;\n  // Total number of digits (no leading zeros)\n  var nDigits = 0;\n  // The number of the digits after radix\n  var radixPosition = 0;\n  // The index of the first non-zero in *str*\n  var firstNonZero = 0;\n\n  // Digits Array\n  var digits = [0];\n  // The number of digits in digits\n  var nDigitsStored = 0;\n  // Insertion pointer for digits\n  var digitsInsert = 0;\n  // The index of the first non-zero digit\n  var firstDigit = 0;\n  // The index of the last digit\n  var lastDigit = 0;\n\n  // Exponent\n  var exponent = 0;\n  // loop index over array\n  var i = 0;\n  // The high 17 digits of the significand\n  var significandHigh = [0, 0];\n  // The low 17 digits of the significand\n  var significandLow = [0, 0];\n  // The biased exponent\n  var biasedExponent = 0;\n\n  // Read index\n  var index = 0;\n\n  // Trim the string\n  string = string.trim();\n\n  // Naively prevent against REDOS attacks.\n  // TODO: implementing a custom parsing for this, or refactoring the regex would yield\n  //       further gains.\n  if (string.length >= 7000) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Results\n  var stringMatch = string.match(PARSE_STRING_REGEXP);\n  var infMatch = string.match(PARSE_INF_REGEXP);\n  var nanMatch = string.match(PARSE_NAN_REGEXP);\n\n  // Validate the string\n  if (!stringMatch && !infMatch && !nanMatch || string.length === 0) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Check if we have an illegal exponent format\n  if (stringMatch && stringMatch[4] && stringMatch[2] === undefined) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Get the negative or positive sign\n  if (string[index] === '+' || string[index] === '-') {\n    isNegative = string[index++] === '-';\n  }\n\n  // Check if user passed Infinity or NaN\n  if (!isDigit(string[index]) && string[index] !== '.') {\n    if (string[index] === 'i' || string[index] === 'I') {\n      return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if (string[index] === 'N') {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    }\n  }\n\n  // Read all the digits\n  while (isDigit(string[index]) || string[index] === '.') {\n    if (string[index] === '.') {\n      if (sawRadix) {\n        return new Decimal128(utils.toBuffer(NAN_BUFFER));\n      }\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n    if (nDigitsStored < 34) {\n      if (string[index] !== '0' || foundNonZero) {\n        if (!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n        foundNonZero = true;\n\n        // Only store 34 digits\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n    if (foundNonZero) {\n      nDigits = nDigits + 1;\n    }\n    if (sawRadix) {\n      radixPosition = radixPosition + 1;\n    }\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n  if (sawRadix && !nDigitsRead) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Read exponent if exists\n  if (string[index] === 'e' || string[index] === 'E') {\n    // Read exponent digits\n    var match = string.substr(++index).match(EXPONENT_REGEX);\n\n    // No digits read\n    if (!match || !match[2]) {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    }\n\n    // Get exponent\n    exponent = parseInt(match[0], 10);\n\n    // Adjust the index\n    index = index + match[0].length;\n  }\n\n  // Return not a number\n  if (string[index]) {\n    return new Decimal128(utils.toBuffer(NAN_BUFFER));\n  }\n\n  // Done reading input\n  // Find first non-zero digit in digits\n  firstDigit = 0;\n  if (!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n    if (exponent !== 0 && significantDigits !== 1) {\n      while (string[firstNonZero + significantDigits - 1] === '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  }\n\n  // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n\n  // Overflow prevention\n  if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  }\n\n  // Attempt to normalize the exponent\n  while (exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n    if (lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n    exponent = exponent - 1;\n  }\n  while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit\n    if (lastDigit === 0) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n    if (nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n    if (exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n  }\n\n  // Round\n  // We've normalized the exponent, but might still need to round.\n  if (lastDigit - firstDigit + 1 < significantDigits && string[significantDigits] !== '0') {\n    var endOfString = nDigitsRead;\n\n    // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n    if (sawRadix && exponent === EXPONENT_MIN) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n    var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    var roundBit = 0;\n    if (roundDigit >= 5) {\n      roundBit = 1;\n      if (roundDigit === 5) {\n        roundBit = digits[lastDigit] % 2 === 1;\n        for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if (parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n    if (roundBit) {\n      var dIdx = lastDigit;\n      for (; dIdx >= 0; dIdx--) {\n        if (++digits[dIdx] > 9) {\n          digits[dIdx] = 0;\n\n          // overflowed most significant digit\n          if (dIdx === 0) {\n            if (exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  // Encode significand\n  // The high 17 digits of the significand\n  significandHigh = Long.fromNumber(0);\n  // The low 17 digits of the significand\n  significandLow = Long.fromNumber(0);\n\n  // read a zero\n  if (significantDigits === 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if (lastDigit - firstDigit < 17) {\n    dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n    for (; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n  var significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n  significand.low = significand.low.add(significandLow);\n  if (lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  }\n\n  // Biased exponent\n  biasedExponent = exponent + EXPONENT_BIAS;\n  var dec = {\n    low: Long.fromNumber(0),\n    high: Long.fromNumber(0)\n  };\n\n  // Encode combination, exponent, and significand.\n  if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber)) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n  dec.low = significand.low;\n\n  // Encode sign\n  if (isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  }\n\n  // Encode into a buffer\n  var buffer = utils.allocBuffer(16);\n  index = 0;\n\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.low.low_ & 0xff;\n  buffer[index++] = dec.low.low_ >> 8 & 0xff;\n  buffer[index++] = dec.low.low_ >> 16 & 0xff;\n  buffer[index++] = dec.low.low_ >> 24 & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.low.high_ & 0xff;\n  buffer[index++] = dec.low.high_ >> 8 & 0xff;\n  buffer[index++] = dec.low.high_ >> 16 & 0xff;\n  buffer[index++] = dec.low.high_ >> 24 & 0xff;\n\n  // Encode the high 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.high.low_ & 0xff;\n  buffer[index++] = dec.high.low_ >> 8 & 0xff;\n  buffer[index++] = dec.high.low_ >> 16 & 0xff;\n  buffer[index++] = dec.high.low_ >> 24 & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.high.high_ & 0xff;\n  buffer[index++] = dec.high.high_ >> 8 & 0xff;\n  buffer[index++] = dec.high.high_ >> 16 & 0xff;\n  buffer[index++] = dec.high.high_ >> 24 & 0xff;\n\n  // Return the new Decimal128\n  return new Decimal128(buffer);\n};\n\n// Extract least significant 5 bits\nvar COMBINATION_MASK = 0x1f;\n// Extract least significant 14 bits\nvar EXPONENT_MASK = 0x3fff;\n// Value of combination field for Inf\nvar COMBINATION_INFINITY = 30;\n// Value of combination field for NaN\nvar COMBINATION_NAN = 31;\n// Value of combination field for NaN\n// var COMBINATION_SNAN = 32;\n// decimal128 exponent bias\nEXPONENT_BIAS = 6176;\n\n/**\n * Create a string representation of the raw Decimal128 value\n *\n * @method\n * @return {string} returns a Decimal128 string representation.\n */\nDecimal128.prototype.toString = function () {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n\n  // bits 0 - 31\n  var high;\n  // bits 32 - 63\n  var midh;\n  // bits 64 - 95\n  var midl;\n  // bits 96 - 127\n  var low;\n  // bits 1 - 5\n  var combination;\n  // decoded biased exponent (14 bits)\n  var biased_exponent;\n  // the number of significand digits\n  var significand_digits = 0;\n  // the base-10 digits in the significand\n  var significand = new Array(36);\n  for (var i = 0; i < significand.length; i++) significand[i] = 0;\n  // read pointer into significand\n  var index = 0;\n\n  // unbiased exponent\n  var exponent;\n  // the exponent if scientific notation is used\n  var scientific_exponent;\n\n  // true if the number is zero\n  var is_zero = false;\n\n  // the most signifcant significand bits (50-46)\n  var significand_msb;\n  // temporary storage for significand decoding\n  var significand128 = {\n    parts: new Array(4)\n  };\n  // indexing variables\n  i;\n  var j, k;\n\n  // Output string\n  var string = [];\n\n  // Unpack index\n  index = 0;\n\n  // Buffer reference\n  var buffer = this.bytes;\n\n  // Unpack the low 64bits into a long\n  low = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  midl = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n\n  // Unpack the high 64bits into a long\n  midh = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  high = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n\n  // Unpack index\n  index = 0;\n\n  // Create the state of the decimal\n  var dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high)\n  };\n  if (dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  }\n\n  // Decode combination field and exponent\n  combination = high >> 26 & COMBINATION_MASK;\n  if (combination >> 3 === 3) {\n    // Check for 'special' values\n    if (combination === COMBINATION_INFINITY) {\n      return string.join('') + 'Infinity';\n    } else if (combination === COMBINATION_NAN) {\n      return 'NaN';\n    } else {\n      biased_exponent = high >> 15 & EXPONENT_MASK;\n      significand_msb = 0x08 + (high >> 14 & 0x01);\n    }\n  } else {\n    significand_msb = high >> 14 & 0x07;\n    biased_exponent = high >> 17 & EXPONENT_MASK;\n  }\n  exponent = biased_exponent - EXPONENT_BIAS;\n\n  // Create string of significand digits\n\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n  if (significand128.parts[0] === 0 && significand128.parts[1] === 0 && significand128.parts[2] === 0 && significand128.parts[3] === 0) {\n    is_zero = true;\n  } else {\n    for (k = 3; k >= 0; k--) {\n      var least_digits = 0;\n      // Peform the divide\n      var result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low_;\n\n      // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n      if (!least_digits) continue;\n      for (j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10;\n        // least_digits = Math.round(least_digits / 10);\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  }\n\n  // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n  if (is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    i = 0;\n    while (!significand[index]) {\n      i++;\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n  scientific_exponent = significand_digits - 1 + exponent;\n\n  // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n\n  if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n    // Scientific format\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n    if (significand_digits) {\n      string.push('.');\n    }\n    for (i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    }\n\n    // Exponent\n    string.push('E');\n    if (scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if (exponent >= 0) {\n      for (i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      var radix_position = significand_digits + exponent;\n\n      // non-zero digits before radix\n      if (radix_position > 0) {\n        for (i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n      string.push('.');\n      // add leading zeros after radix\n      while (radix_position++ < 0) {\n        string.push('0');\n      }\n      for (i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n  return string.join('');\n};\nDecimal128.prototype.toJSON = function () {\n  return {\n    $numberDecimal: this.toString()\n  };\n};\nmodule.exports = Decimal128;\nmodule.exports.Decimal128 = Decimal128;","map":{"version":3,"names":["Long","require","PARSE_STRING_REGEXP","PARSE_INF_REGEXP","PARSE_NAN_REGEXP","EXPONENT_MAX","EXPONENT_MIN","EXPONENT_BIAS","MAX_DIGITS","NAN_BUFFER","reverse","INF_NEGATIVE_BUFFER","INF_POSITIVE_BUFFER","EXPONENT_REGEX","utils","isDigit","value","isNaN","parseInt","divideu128","DIVISOR","fromNumber","_rem","i","parts","quotient","rem","shiftLeft","add","div","low_","modulo","multiply64x2","left","right","high","low","leftHigh","shiftRightUnsigned","leftLow","getLowBits","rightHigh","rightLow","productHigh","multiply","productMid","productMid2","productLow","lessThan","uhleft","high_","uhright","ulleft","ulright","Decimal128","bytes","_bsontype","fromString","string","isNegative","sawRadix","foundNonZero","significantDigits","nDigitsRead","nDigits","radixPosition","firstNonZero","digits","nDigitsStored","digitsInsert","firstDigit","lastDigit","exponent","significandHigh","significandLow","biasedExponent","index","trim","length","Error","stringMatch","match","infMatch","nanMatch","undefined","toBuffer","substr","digitsString","join","endOfString","roundDigit","roundBit","dIdx","significand","dec","and","equals","or","buffer","allocBuffer","COMBINATION_MASK","EXPONENT_MASK","COMBINATION_INFINITY","COMBINATION_NAN","prototype","toString","midh","midl","combination","biased_exponent","significand_digits","Array","scientific_exponent","is_zero","significand_msb","significand128","j","k","ZERO","push","least_digits","result","Math","floor","radix_position","max","toJSON","$numberDecimal","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/bson/lib/bson/decimal128.js"],"sourcesContent":["'use strict';\n\nvar Long = require('./long');\n\nvar PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nvar PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nvar PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\n\nvar EXPONENT_MAX = 6111;\nvar EXPONENT_MIN = -6176;\nvar EXPONENT_BIAS = 6176;\nvar MAX_DIGITS = 34;\n\n// Nan value bits as 32 bit values (due to lack of longs)\nvar NAN_BUFFER = [\n  0x7c,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n// Infinity value bits 32 bit values (due to lack of longs)\nvar INF_NEGATIVE_BUFFER = [\n  0xf8,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\nvar INF_POSITIVE_BUFFER = [\n  0x78,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n\nvar EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\n\nvar utils = require('./parser/utils');\n\n// Detect if the value is a digit\nvar isDigit = function(value) {\n  return !isNaN(parseInt(value, 10));\n};\n\n// Divide two uint128 values\nvar divideu128 = function(value) {\n  var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  var _rem = Long.fromNumber(0);\n  var i = 0;\n\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return { quotient: value, rem: _rem };\n  }\n\n  for (i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32);\n    // Add the divided to _rem\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low_;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return { quotient: value, rem: _rem };\n};\n\n// Multiply two Long values and return the 128 bit value\nvar multiply64x2 = function(left, right) {\n  if (!left && !right) {\n    return { high: Long.fromNumber(0), low: Long.fromNumber(0) };\n  }\n\n  var leftHigh = left.shiftRightUnsigned(32);\n  var leftLow = new Long(left.getLowBits(), 0);\n  var rightHigh = right.shiftRightUnsigned(32);\n  var rightLow = new Long(right.getLowBits(), 0);\n\n  var productHigh = leftHigh.multiply(rightHigh);\n  var productMid = leftHigh.multiply(rightLow);\n  var productMid2 = leftLow.multiply(rightHigh);\n  var productLow = leftLow.multiply(rightLow);\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0)\n    .add(productMid2)\n    .add(productLow.shiftRightUnsigned(32));\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n\n  // Return the 128 bit result\n  return { high: productHigh, low: productLow };\n};\n\nvar lessThan = function(left, right) {\n  // Make values unsigned\n  var uhleft = left.high_ >>> 0;\n  var uhright = right.high_ >>> 0;\n\n  // Compare high bits first\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft === uhright) {\n    var ulleft = left.low_ >>> 0;\n    var ulright = right.low_ >>> 0;\n    if (ulleft < ulright) return true;\n  }\n\n  return false;\n};\n\n// var longtoHex = function(value) {\n//   var buffer = utils.allocBuffer(8);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value.low_ & 0xff;\n//   buffer[index++] = (value.low_ >> 8) & 0xff;\n//   buffer[index++] = (value.low_ >> 16) & 0xff;\n//   buffer[index++] = (value.low_ >> 24) & 0xff;\n//   // Encode high bits\n//   buffer[index++] = value.high_ & 0xff;\n//   buffer[index++] = (value.high_ >> 8) & 0xff;\n//   buffer[index++] = (value.high_ >> 16) & 0xff;\n//   buffer[index++] = (value.high_ >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n// var int32toHex = function(value) {\n//   var buffer = utils.allocBuffer(4);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value & 0xff;\n//   buffer[index++] = (value >> 8) & 0xff;\n//   buffer[index++] = (value >> 16) & 0xff;\n//   buffer[index++] = (value >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n/**\n * A class representation of the BSON Decimal128 type.\n *\n * @class\n * @param {Buffer} bytes a buffer containing the raw Decimal128 bytes.\n * @return {Double}\n */\nvar Decimal128 = function(bytes) {\n  this._bsontype = 'Decimal128';\n  this.bytes = bytes;\n};\n\n/**\n * Create a Decimal128 instance from a string representation\n *\n * @method\n * @param {string} string a numeric string representation.\n * @return {Decimal128} returns a Decimal128 instance.\n */\nDecimal128.fromString = function(string) {\n  // Parse state tracking\n  var isNegative = false;\n  var sawRadix = false;\n  var foundNonZero = false;\n\n  // Total number of significant digits (no leading or trailing zero)\n  var significantDigits = 0;\n  // Total number of significand digits read\n  var nDigitsRead = 0;\n  // Total number of digits (no leading zeros)\n  var nDigits = 0;\n  // The number of the digits after radix\n  var radixPosition = 0;\n  // The index of the first non-zero in *str*\n  var firstNonZero = 0;\n\n  // Digits Array\n  var digits = [0];\n  // The number of digits in digits\n  var nDigitsStored = 0;\n  // Insertion pointer for digits\n  var digitsInsert = 0;\n  // The index of the first non-zero digit\n  var firstDigit = 0;\n  // The index of the last digit\n  var lastDigit = 0;\n\n  // Exponent\n  var exponent = 0;\n  // loop index over array\n  var i = 0;\n  // The high 17 digits of the significand\n  var significandHigh = [0, 0];\n  // The low 17 digits of the significand\n  var significandLow = [0, 0];\n  // The biased exponent\n  var biasedExponent = 0;\n\n  // Read index\n  var index = 0;\n\n  // Trim the string\n  string = string.trim();\n\n  // Naively prevent against REDOS attacks.\n  // TODO: implementing a custom parsing for this, or refactoring the regex would yield\n  //       further gains.\n  if (string.length >= 7000) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Results\n  var stringMatch = string.match(PARSE_STRING_REGEXP);\n  var infMatch = string.match(PARSE_INF_REGEXP);\n  var nanMatch = string.match(PARSE_NAN_REGEXP);\n\n  // Validate the string\n  if ((!stringMatch && !infMatch && !nanMatch) || string.length === 0) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Check if we have an illegal exponent format\n  if (stringMatch && stringMatch[4] && stringMatch[2] === undefined) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Get the negative or positive sign\n  if (string[index] === '+' || string[index] === '-') {\n    isNegative = string[index++] === '-';\n  }\n\n  // Check if user passed Infinity or NaN\n  if (!isDigit(string[index]) && string[index] !== '.') {\n    if (string[index] === 'i' || string[index] === 'I') {\n      return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if (string[index] === 'N') {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    }\n  }\n\n  // Read all the digits\n  while (isDigit(string[index]) || string[index] === '.') {\n    if (string[index] === '.') {\n      if (sawRadix) {\n        return new Decimal128(utils.toBuffer(NAN_BUFFER));\n      }\n\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n\n    if (nDigitsStored < 34) {\n      if (string[index] !== '0' || foundNonZero) {\n        if (!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n\n        foundNonZero = true;\n\n        // Only store 34 digits\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n\n    if (foundNonZero) {\n      nDigits = nDigits + 1;\n    }\n\n    if (sawRadix) {\n      radixPosition = radixPosition + 1;\n    }\n\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n\n  if (sawRadix && !nDigitsRead) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Read exponent if exists\n  if (string[index] === 'e' || string[index] === 'E') {\n    // Read exponent digits\n    var match = string.substr(++index).match(EXPONENT_REGEX);\n\n    // No digits read\n    if (!match || !match[2]) {\n      return new Decimal128(utils.toBuffer(NAN_BUFFER));\n    }\n\n    // Get exponent\n    exponent = parseInt(match[0], 10);\n\n    // Adjust the index\n    index = index + match[0].length;\n  }\n\n  // Return not a number\n  if (string[index]) {\n    return new Decimal128(utils.toBuffer(NAN_BUFFER));\n  }\n\n  // Done reading input\n  // Find first non-zero digit in digits\n  firstDigit = 0;\n\n  if (!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n\n    if (exponent !== 0 && significantDigits !== 1) {\n      while (string[firstNonZero + significantDigits - 1] === '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  }\n\n  // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n\n  // Overflow prevention\n  if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  }\n\n  // Attempt to normalize the exponent\n  while (exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n\n    if (lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n\n    exponent = exponent - 1;\n  }\n\n  while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit\n    if (lastDigit === 0) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n\n    if (nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n\n    if (exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n  }\n\n  // Round\n  // We've normalized the exponent, but might still need to round.\n  if (lastDigit - firstDigit + 1 < significantDigits && string[significantDigits] !== '0') {\n    var endOfString = nDigitsRead;\n\n    // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n    if (sawRadix && exponent === EXPONENT_MIN) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n\n    var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    var roundBit = 0;\n\n    if (roundDigit >= 5) {\n      roundBit = 1;\n\n      if (roundDigit === 5) {\n        roundBit = digits[lastDigit] % 2 === 1;\n\n        for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if (parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n\n    if (roundBit) {\n      var dIdx = lastDigit;\n\n      for (; dIdx >= 0; dIdx--) {\n        if (++digits[dIdx] > 9) {\n          digits[dIdx] = 0;\n\n          // overflowed most significant digit\n          if (dIdx === 0) {\n            if (exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(\n                utils.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER)\n              );\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  // Encode significand\n  // The high 17 digits of the significand\n  significandHigh = Long.fromNumber(0);\n  // The low 17 digits of the significand\n  significandLow = Long.fromNumber(0);\n\n  // read a zero\n  if (significantDigits === 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if (lastDigit - firstDigit < 17) {\n    dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n\n    significandLow = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n\n  var significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n\n  significand.low = significand.low.add(significandLow);\n\n  if (lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  }\n\n  // Biased exponent\n  biasedExponent = exponent + EXPONENT_BIAS;\n  var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n\n  // Encode combination, exponent, and significand.\n  if (\n    significand.high\n      .shiftRightUnsigned(49)\n      .and(Long.fromNumber(1))\n      .equals(Long.fromNumber)\n  ) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(\n      Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47))\n    );\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n\n  dec.low = significand.low;\n\n  // Encode sign\n  if (isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  }\n\n  // Encode into a buffer\n  var buffer = utils.allocBuffer(16);\n  index = 0;\n\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.low.low_ & 0xff;\n  buffer[index++] = (dec.low.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.low.high_ & 0xff;\n  buffer[index++] = (dec.low.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 24) & 0xff;\n\n  // Encode the high 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.high.low_ & 0xff;\n  buffer[index++] = (dec.high.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.high.high_ & 0xff;\n  buffer[index++] = (dec.high.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 24) & 0xff;\n\n  // Return the new Decimal128\n  return new Decimal128(buffer);\n};\n\n// Extract least significant 5 bits\nvar COMBINATION_MASK = 0x1f;\n// Extract least significant 14 bits\nvar EXPONENT_MASK = 0x3fff;\n// Value of combination field for Inf\nvar COMBINATION_INFINITY = 30;\n// Value of combination field for NaN\nvar COMBINATION_NAN = 31;\n// Value of combination field for NaN\n// var COMBINATION_SNAN = 32;\n// decimal128 exponent bias\nEXPONENT_BIAS = 6176;\n\n/**\n * Create a string representation of the raw Decimal128 value\n *\n * @method\n * @return {string} returns a Decimal128 string representation.\n */\nDecimal128.prototype.toString = function() {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n\n  // bits 0 - 31\n  var high;\n  // bits 32 - 63\n  var midh;\n  // bits 64 - 95\n  var midl;\n  // bits 96 - 127\n  var low;\n  // bits 1 - 5\n  var combination;\n  // decoded biased exponent (14 bits)\n  var biased_exponent;\n  // the number of significand digits\n  var significand_digits = 0;\n  // the base-10 digits in the significand\n  var significand = new Array(36);\n  for (var i = 0; i < significand.length; i++) significand[i] = 0;\n  // read pointer into significand\n  var index = 0;\n\n  // unbiased exponent\n  var exponent;\n  // the exponent if scientific notation is used\n  var scientific_exponent;\n\n  // true if the number is zero\n  var is_zero = false;\n\n  // the most signifcant significand bits (50-46)\n  var significand_msb;\n  // temporary storage for significand decoding\n  var significand128 = { parts: new Array(4) };\n  // indexing variables\n  i;\n  var j, k;\n\n  // Output string\n  var string = [];\n\n  // Unpack index\n  index = 0;\n\n  // Buffer reference\n  var buffer = this.bytes;\n\n  // Unpack the low 64bits into a long\n  low =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  midl =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack the high 64bits into a long\n  midh =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  high =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack index\n  index = 0;\n\n  // Create the state of the decimal\n  var dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high)\n  };\n\n  if (dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  }\n\n  // Decode combination field and exponent\n  combination = (high >> 26) & COMBINATION_MASK;\n\n  if (combination >> 3 === 3) {\n    // Check for 'special' values\n    if (combination === COMBINATION_INFINITY) {\n      return string.join('') + 'Infinity';\n    } else if (combination === COMBINATION_NAN) {\n      return 'NaN';\n    } else {\n      biased_exponent = (high >> 15) & EXPONENT_MASK;\n      significand_msb = 0x08 + ((high >> 14) & 0x01);\n    }\n  } else {\n    significand_msb = (high >> 14) & 0x07;\n    biased_exponent = (high >> 17) & EXPONENT_MASK;\n  }\n\n  exponent = biased_exponent - EXPONENT_BIAS;\n\n  // Create string of significand digits\n\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n\n  if (\n    significand128.parts[0] === 0 &&\n    significand128.parts[1] === 0 &&\n    significand128.parts[2] === 0 &&\n    significand128.parts[3] === 0\n  ) {\n    is_zero = true;\n  } else {\n    for (k = 3; k >= 0; k--) {\n      var least_digits = 0;\n      // Peform the divide\n      var result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low_;\n\n      // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n      if (!least_digits) continue;\n\n      for (j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10;\n        // least_digits = Math.round(least_digits / 10);\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  }\n\n  // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n  if (is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    i = 0;\n\n    while (!significand[index]) {\n      i++;\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n\n  scientific_exponent = significand_digits - 1 + exponent;\n\n  // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n\n  if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n    // Scientific format\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n\n    if (significand_digits) {\n      string.push('.');\n    }\n\n    for (i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    }\n\n    // Exponent\n    string.push('E');\n    if (scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if (exponent >= 0) {\n      for (i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      var radix_position = significand_digits + exponent;\n\n      // non-zero digits before radix\n      if (radix_position > 0) {\n        for (i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n\n      string.push('.');\n      // add leading zeros after radix\n      while (radix_position++ < 0) {\n        string.push('0');\n      }\n\n      for (i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n\n  return string.join('');\n};\n\nDecimal128.prototype.toJSON = function() {\n  return { $numberDecimal: this.toString() };\n};\n\nmodule.exports = Decimal128;\nmodule.exports.Decimal128 = Decimal128;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}