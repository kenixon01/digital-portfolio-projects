{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\nconst AuthProvider = require('./auth_provider').AuthProvider;\nclass MongoCR extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command(`${source}.$cmd`, {\n      getnonce: 1\n    }, (err, result) => {\n      let nonce = null;\n      let key = null;\n\n      // Get nonce\n      if (err == null) {\n        const r = result.result;\n        nonce = r.nonce;\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n        // Generate keys used for authentication\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex');\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      connection.command(`${source}.$cmd`, authenticateCommand, callback);\n    });\n  }\n}\nmodule.exports = MongoCR;","map":{"version":3,"names":["crypto","require","AuthProvider","MongoCR","auth","authContext","callback","connection","credentials","username","password","source","command","getnonce","err","result","nonce","key","r","md5","createHash","update","hash_password","digest","authenticateCommand","authenticate","user","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/auth/mongocr.js"],"sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nclass MongoCR extends AuthProvider {\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n\n    connection.command(`${source}.$cmd`, { getnonce: 1 }, (err, result) => {\n      let nonce = null;\n      let key = null;\n\n      // Get nonce\n      if (err == null) {\n        const r = result.result;\n        nonce = r.nonce;\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n        // Generate keys used for authentication\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex');\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n\n      connection.command(`${source}.$cmd`, authenticateCommand, callback);\n    });\n  }\n}\n\nmodule.exports = MongoCR;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAiB,CAAC,CAACC,YAAY;AAE5D,MAAMC,OAAO,SAASD,YAAY,CAAC;EACjCE,IAAI,CAACC,WAAW,EAAEC,QAAQ,EAAE;IAC1B,MAAMC,UAAU,GAAGF,WAAW,CAACE,UAAU;IACzC,MAAMC,WAAW,GAAGH,WAAW,CAACG,WAAW;IAC3C,MAAMC,QAAQ,GAAGD,WAAW,CAACC,QAAQ;IACrC,MAAMC,QAAQ,GAAGF,WAAW,CAACE,QAAQ;IACrC,MAAMC,MAAM,GAAGH,WAAW,CAACG,MAAM;IAEjCJ,UAAU,CAACK,OAAO,CAAE,GAAED,MAAO,OAAM,EAAE;MAAEE,QAAQ,EAAE;IAAE,CAAC,EAAE,CAACC,GAAG,EAAEC,MAAM,KAAK;MACrE,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIC,GAAG,GAAG,IAAI;;MAEd;MACA,IAAIH,GAAG,IAAI,IAAI,EAAE;QACf,MAAMI,CAAC,GAAGH,MAAM,CAACA,MAAM;QACvBC,KAAK,GAAGE,CAAC,CAACF,KAAK;QACf;QACA,IAAIG,GAAG,GAAGnB,MAAM,CAACoB,UAAU,CAAC,KAAK,CAAC;QAClC;QACAD,GAAG,CAACE,MAAM,CAACZ,QAAQ,GAAG,SAAS,GAAGC,QAAQ,EAAE,MAAM,CAAC;QACnD,MAAMY,aAAa,GAAGH,GAAG,CAACI,MAAM,CAAC,KAAK,CAAC;QACvC;QACAJ,GAAG,GAAGnB,MAAM,CAACoB,UAAU,CAAC,KAAK,CAAC;QAC9BD,GAAG,CAACE,MAAM,CAACL,KAAK,GAAGP,QAAQ,GAAGa,aAAa,EAAE,MAAM,CAAC;QACpDL,GAAG,GAAGE,GAAG,CAACI,MAAM,CAAC,KAAK,CAAC;MACzB;MAEA,MAAMC,mBAAmB,GAAG;QAC1BC,YAAY,EAAE,CAAC;QACfC,IAAI,EAAEjB,QAAQ;QACdO,KAAK;QACLC;MACF,CAAC;MAEDV,UAAU,CAACK,OAAO,CAAE,GAAED,MAAO,OAAM,EAAEa,mBAAmB,EAAElB,QAAQ,CAAC;IACrE,CAAC,CAAC;EACJ;AACF;AAEAqB,MAAM,CAACC,OAAO,GAAGzB,OAAO"},"metadata":{},"sourceType":"script"}