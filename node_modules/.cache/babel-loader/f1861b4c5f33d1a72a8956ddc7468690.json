{"ast":null,"code":"'use strict';\n\nconst inherits = require('util').inherits;\nconst f = require('util').format;\nconst EventEmitter = require('events').EventEmitter;\nconst CoreCursor = require('../cursor').CoreCursor;\nconst Logger = require('../connection/logger');\nconst retrieveBSON = require('../connection/utils').retrieveBSON;\nconst MongoError = require('../error').MongoError;\nconst Server = require('./server');\nconst diff = require('./shared').diff;\nconst cloneOptions = require('./shared').cloneOptions;\nconst SessionMixins = require('./shared').SessionMixins;\nconst isRetryableWritesSupported = require('./shared').isRetryableWritesSupported;\nconst relayEvents = require('../utils').relayEvents;\nconst BSON = retrieveBSON();\nconst getMMAPError = require('./shared').getMMAPError;\nconst makeClientMetadata = require('../utils').makeClientMetadata;\nconst legacyIsRetryableWriteError = require('./shared').legacyIsRetryableWriteError;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n */\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYING, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYING, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(f('Mongos with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]', self.id, self.state, newState, legalStates));\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.bsonRegExp=false] By default, regex returned from MDB will be native to the language. Setting to true will ensure that a BSON.BSONRegExp object is returned.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Mongos = function (seedlist, options) {\n  options = options || {};\n\n  // Get replSet Id\n  this.id = id++;\n\n  // deduplicate seedlist\n  if (Array.isArray(seedlist)) {\n    seedlist = seedlist.reduce((seeds, seed) => {\n      if (seeds.find(s => s.host === seed.host && s.port === seed.port)) {\n        return seeds;\n      }\n      seeds.push(seed);\n      return seeds;\n    }, []);\n  }\n\n  // Internal state\n  this.s = {\n    options: Object.assign({\n      metadata: makeClientMetadata(options)\n    }, options),\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15\n  };\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if (this.s.logger.isWarn() && this.s.options.socketTimeout !== 0 && this.s.options.socketTimeout < this.s.haInterval) {\n    this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts', this.s.options.socketTimeout, this.s.haInterval));\n  }\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n\n  // Current proxies we are connecting to\n  this.connectingProxies = [];\n  // Currently connected proxies\n  this.connectedProxies = [];\n  // Disconnected proxies\n  this.disconnectedProxies = [];\n  // Index of proxy to run operations against\n  this.index = 0;\n  // High availability timeout id\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n\n  // Description of the Replicaset\n  this.topologyDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  };\n\n  // Highest clusterTime seen in responses from the current deployment\n  this.clusterTime = null;\n\n  // Add event listener\n  EventEmitter.call(this);\n};\ninherits(Mongos, EventEmitter);\nObject.assign(Mongos.prototype, SessionMixins);\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function () {\n    return 'mongos';\n  }\n});\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function () {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function () {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\nconst SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];\nfunction destroyServer(server, options, callback) {\n  options = options || {};\n  SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, callback);\n}\n\n/**\n * Initiate server connect\n */\nMongos.prototype.connect = function (options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n\n  // Create server instances\n  var servers = this.s.seedlist.map(function (x) {\n    const server = new Server(Object.assign({}, self.s.options, x, options, {\n      reconnect: false,\n      monitoring: false,\n      parent: self\n    }));\n    relayEvents(server, self, ['serverDescriptionChanged']);\n    return server;\n  });\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', {\n    topologyId: this.id\n  });\n\n  // Start all server connections\n  connectProxies(self, servers);\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function (credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\nfunction handleEvent(self) {\n  return function () {\n    if (self.state === DESTROYED || self.state === DESTROYING) {\n      return;\n    }\n\n    // Move to list of disconnectedProxies\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n    // Emit the left signal\n    self.emit('left', 'mongos', this);\n    // Emit the sdam event\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\nfunction handleInitialConnectEvent(self, event) {\n  return function () {\n    var _this = this;\n\n    // Destroy the instance\n    if (self.state === DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n      // Move from connectingProxies\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if (event === 'connect') {\n      // Get last known ismaster\n      self.ismaster = _this.lastIsMaster();\n\n      // Is this not a proxy, remove t\n      if (self.ismaster.msg === 'isdbgrid') {\n        // Add to the connectd list\n        for (let i = 0; i < self.connectedProxies.length; i++) {\n          if (self.connectedProxies[i].name === _this.name) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);\n            // Emit the initial topology\n            emitTopologyDescriptionChanged(self);\n            _this.destroy();\n            return self.emit('failed', _this);\n          }\n        }\n\n        // Remove the handlers\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _this.on('error', handleEvent(self, 'error'));\n        _this.on('close', handleEvent(self, 'close'));\n        _this.on('timeout', handleEvent(self, 'timeout'));\n        _this.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move from connecting proxies connected\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _this);\n        // Emit the joined event\n        self.emit('joined', 'mongos', _this);\n      } else {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          var message = 'expected mongos proxy, but found replicaset member mongod for server %s';\n          // We have a standalone server\n          if (!self.ismaster.hosts) {\n            message = 'expected mongos proxy, but found standalone mongod for server %s';\n          }\n          self.s.logger.warn(f(message, _this.name));\n        }\n\n        // This is not a mongos proxy, destroy and remove it completely\n        _this.destroy(true);\n        removeProxyFrom(self.connectingProxies, _this);\n        // Emit the left event\n        self.emit('left', 'server', _this);\n        // Emit failed event\n        self.emit('failed', _this);\n      }\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      // Emit the left event\n      self.emit('left', 'mongos', this);\n      // Emit failed event\n      self.emit('failed', this);\n    }\n\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n\n    // Trigger topologyMonitor\n    if (self.connectingProxies.length === 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED);\n        // Emit the connect event\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length === 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(f('no mongos proxies found in seed list, did you mean to connect to a replicaset'));\n        }\n\n        // Emit the error that no proxies were found\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      }\n\n      // Topology monitor\n      topologyMonitor(self, {\n        firstConnect: true\n      });\n    }\n  };\n}\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n  function connect(server, timeoutInterval) {\n    setTimeout(function () {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      });\n\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  servers.forEach(server => connect(server, timeoutInterval++));\n}\nfunction pickProxy(self, session) {\n  // TODO: Destructure :)\n  const transaction = session && session.transaction;\n  if (transaction && transaction.server) {\n    if (transaction.server.isConnected()) {\n      return transaction.server;\n    } else {\n      transaction.unpinServer();\n    }\n  }\n\n  // Get the currently connected Proxies\n  var connectedProxies = self.connectedProxies.slice(0);\n\n  // Set lower bound\n  var lowerBoundLatency = Number.MAX_VALUE;\n\n  // Determine the lower bound for the Proxies\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  }\n\n  // Filter out the possible servers\n  connectedProxies = connectedProxies.filter(function (server) {\n    if (server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS && server.isConnected()) {\n      return true;\n    }\n  });\n  let proxy;\n\n  // We have no connectedProxies pick first of the connected ones\n  if (connectedProxies.length === 0) {\n    proxy = self.connectedProxies[0];\n  } else {\n    // Get proxy\n    proxy = connectedProxies[self.index % connectedProxies.length];\n    // Update the index\n    self.index = (self.index + 1) % connectedProxies.length;\n  }\n  if (transaction && transaction.isActive && proxy && proxy.isConnected()) {\n    transaction.pinServer(proxy);\n  }\n\n  // Return the proxy\n  return proxy;\n}\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name === proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n  to.push(proxy);\n}\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length;\n\n  // Handle events\n  var _handleEvent = function (self, event) {\n    return function () {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n      if (event === 'connect') {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n          return _self.destroy();\n        }\n\n        // Remove the handlers\n        for (var i = 0; i < handlers.length; i++) {\n          _self.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _self.on('error', handleEvent(self, 'error'));\n        _self.on('close', handleEvent(self, 'close'));\n        _self.on('timeout', handleEvent(self, 'timeout'));\n        _self.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move to the connected servers\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _self);\n        // Emit topology Change\n        emitTopologyDescriptionChanged(self);\n        // Emit joined event\n        self.emit('joined', 'mongos', _self);\n      } else {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      }\n\n      // Are we done finish up callback\n      if (count === 0) {\n        callback();\n      }\n    };\n  };\n\n  // No new servers\n  if (count === 0) {\n    return callback();\n  }\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function () {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(Object.assign({}, self.s.options, {\n        host: _server.name.split(':')[0],\n        port: parseInt(_server.name.split(':')[1], 10),\n        reconnect: false,\n        monitoring: false,\n        parent: self\n      }));\n      destroyServer(_server, {\n        force: true\n      });\n      removeProxyFrom(self.disconnectedProxies, _server);\n\n      // Relay the server description change\n      relayEvents(server, self, ['serverDescriptionChanged']);\n\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\n        address: server.name\n      });\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Connect to proxy\n      self.connectingProxies.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\nfunction topologyMonitor(self, options) {\n  options = options || {};\n\n  // no need to set up the monitor if we're already closed\n  if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n    return;\n  }\n\n  // Set momitoring timeout\n  self.haTimeoutId = setTimeout(function () {\n    if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n      return;\n    }\n\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    }\n\n    // Get the connectingServers\n    var proxies = self.connectedProxies.slice(0);\n    // Get the count\n    var count = proxies.length;\n\n    // If the count is zero schedule a new fast\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime();\n\n      // Emit the server heartbeat start\n      emitSDAMEvent(self, 'serverHeartbeatStarted', {\n        connectionId: _server.name\n      });\n\n      // Execute ismaster\n      _server.command('admin.$cmd', {\n        ismaster: true\n      }, {\n        monitoring: true,\n        socketTimeout: self.s.options.connectionTimeout || 2000\n      }, function (err, r) {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          // Move from connectingProxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n          _server.destroy();\n          return cb(err, r);\n        }\n\n        // Calculate latency\n        var latencyMS = new Date().getTime() - start;\n\n        // We had an error, remove it from the state\n        if (err) {\n          // Emit the server heartbeat failure\n          emitSDAMEvent(self, 'serverHeartbeatFailed', {\n            durationMS: latencyMS,\n            failure: err,\n            connectionId: _server.name\n          });\n          // Move from connected proxies to disconnected proxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n        } else {\n          // Update the server ismaster\n          _server.ismaster = r.result;\n          _server.lastIsMasterMS = latencyMS;\n\n          // Server heart beat event\n          emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n            durationMS: latencyMS,\n            reply: r.result,\n            connectionId: _server.name\n          });\n        }\n        cb(err, r);\n      });\n    }\n\n    // No proxies initiate monitor again\n    if (proxies.length === 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      }\n\n      // Attempt to connect to any unknown servers\n      return reconnectProxies(self, self.disconnectedProxies, function () {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          return;\n        }\n\n        // Are we connected ? emit connect event\n        if (self.state === CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\n          self.emit('close', self);\n        }\n\n        // Perform topology monitor\n        topologyMonitor(self);\n      });\n    }\n\n    // Ping all servers\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function () {\n        count = count - 1;\n        if (count === 0) {\n          if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n            return;\n          }\n\n          // Attempt to connect to any unknown servers\n          reconnectProxies(self, self.disconnectedProxies, function () {\n            if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n              return;\n            }\n\n            // Perform topology monitor\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function () {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nMongos.prototype.unref = function () {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function (x) {\n    x.unref();\n  });\n  clearTimeout(this.haTimeoutId);\n};\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nMongos.prototype.destroy = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  stateTransition(this, DESTROYING);\n  if (this.haTimeoutId) {\n    clearTimeout(this.haTimeoutId);\n  }\n  const proxies = this.connectedProxies.concat(this.connectingProxies);\n  let serverCount = proxies.length;\n  const serverDestroyed = () => {\n    serverCount--;\n    if (serverCount > 0) {\n      return;\n    }\n    emitTopologyDescriptionChanged(this);\n    emitSDAMEvent(this, 'topologyClosed', {\n      topologyId: this.id\n    });\n    stateTransition(this, DESTROYED);\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n  if (serverCount === 0) {\n    serverDestroyed();\n    return;\n  }\n\n  // Destroy all connecting servers\n  proxies.forEach(server => {\n    // Emit the sdam event\n    this.emit('serverClosed', {\n      topologyId: this.id,\n      address: server.name\n    });\n    destroyServer(server, options, serverDestroyed);\n    moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);\n  });\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function () {\n  return this.connectedProxies.length > 0;\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function () {\n  return this.state === DESTROYED;\n};\n\n//\n// Operations\n//\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  // Pick a server\n  let server = pickProxy(self, options.session);\n  // No server found error out\n  if (!server) return callback(new MongoError('no mongos proxy available'));\n  const willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(self) && !options.session.inTransaction() && options.explain === undefined;\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!legacyIsRetryableWriteError(err, self) || !willRetryWrite) {\n      err = getMMAPError(err);\n      return callback(err);\n    }\n\n    // Pick another server\n    server = pickProxy(self, options.session);\n\n    // No server found error out with original error\n    if (!server) {\n      return callback(err);\n    }\n    const newArgs = Object.assign({}, args, {\n      retrying: true\n    });\n    return executeWriteOperation(newArgs, options, callback);\n  };\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  }\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  // rerun the operation\n  server[op](ns, ops, options, handler);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({\n    self: this,\n    op: 'insert',\n    ns,\n    ops\n  }, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({\n    self: this,\n    op: 'update',\n    ns,\n    ops\n  }, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({\n    self: this,\n    op: 'remove',\n    ns,\n    ops\n  }, options, callback);\n};\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function (ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n  var self = this;\n\n  // Pick a proxy\n  var server = pickProxy(self, options.session);\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // No server returned we had an error\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Cloned options\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n  const willRetryWrite = !options.retrying && options.retryWrites && options.session && isRetryableWritesSupported(self) && !options.session.inTransaction() && isWriteCommand(cmd);\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!legacyIsRetryableWriteError(err, self)) {\n      return callback(err);\n    }\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, clonedOptions, {\n        retrying: true\n      });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n    return callback(err);\n  };\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    clonedOptions.session.incrementTransactionNumber();\n    clonedOptions.willRetryWrite = willRetryWrite;\n  }\n\n  // Execute the command\n  server.command(ns, cmd, clonedOptions, cb);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nMongos.prototype.cursor = function (ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(topology, ns, cmd, options);\n};\n\n/**\n * Selects a server\n *\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Specify a session if it is being used\n * @param {function} callback\n */\nMongos.prototype.selectServer = function (selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined') callback = selector, selector = undefined, options = {};\n  if (typeof options === 'function') callback = options, options = selector, selector = undefined;\n  options = options || {};\n  const server = pickProxy(this, options.session);\n  if (server == null) {\n    callback(new MongoError('server selection failed'));\n    return;\n  }\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  callback(null, server);\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function () {\n  var connections = [];\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n  return connections;\n};\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      servers: []\n    };\n\n    // All proxies\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies);\n\n    // Add all the disconnected proxies\n    description.servers = description.servers.concat(proxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Unknown';\n      return description;\n    }));\n\n    // Add all the connected proxies\n    description.servers = description.servers.concat(self.connectedProxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Mongos';\n      return description;\n    }));\n\n    // Get the diff\n    var diffResult = diff(self.topologyDescription, description);\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    };\n\n    // Emit the topologyDescription change\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    }\n\n    // Set the new description\n    self.topologyDescription = description;\n  }\n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\nmodule.exports = Mongos;","map":{"version":3,"names":["inherits","require","f","format","EventEmitter","CoreCursor","Logger","retrieveBSON","MongoError","Server","diff","cloneOptions","SessionMixins","isRetryableWritesSupported","relayEvents","BSON","getMMAPError","makeClientMetadata","legacyIsRetryableWriteError","DISCONNECTED","CONNECTING","CONNECTED","UNREFERENCED","DESTROYING","DESTROYED","stateTransition","self","newState","legalTransitions","disconnected","connecting","connected","unreferenced","destroyed","legalStates","state","indexOf","s","logger","error","id","handlers","Mongos","seedlist","options","Array","isArray","reduce","seeds","seed","find","host","port","push","Object","assign","metadata","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","Map","MaxKey","MinKey","ObjectId","BSONRegExp","Symbol","Timestamp","Cursor","cursorFactory","haInterval","disconnectHandler","index","connectOptions","debug","localThresholdMS","isWarn","socketTimeout","warn","connectingProxies","connectedProxies","disconnectedProxies","haTimeoutId","ismaster","topologyDescription","topologyType","servers","clusterTime","call","prototype","defineProperty","enumerable","get","native","logicalSessionTimeoutMinutes","emitSDAMEvent","event","description","listeners","length","emit","SERVER_EVENTS","destroyServer","server","callback","forEach","removeAllListeners","destroy","connect","map","x","reconnect","monitoring","parent","topologyId","connectProxies","auth","credentials","handleEvent","moveServerFrom","emitTopologyDescriptionChanged","address","name","handleInitialConnectEvent","_this","lastIsMaster","msg","i","on","message","hosts","removeProxyFrom","topologyMonitor","firstConnect","concat","timeoutInterval","setTimeout","once","pickProxy","session","transaction","isConnected","unpinServer","slice","lowerBoundLatency","Number","MAX_VALUE","lastIsMasterMS","filter","proxy","isActive","pinServer","from","to","splice","reconnectProxies","proxies","count","_handleEvent","_self","execute","_server","split","parseInt","force","pingServer","cb","start","Date","getTime","connectionId","command","connectionTimeout","err","r","latencyMS","durationMS","failure","result","reply","unref","clearTimeout","serverCount","serverDestroyed","isDestroyed","executeWriteOperation","args","op","ns","ops","willRetryWrite","retrying","retryWrites","inTransaction","explain","undefined","handler","newArgs","operationId","incrementTransactionNumber","insert","add","update","remove","RETRYABLE_WRITE_OPERATIONS","isWriteCommand","some","cmd","clonedOptions","topology","newOptions","cursor","FinalCursor","selectServer","selector","connections","getDescription","type","diffResult","previousDescription","newDescription","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/topologies/mongos.js"],"sourcesContent":["'use strict';\n\nconst inherits = require('util').inherits;\nconst f = require('util').format;\nconst EventEmitter = require('events').EventEmitter;\nconst CoreCursor = require('../cursor').CoreCursor;\nconst Logger = require('../connection/logger');\nconst retrieveBSON = require('../connection/utils').retrieveBSON;\nconst MongoError = require('../error').MongoError;\nconst Server = require('./server');\nconst diff = require('./shared').diff;\nconst cloneOptions = require('./shared').cloneOptions;\nconst SessionMixins = require('./shared').SessionMixins;\nconst isRetryableWritesSupported = require('./shared').isRetryableWritesSupported;\nconst relayEvents = require('../utils').relayEvents;\nconst BSON = retrieveBSON();\nconst getMMAPError = require('./shared').getMMAPError;\nconst makeClientMetadata = require('../utils').makeClientMetadata;\nconst legacyIsRetryableWriteError = require('./shared').legacyIsRetryableWriteError;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n */\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYING, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYING, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(\n      f(\n        'Mongos with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.bsonRegExp=false] By default, regex returned from MDB will be native to the language. Setting to true will ensure that a BSON.BSONRegExp object is returned.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Mongos = function(seedlist, options) {\n  options = options || {};\n\n  // Get replSet Id\n  this.id = id++;\n\n  // deduplicate seedlist\n  if (Array.isArray(seedlist)) {\n    seedlist = seedlist.reduce((seeds, seed) => {\n      if (seeds.find(s => s.host === seed.host && s.port === seed.port)) {\n        return seeds;\n      }\n\n      seeds.push(seed);\n      return seeds;\n    }, []);\n  }\n\n  // Internal state\n  this.s = {\n    options: Object.assign({ metadata: makeClientMetadata(options) }, options),\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15\n  };\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if (\n    this.s.logger.isWarn() &&\n    this.s.options.socketTimeout !== 0 &&\n    this.s.options.socketTimeout < this.s.haInterval\n  ) {\n    this.s.logger.warn(\n      f(\n        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',\n        this.s.options.socketTimeout,\n        this.s.haInterval\n      )\n    );\n  }\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n\n  // Current proxies we are connecting to\n  this.connectingProxies = [];\n  // Currently connected proxies\n  this.connectedProxies = [];\n  // Disconnected proxies\n  this.disconnectedProxies = [];\n  // Index of proxy to run operations against\n  this.index = 0;\n  // High availability timeout id\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n\n  // Description of the Replicaset\n  this.topologyDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  };\n\n  // Highest clusterTime seen in responses from the current deployment\n  this.clusterTime = null;\n\n  // Add event listener\n  EventEmitter.call(this);\n};\n\ninherits(Mongos, EventEmitter);\nObject.assign(Mongos.prototype, SessionMixins);\n\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return 'mongos';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\nconst SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];\nfunction destroyServer(server, options, callback) {\n  options = options || {};\n  SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, callback);\n}\n\n/**\n * Initiate server connect\n */\nMongos.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    const server = new Server(\n      Object.assign({}, self.s.options, x, options, {\n        reconnect: false,\n        monitoring: false,\n        parent: self\n      })\n    );\n\n    relayEvents(server, self, ['serverDescriptionChanged']);\n    return server;\n  });\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n\n  // Start all server connections\n  connectProxies(self, servers);\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\nfunction handleEvent(self) {\n  return function() {\n    if (self.state === DESTROYED || self.state === DESTROYING) {\n      return;\n    }\n\n    // Move to list of disconnectedProxies\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n    // Emit the left signal\n    self.emit('left', 'mongos', this);\n    // Emit the sdam event\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n\n    // Destroy the instance\n    if (self.state === DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n      // Move from connectingProxies\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if (event === 'connect') {\n      // Get last known ismaster\n      self.ismaster = _this.lastIsMaster();\n\n      // Is this not a proxy, remove t\n      if (self.ismaster.msg === 'isdbgrid') {\n        // Add to the connectd list\n        for (let i = 0; i < self.connectedProxies.length; i++) {\n          if (self.connectedProxies[i].name === _this.name) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);\n            // Emit the initial topology\n            emitTopologyDescriptionChanged(self);\n            _this.destroy();\n            return self.emit('failed', _this);\n          }\n        }\n\n        // Remove the handlers\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _this.on('error', handleEvent(self, 'error'));\n        _this.on('close', handleEvent(self, 'close'));\n        _this.on('timeout', handleEvent(self, 'timeout'));\n        _this.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move from connecting proxies connected\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _this);\n        // Emit the joined event\n        self.emit('joined', 'mongos', _this);\n      } else {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          var message = 'expected mongos proxy, but found replicaset member mongod for server %s';\n          // We have a standalone server\n          if (!self.ismaster.hosts) {\n            message = 'expected mongos proxy, but found standalone mongod for server %s';\n          }\n\n          self.s.logger.warn(f(message, _this.name));\n        }\n\n        // This is not a mongos proxy, destroy and remove it completely\n        _this.destroy(true);\n        removeProxyFrom(self.connectingProxies, _this);\n        // Emit the left event\n        self.emit('left', 'server', _this);\n        // Emit failed event\n        self.emit('failed', _this);\n      }\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      // Emit the left event\n      self.emit('left', 'mongos', this);\n      // Emit failed event\n      self.emit('failed', this);\n    }\n\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n\n    // Trigger topologyMonitor\n    if (self.connectingProxies.length === 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED);\n        // Emit the connect event\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length === 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(\n            f('no mongos proxies found in seed list, did you mean to connect to a replicaset')\n          );\n        }\n\n        // Emit the error that no proxies were found\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      }\n\n      // Topology monitor\n      topologyMonitor(self, { firstConnect: true });\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      });\n\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  servers.forEach(server => connect(server, timeoutInterval++));\n}\n\nfunction pickProxy(self, session) {\n  // TODO: Destructure :)\n  const transaction = session && session.transaction;\n\n  if (transaction && transaction.server) {\n    if (transaction.server.isConnected()) {\n      return transaction.server;\n    } else {\n      transaction.unpinServer();\n    }\n  }\n\n  // Get the currently connected Proxies\n  var connectedProxies = self.connectedProxies.slice(0);\n\n  // Set lower bound\n  var lowerBoundLatency = Number.MAX_VALUE;\n\n  // Determine the lower bound for the Proxies\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  }\n\n  // Filter out the possible servers\n  connectedProxies = connectedProxies.filter(function(server) {\n    if (\n      server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS &&\n      server.isConnected()\n    ) {\n      return true;\n    }\n  });\n\n  let proxy;\n\n  // We have no connectedProxies pick first of the connected ones\n  if (connectedProxies.length === 0) {\n    proxy = self.connectedProxies[0];\n  } else {\n    // Get proxy\n    proxy = connectedProxies[self.index % connectedProxies.length];\n    // Update the index\n    self.index = (self.index + 1) % connectedProxies.length;\n  }\n\n  if (transaction && transaction.isActive && proxy && proxy.isConnected()) {\n    transaction.pinServer(proxy);\n  }\n\n  // Return the proxy\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name === proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function() {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n\n      if (event === 'connect') {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n          return _self.destroy();\n        }\n\n        // Remove the handlers\n        for (var i = 0; i < handlers.length; i++) {\n          _self.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _self.on('error', handleEvent(self, 'error'));\n        _self.on('close', handleEvent(self, 'close'));\n        _self.on('timeout', handleEvent(self, 'timeout'));\n        _self.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move to the connected servers\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _self);\n        // Emit topology Change\n        emitTopologyDescriptionChanged(self);\n        // Emit joined event\n        self.emit('joined', 'mongos', _self);\n      } else {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      }\n\n      // Are we done finish up callback\n      if (count === 0) {\n        callback();\n      }\n    };\n  };\n\n  // No new servers\n  if (count === 0) {\n    return callback();\n  }\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(\n        Object.assign({}, self.s.options, {\n          host: _server.name.split(':')[0],\n          port: parseInt(_server.name.split(':')[1], 10),\n          reconnect: false,\n          monitoring: false,\n          parent: self\n        })\n      );\n\n      destroyServer(_server, { force: true });\n      removeProxyFrom(self.disconnectedProxies, _server);\n\n      // Relay the server description change\n      relayEvents(server, self, ['serverDescriptionChanged']);\n\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\n        address: server.name\n      });\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Connect to proxy\n      self.connectingProxies.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {};\n\n  // no need to set up the monitor if we're already closed\n  if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n    return;\n  }\n\n  // Set momitoring timeout\n  self.haTimeoutId = setTimeout(function() {\n    if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n      return;\n    }\n\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    }\n\n    // Get the connectingServers\n    var proxies = self.connectedProxies.slice(0);\n    // Get the count\n    var count = proxies.length;\n\n    // If the count is zero schedule a new fast\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime();\n\n      // Emit the server heartbeat start\n      emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: _server.name });\n\n      // Execute ismaster\n      _server.command(\n        'admin.$cmd',\n        {\n          ismaster: true\n        },\n        {\n          monitoring: true,\n          socketTimeout: self.s.options.connectionTimeout || 2000\n        },\n        function(err, r) {\n          if (\n            self.state === DESTROYED ||\n            self.state === DESTROYING ||\n            self.state === UNREFERENCED\n          ) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n            _server.destroy();\n            return cb(err, r);\n          }\n\n          // Calculate latency\n          var latencyMS = new Date().getTime() - start;\n\n          // We had an error, remove it from the state\n          if (err) {\n            // Emit the server heartbeat failure\n            emitSDAMEvent(self, 'serverHeartbeatFailed', {\n              durationMS: latencyMS,\n              failure: err,\n              connectionId: _server.name\n            });\n            // Move from connected proxies to disconnected proxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n          } else {\n            // Update the server ismaster\n            _server.ismaster = r.result;\n            _server.lastIsMasterMS = latencyMS;\n\n            // Server heart beat event\n            emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n              durationMS: latencyMS,\n              reply: r.result,\n              connectionId: _server.name\n            });\n          }\n\n          cb(err, r);\n        }\n      );\n    }\n\n    // No proxies initiate monitor again\n    if (proxies.length === 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      }\n\n      // Attempt to connect to any unknown servers\n      return reconnectProxies(self, self.disconnectedProxies, function() {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          return;\n        }\n\n        // Are we connected ? emit connect event\n        if (self.state === CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\n          self.emit('close', self);\n        }\n\n        // Perform topology monitor\n        topologyMonitor(self);\n      });\n    }\n\n    // Ping all servers\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function() {\n        count = count - 1;\n\n        if (count === 0) {\n          if (\n            self.state === DESTROYED ||\n            self.state === DESTROYING ||\n            self.state === UNREFERENCED\n          ) {\n            return;\n          }\n\n          // Attempt to connect to any unknown servers\n          reconnectProxies(self, self.disconnectedProxies, function() {\n            if (\n              self.state === DESTROYED ||\n              self.state === DESTROYING ||\n              self.state === UNREFERENCED\n            ) {\n              return;\n            }\n\n            // Perform topology monitor\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function() {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nMongos.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n};\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nMongos.prototype.destroy = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  stateTransition(this, DESTROYING);\n  if (this.haTimeoutId) {\n    clearTimeout(this.haTimeoutId);\n  }\n\n  const proxies = this.connectedProxies.concat(this.connectingProxies);\n  let serverCount = proxies.length;\n  const serverDestroyed = () => {\n    serverCount--;\n    if (serverCount > 0) {\n      return;\n    }\n\n    emitTopologyDescriptionChanged(this);\n    emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n    stateTransition(this, DESTROYED);\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  if (serverCount === 0) {\n    serverDestroyed();\n    return;\n  }\n\n  // Destroy all connecting servers\n  proxies.forEach(server => {\n    // Emit the sdam event\n    this.emit('serverClosed', {\n      topologyId: this.id,\n      address: server.name\n    });\n\n    destroyServer(server, options, serverDestroyed);\n    moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);\n  });\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function() {\n  return this.connectedProxies.length > 0;\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function() {\n  return this.state === DESTROYED;\n};\n\n//\n// Operations\n//\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  // Pick a server\n  let server = pickProxy(self, options.session);\n  // No server found error out\n  if (!server) return callback(new MongoError('no mongos proxy available'));\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction() &&\n    options.explain === undefined;\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!legacyIsRetryableWriteError(err, self) || !willRetryWrite) {\n      err = getMMAPError(err);\n      return callback(err);\n    }\n\n    // Pick another server\n    server = pickProxy(self, options.session);\n\n    // No server found error out with original error\n    if (!server) {\n      return callback(err);\n    }\n\n    const newArgs = Object.assign({}, args, { retrying: true });\n    return executeWriteOperation(newArgs, options, callback);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  }\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  // rerun the operation\n  server[op](ns, ops, options, handler);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'insert', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'update', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'remove', ns, ops }, options, callback);\n};\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  var self = this;\n\n  // Pick a proxy\n  var server = pickProxy(self, options.session);\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // No server returned we had an error\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Cloned options\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n\n  const willRetryWrite =\n    !options.retrying &&\n    options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction() &&\n    isWriteCommand(cmd);\n\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!legacyIsRetryableWriteError(err, self)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, clonedOptions, { retrying: true });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n\n    return callback(err);\n  };\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    clonedOptions.session.incrementTransactionNumber();\n    clonedOptions.willRetryWrite = willRetryWrite;\n  }\n\n  // Execute the command\n  server.command(ns, cmd, clonedOptions, cb);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nMongos.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(topology, ns, cmd, options);\n};\n\n/**\n * Selects a server\n *\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Specify a session if it is being used\n * @param {function} callback\n */\nMongos.prototype.selectServer = function(selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined')\n    (callback = selector), (selector = undefined), (options = {});\n  if (typeof options === 'function')\n    (callback = options), (options = selector), (selector = undefined);\n  options = options || {};\n\n  const server = pickProxy(this, options.session);\n  if (server == null) {\n    callback(new MongoError('server selection failed'));\n    return;\n  }\n\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  callback(null, server);\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function() {\n  var connections = [];\n\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n};\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      servers: []\n    };\n\n    // All proxies\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies);\n\n    // Add all the disconnected proxies\n    description.servers = description.servers.concat(\n      proxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Unknown';\n        return description;\n      })\n    );\n\n    // Add all the connected proxies\n    description.servers = description.servers.concat(\n      self.connectedProxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Mongos';\n        return description;\n      })\n    );\n\n    // Get the diff\n    var diffResult = diff(self.topologyDescription, description);\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    };\n\n    // Emit the topologyDescription change\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    }\n\n    // Set the new description\n    self.topologyDescription = description;\n  }\n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\nmodule.exports = Mongos;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}