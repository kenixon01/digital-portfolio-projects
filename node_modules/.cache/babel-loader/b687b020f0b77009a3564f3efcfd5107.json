{"ast":null,"code":"'use strict';\n\nvar Map = require('./map'),\n  Long = require('./long'),\n  Double = require('./double'),\n  Timestamp = require('./timestamp'),\n  ObjectID = require('./objectid'),\n  BSONRegExp = require('./regexp'),\n  Symbol = require('./symbol'),\n  Int32 = require('./int_32'),\n  Code = require('./code'),\n  Decimal128 = require('./decimal128'),\n  MinKey = require('./min_key'),\n  MaxKey = require('./max_key'),\n  DBRef = require('./db_ref'),\n  Binary = require('./binary');\n\n// Parts of the parser\nvar deserialize = require('./parser/deserializer'),\n  serializer = require('./parser/serializer'),\n  calculateObjectSize = require('./parser/calculate_size'),\n  utils = require('./parser/utils');\n\n/**\n * @ignore\n * @api private\n */\n// Default Max Size\nvar MAXSIZE = 1024 * 1024 * 17;\n\n// Current Internal Temporary Serialization Buffer\nvar buffer = utils.allocBuffer(MAXSIZE);\nvar BSON = function () {};\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.minInternalBufferSize=1024*1024*17] minimum size of the internal temporary serialization buffer **(default:1024*1024*17)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.prototype.serialize = function serialize(object, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var minInternalBufferSize = typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n\n  // Resize the internal serialization buffer if needed\n  if (buffer.length < minInternalBufferSize) {\n    buffer = utils.allocBuffer(minInternalBufferSize);\n  }\n\n  // Attempt to serialize\n  var serializationIndex = serializer(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, []);\n  // Create the final buffer\n  var finishedBuffer = utils.allocBuffer(serializationIndex);\n  // Copy into the finished buffer\n  buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\n  // Return the buffer\n  return finishedBuffer;\n};\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.\n * @return {Number} returns the index pointing to the last written byte in the buffer.\n * @api public\n */\nBSON.prototype.serializeWithBufferAndIndex = function (object, finalBuffer, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var startIndex = typeof options.index === 'number' ? options.index : 0;\n\n  // Attempt to serialize\n  var serializationIndex = serializer(finalBuffer, object, checkKeys, startIndex || 0, 0, serializeFunctions, ignoreUndefined);\n\n  // Return the index\n  return serializationIndex - 1;\n};\n\n/**\n * Deserialize data as BSON.\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.prototype.deserialize = function (buffer, options) {\n  return deserialize(buffer, options);\n};\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.prototype.calculateObjectSize = function (object, options) {\n  options = options || {};\n  var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n};\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.prototype.deserializeStream = function (data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  options = options != null ? options : {};\n  var index = startIndex;\n  // Loop over all documents\n  for (var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24;\n    // Update options with index\n    options['index'] = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = this.deserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n};\n\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\n// var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\n// var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// Return BSON\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.Int32 = Int32;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\nmodule.exports.Decimal128 = Decimal128;","map":{"version":3,"names":["Map","require","Long","Double","Timestamp","ObjectID","BSONRegExp","Symbol","Int32","Code","Decimal128","MinKey","MaxKey","DBRef","Binary","deserialize","serializer","calculateObjectSize","utils","MAXSIZE","buffer","allocBuffer","BSON","prototype","serialize","object","options","checkKeys","serializeFunctions","ignoreUndefined","minInternalBufferSize","length","serializationIndex","finishedBuffer","copy","serializeWithBufferAndIndex","finalBuffer","startIndex","index","deserializeStream","data","numberOfDocuments","documents","docStartIndex","i","size","BSON_INT32_MAX","BSON_INT32_MIN","BSON_INT64_MAX","Math","pow","BSON_INT64_MIN","JS_INT_MAX","JS_INT_MIN","BSON_DATA_NUMBER","BSON_DATA_STRING","BSON_DATA_OBJECT","BSON_DATA_ARRAY","BSON_DATA_BINARY","BSON_DATA_OID","BSON_DATA_BOOLEAN","BSON_DATA_DATE","BSON_DATA_NULL","BSON_DATA_REGEXP","BSON_DATA_CODE","BSON_DATA_SYMBOL","BSON_DATA_CODE_W_SCOPE","BSON_DATA_INT","BSON_DATA_TIMESTAMP","BSON_DATA_LONG","BSON_DATA_MIN_KEY","BSON_DATA_MAX_KEY","BSON_BINARY_SUBTYPE_DEFAULT","BSON_BINARY_SUBTYPE_FUNCTION","BSON_BINARY_SUBTYPE_BYTE_ARRAY","BSON_BINARY_SUBTYPE_UUID","BSON_BINARY_SUBTYPE_MD5","BSON_BINARY_SUBTYPE_USER_DEFINED","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/bson/lib/bson/bson.js"],"sourcesContent":["'use strict';\n\nvar Map = require('./map'),\n  Long = require('./long'),\n  Double = require('./double'),\n  Timestamp = require('./timestamp'),\n  ObjectID = require('./objectid'),\n  BSONRegExp = require('./regexp'),\n  Symbol = require('./symbol'),\n  Int32 = require('./int_32'),\n  Code = require('./code'),\n  Decimal128 = require('./decimal128'),\n  MinKey = require('./min_key'),\n  MaxKey = require('./max_key'),\n  DBRef = require('./db_ref'),\n  Binary = require('./binary');\n\n// Parts of the parser\nvar deserialize = require('./parser/deserializer'),\n  serializer = require('./parser/serializer'),\n  calculateObjectSize = require('./parser/calculate_size'),\n  utils = require('./parser/utils');\n\n/**\n * @ignore\n * @api private\n */\n// Default Max Size\nvar MAXSIZE = 1024 * 1024 * 17;\n\n// Current Internal Temporary Serialization Buffer\nvar buffer = utils.allocBuffer(MAXSIZE);\n\nvar BSON = function() {};\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.minInternalBufferSize=1024*1024*17] minimum size of the internal temporary serialization buffer **(default:1024*1024*17)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.prototype.serialize = function serialize(object, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var minInternalBufferSize =\n    typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n  \n  // Resize the internal serialization buffer if needed\n  if (buffer.length < minInternalBufferSize) {\n    buffer = utils.allocBuffer(minInternalBufferSize);\n  }\n\n  // Attempt to serialize\n  var serializationIndex = serializer(\n    buffer,\n    object,\n    checkKeys,\n    0,\n    0,\n    serializeFunctions,\n    ignoreUndefined,\n    []\n  );\n  // Create the final buffer\n  var finishedBuffer = utils.allocBuffer(serializationIndex);\n  // Copy into the finished buffer\n  buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\n  // Return the buffer\n  return finishedBuffer;\n};\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.\n * @return {Number} returns the index pointing to the last written byte in the buffer.\n * @api public\n */\nBSON.prototype.serializeWithBufferAndIndex = function(object, finalBuffer, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var startIndex = typeof options.index === 'number' ? options.index : 0;\n\n  // Attempt to serialize\n  var serializationIndex = serializer(\n    finalBuffer,\n    object,\n    checkKeys,\n    startIndex || 0,\n    0,\n    serializeFunctions,\n    ignoreUndefined\n  );\n\n  // Return the index\n  return serializationIndex - 1;\n};\n\n/**\n * Deserialize data as BSON.\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.prototype.deserialize = function(buffer, options) {\n  return deserialize(buffer, options);\n};\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.prototype.calculateObjectSize = function(object, options) {\n  options = options || {};\n\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n};\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.prototype.deserializeStream = function(\n  data,\n  startIndex,\n  numberOfDocuments,\n  documents,\n  docStartIndex,\n  options\n) {\n  options = options != null ? options : {};\n  var index = startIndex;\n  // Loop over all documents\n  for (var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size =\n      data[index] | (data[index + 1] << 8) | (data[index + 2] << 16) | (data[index + 3] << 24);\n    // Update options with index\n    options['index'] = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = this.deserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n};\n\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\n// var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\n// var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// Return BSON\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.Int32 = Int32;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\nmodule.exports.Decimal128 = Decimal128;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}