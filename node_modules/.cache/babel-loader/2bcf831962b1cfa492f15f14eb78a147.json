{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as PropTypes from 'prop-types';\nimport { useQuery } from \"../hooks/index.js\";\nexport function Query(props) {\n  var children = props.children,\n    query = props.query,\n    options = __rest(props, [\"children\", \"query\"]);\n  var result = useQuery(query, options);\n  return result ? children(result) : null;\n}\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,SAAS,MAAM,YAAY;AAIvC,SAASC,QAAQ,QAAQ,mBAAW;AAEpC,OAAM,SAAUC,KAAK,CACnBC,KAA+C;EAEvC,YAAQ,GAAwBA,KAAK,SAA7B;IAAEC,KAAK,GAAiBD,KAAK,MAAtB;IAAKE,OAAO,UAAKF,KAAK,EAAvC,qBAA+B,CAAF;EACnC,IAAMG,MAAM,GAAGL,QAAQ,CAACG,KAAK,EAAEC,OAAO,CAAC;EACvC,OAAOC,MAAM,GAAGC,QAAQ,CAACD,MAAa,CAAC,GAAG,IAAI;AAChD;AAMAJ,KAAK,CAACM,SAAS,GAAG;EAChBC,MAAM,EAAET,SAAS,CAACU,MAAM;EACxBH,QAAQ,EAAEP,SAAS,CAACW,IAAI,CAACC,UAAU;EACnCC,WAAW,EAAEb,SAAS,CAACc,MAAM;EAC7BC,2BAA2B,EAAEf,SAAS,CAACgB,IAAI;EAC3CC,WAAW,EAAEjB,SAAS,CAACW,IAAI;EAC3BO,OAAO,EAAElB,SAAS,CAACW,IAAI;EACvBQ,YAAY,EAAEnB,SAAS,CAACoB,MAAM;EAC9BhB,KAAK,EAAEJ,SAAS,CAACU,MAAM,CAACE,UAAU;EAClCS,SAAS,EAAErB,SAAS,CAACU,MAAM;EAC3BY,GAAG,EAAEtB,SAAS,CAACgB,IAAI;EACnBO,cAAc,EAAEvB,SAAS,CAACgB,IAAI;EAC9BQ,iBAAiB,EAAExB,SAAS,CAACgB;CACE","names":["PropTypes","useQuery","Query","props","query","options","result","children","propTypes","client","object","func","isRequired","fetchPolicy","string","notifyOnNetworkStatusChange","bool","onCompleted","onError","pollInterval","number","variables","ssr","partialRefetch","returnPartialData"],"sources":["C:\\Users\\minix\\Documents\\GitHub\\digital-portfolio-projects\\digital-portfolio-projects\\node_modules\\@apollo\\src\\react\\components\\Query.tsx"],"sourcesContent":["import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { QueryComponentOptions } from './types';\nimport { useQuery } from '../hooks';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return result ? children(result as any) : null;\n}\n\nexport interface Query<TData, TVariables> {\n  propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\n}\n\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n} as Query<any, any>[\"propTypes\"];\n"]},"metadata":{},"sourceType":"module"}