{"ast":null,"code":"'use strict';\n\n/**\n * The base class for all monitoring events published from the connection pool\n *\n * @property {number} time A timestamp when the event was created\n * @property {string} address The address (host/port pair) of the pool\n */\nclass ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\n\n/**\n * An event published when a connection pool is created\n *\n * @property {Object} options The options used to create this connection pool\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n}\n\n/**\n * An event published when a connection pool is closed\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool creates a new connection\n *\n * @property {number} connectionId A monotonically increasing, per-pool id for the newly created connection\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is ready for use\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is closed\n *\n * @property {number} connectionId The id of the connection\n * @property {string} reason The reason the connection was closed\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n  }\n}\n\n/**\n * An event published when a request to check a connection out begins\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a request to check a connection out fails\n *\n * @property {string} reason The reason the attempt to check out failed\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is checked into the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection pool is cleared\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\nconst CMAP_EVENT_NAMES = ['connectionPoolCreated', 'connectionPoolClosed', 'connectionCreated', 'connectionReady', 'connectionClosed', 'connectionCheckOutStarted', 'connectionCheckOutFailed', 'connectionCheckedOut', 'connectionCheckedIn', 'connectionPoolCleared'];\nmodule.exports = {\n  CMAP_EVENT_NAMES,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionReadyEvent,\n  ConnectionClosedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckedInEvent,\n  ConnectionPoolClearedEvent\n};","map":{"version":3,"names":["ConnectionPoolMonitoringEvent","constructor","pool","time","Date","address","ConnectionPoolCreatedEvent","options","ConnectionPoolClosedEvent","ConnectionCreatedEvent","connection","connectionId","id","ConnectionReadyEvent","ConnectionClosedEvent","reason","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent","CMAP_EVENT_NAMES","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/cmap/events.js"],"sourcesContent":["'use strict';\n\n/**\n * The base class for all monitoring events published from the connection pool\n *\n * @property {number} time A timestamp when the event was created\n * @property {string} address The address (host/port pair) of the pool\n */\nclass ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\n\n/**\n * An event published when a connection pool is created\n *\n * @property {Object} options The options used to create this connection pool\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n}\n\n/**\n * An event published when a connection pool is closed\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool creates a new connection\n *\n * @property {number} connectionId A monotonically increasing, per-pool id for the newly created connection\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is ready for use\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is closed\n *\n * @property {number} connectionId The id of the connection\n * @property {string} reason The reason the connection was closed\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n  }\n}\n\n/**\n * An event published when a request to check a connection out begins\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a request to check a connection out fails\n *\n * @property {string} reason The reason the attempt to check out failed\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is checked into the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection pool is cleared\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\nconst CMAP_EVENT_NAMES = [\n  'connectionPoolCreated',\n  'connectionPoolClosed',\n  'connectionCreated',\n  'connectionReady',\n  'connectionClosed',\n  'connectionCheckOutStarted',\n  'connectionCheckOutFailed',\n  'connectionCheckedOut',\n  'connectionCheckedIn',\n  'connectionPoolCleared'\n];\n\nmodule.exports = {\n  CMAP_EVENT_NAMES,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionReadyEvent,\n  ConnectionClosedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckedInEvent,\n  ConnectionPoolClearedEvent\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}