{"ast":null,"code":"'use strict';\n\nlet BSON = require('bson');\nconst require_optional = require('optional-require')(require);\nconst EJSON = require('./utils').retrieveEJSON();\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  // Attempt to grab the native BSON parser\n  const BSONNative = require_optional('bson-ext');\n  // If we got the native parser, use it instead of the\n  // Javascript one\n  if (BSONNative) {\n    BSON = BSONNative;\n  }\n} catch (err) {} // eslint-disable-line\n\nmodule.exports = {\n  // Errors\n  MongoError: require('./error').MongoError,\n  MongoNetworkError: require('./error').MongoNetworkError,\n  MongoParseError: require('./error').MongoParseError,\n  MongoTimeoutError: require('./error').MongoTimeoutError,\n  MongoServerSelectionError: require('./error').MongoServerSelectionError,\n  MongoWriteConcernError: require('./error').MongoWriteConcernError,\n  // Core\n  Connection: require('./connection/connection'),\n  Server: require('./topologies/server'),\n  ReplSet: require('./topologies/replset'),\n  Mongos: require('./topologies/mongos'),\n  Logger: require('./connection/logger'),\n  Cursor: require('./cursor').CoreCursor,\n  ReadPreference: require('./topologies/read_preference'),\n  Sessions: require('./sessions'),\n  BSON: BSON,\n  EJSON: EJSON,\n  Topology: require('./sdam/topology').Topology,\n  // Raw operations\n  Query: require('./connection/commands').Query,\n  // Auth mechanisms\n  MongoCredentials: require('./auth/mongo_credentials').MongoCredentials,\n  defaultAuthProviders: require('./auth/defaultAuthProviders').defaultAuthProviders,\n  MongoCR: require('./auth/mongocr'),\n  X509: require('./auth/x509'),\n  Plain: require('./auth/plain'),\n  GSSAPI: require('./auth/gssapi'),\n  ScramSHA1: require('./auth/scram').ScramSHA1,\n  ScramSHA256: require('./auth/scram').ScramSHA256,\n  // Utilities\n  parseConnectionString: require('./uri_parser')\n};","map":{"version":3,"names":["BSON","require","require_optional","EJSON","retrieveEJSON","BSONNative","err","module","exports","MongoError","MongoNetworkError","MongoParseError","MongoTimeoutError","MongoServerSelectionError","MongoWriteConcernError","Connection","Server","ReplSet","Mongos","Logger","Cursor","CoreCursor","ReadPreference","Sessions","Topology","Query","MongoCredentials","defaultAuthProviders","MongoCR","X509","Plain","GSSAPI","ScramSHA1","ScramSHA256","parseConnectionString"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/index.js"],"sourcesContent":["'use strict';\n\nlet BSON = require('bson');\nconst require_optional = require('optional-require')(require);\nconst EJSON = require('./utils').retrieveEJSON();\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  // Attempt to grab the native BSON parser\n  const BSONNative = require_optional('bson-ext');\n  // If we got the native parser, use it instead of the\n  // Javascript one\n  if (BSONNative) {\n    BSON = BSONNative;\n  }\n} catch (err) {} // eslint-disable-line\n\nmodule.exports = {\n  // Errors\n  MongoError: require('./error').MongoError,\n  MongoNetworkError: require('./error').MongoNetworkError,\n  MongoParseError: require('./error').MongoParseError,\n  MongoTimeoutError: require('./error').MongoTimeoutError,\n  MongoServerSelectionError: require('./error').MongoServerSelectionError,\n  MongoWriteConcernError: require('./error').MongoWriteConcernError,\n  // Core\n  Connection: require('./connection/connection'),\n  Server: require('./topologies/server'),\n  ReplSet: require('./topologies/replset'),\n  Mongos: require('./topologies/mongos'),\n  Logger: require('./connection/logger'),\n  Cursor: require('./cursor').CoreCursor,\n  ReadPreference: require('./topologies/read_preference'),\n  Sessions: require('./sessions'),\n  BSON: BSON,\n  EJSON: EJSON,\n  Topology: require('./sdam/topology').Topology,\n  // Raw operations\n  Query: require('./connection/commands').Query,\n  // Auth mechanisms\n  MongoCredentials: require('./auth/mongo_credentials').MongoCredentials,\n  defaultAuthProviders: require('./auth/defaultAuthProviders').defaultAuthProviders,\n  MongoCR: require('./auth/mongocr'),\n  X509: require('./auth/x509'),\n  Plain: require('./auth/plain'),\n  GSSAPI: require('./auth/gssapi'),\n  ScramSHA1: require('./auth/scram').ScramSHA1,\n  ScramSHA256: require('./auth/scram').ScramSHA256,\n  // Utilities\n  parseConnectionString: require('./uri_parser')\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kBAAkB,CAAC,CAACA,OAAO,CAAC;AAC7D,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAS,CAAC,CAACG,aAAa,EAAE;AAEhD,IAAI;EACF;EACA;EACA,MAAMC,UAAU,GAAGH,gBAAgB,CAAC,UAAU,CAAC;EAC/C;EACA;EACA,IAAIG,UAAU,EAAE;IACdL,IAAI,GAAGK,UAAU;EACnB;AACF,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC,CAAC,CAAC;;AAEjBC,MAAM,CAACC,OAAO,GAAG;EACf;EACAC,UAAU,EAAER,OAAO,CAAC,SAAS,CAAC,CAACQ,UAAU;EACzCC,iBAAiB,EAAET,OAAO,CAAC,SAAS,CAAC,CAACS,iBAAiB;EACvDC,eAAe,EAAEV,OAAO,CAAC,SAAS,CAAC,CAACU,eAAe;EACnDC,iBAAiB,EAAEX,OAAO,CAAC,SAAS,CAAC,CAACW,iBAAiB;EACvDC,yBAAyB,EAAEZ,OAAO,CAAC,SAAS,CAAC,CAACY,yBAAyB;EACvEC,sBAAsB,EAAEb,OAAO,CAAC,SAAS,CAAC,CAACa,sBAAsB;EACjE;EACAC,UAAU,EAAEd,OAAO,CAAC,yBAAyB,CAAC;EAC9Ce,MAAM,EAAEf,OAAO,CAAC,qBAAqB,CAAC;EACtCgB,OAAO,EAAEhB,OAAO,CAAC,sBAAsB,CAAC;EACxCiB,MAAM,EAAEjB,OAAO,CAAC,qBAAqB,CAAC;EACtCkB,MAAM,EAAElB,OAAO,CAAC,qBAAqB,CAAC;EACtCmB,MAAM,EAAEnB,OAAO,CAAC,UAAU,CAAC,CAACoB,UAAU;EACtCC,cAAc,EAAErB,OAAO,CAAC,8BAA8B,CAAC;EACvDsB,QAAQ,EAAEtB,OAAO,CAAC,YAAY,CAAC;EAC/BD,IAAI,EAAEA,IAAI;EACVG,KAAK,EAAEA,KAAK;EACZqB,QAAQ,EAAEvB,OAAO,CAAC,iBAAiB,CAAC,CAACuB,QAAQ;EAC7C;EACAC,KAAK,EAAExB,OAAO,CAAC,uBAAuB,CAAC,CAACwB,KAAK;EAC7C;EACAC,gBAAgB,EAAEzB,OAAO,CAAC,0BAA0B,CAAC,CAACyB,gBAAgB;EACtEC,oBAAoB,EAAE1B,OAAO,CAAC,6BAA6B,CAAC,CAAC0B,oBAAoB;EACjFC,OAAO,EAAE3B,OAAO,CAAC,gBAAgB,CAAC;EAClC4B,IAAI,EAAE5B,OAAO,CAAC,aAAa,CAAC;EAC5B6B,KAAK,EAAE7B,OAAO,CAAC,cAAc,CAAC;EAC9B8B,MAAM,EAAE9B,OAAO,CAAC,eAAe,CAAC;EAChC+B,SAAS,EAAE/B,OAAO,CAAC,cAAc,CAAC,CAAC+B,SAAS;EAC5CC,WAAW,EAAEhC,OAAO,CAAC,cAAc,CAAC,CAACgC,WAAW;EAChD;EACAC,qBAAqB,EAAEjC,OAAO,CAAC,cAAc;AAC/C,CAAC"},"metadata":{},"sourceType":"script"}