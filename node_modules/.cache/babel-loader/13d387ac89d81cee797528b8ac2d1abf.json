{"ast":null,"code":"'use strict';\n\nconst arrayStrictEqual = require('../utils').arrayStrictEqual;\nconst tagsStrictEqual = require('../utils').tagsStrictEqual;\nconst errorStrictEqual = require('../utils').errorStrictEqual;\nconst ServerType = require('./common').ServerType;\nconst now = require('../../utils').now;\nconst WRITABLE_SERVER_TYPES = new Set([ServerType.RSPrimary, ServerType.Standalone, ServerType.Mongos]);\nconst DATA_BEARING_SERVER_TYPES = new Set([ServerType.RSPrimary, ServerType.RSSecondary, ServerType.Mongos, ServerType.Standalone]);\nconst ISMASTER_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'compression', 'me', 'hosts', 'passives', 'arbiters', 'tags', 'setName', 'setVersion', 'electionId', 'primary', 'logicalSessionTimeoutMinutes', 'saslSupportedMechs', '__nodejs_mock_server__', '$clusterTime'];\n\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n */\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @param {String} address The address of the server\n   * @param {Object} [ismaster] An optional ismaster response for this server\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.roundTripTime] The round trip time to ping this server (in ms)\n   * @param {Error} [options.error] An Error used for better reporting debugging\n   * @param {any} [options.topologyVersion] The topologyVersion\n   */\n  constructor(address, ismaster, options) {\n    options = options || {};\n    ismaster = Object.assign({\n      minWireVersion: 0,\n      maxWireVersion: 0,\n      hosts: [],\n      passives: [],\n      arbiters: [],\n      tags: []\n    }, ismaster);\n    this.address = address;\n    this.error = options.error;\n    this.roundTripTime = options.roundTripTime || -1;\n    this.lastUpdateTime = now();\n    this.lastWriteDate = ismaster.lastWrite ? ismaster.lastWrite.lastWriteDate : null;\n    this.opTime = ismaster.lastWrite ? ismaster.lastWrite.opTime : null;\n    this.type = parseServerType(ismaster);\n    this.topologyVersion = options.topologyVersion || ismaster.topologyVersion;\n\n    // direct mappings\n    ISMASTER_FIELDS.forEach(field => {\n      if (typeof ismaster[field] !== 'undefined') this[field] = ismaster[field];\n    });\n\n    // normalize case for hosts\n    if (this.me) this.me = this.me.toLowerCase();\n    this.hosts = this.hosts.map(host => host.toLowerCase());\n    this.passives = this.passives.map(host => host.toLowerCase());\n    this.arbiters = this.arbiters.map(host => host.toLowerCase());\n  }\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for reads\n   */\n  get isReadable() {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n\n  /**\n   * @return {Boolean} Is this server data bearing\n   */\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for writes\n   */\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : port;\n  }\n\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   *\n   * @param {ServerDescription} other\n   * @return {Boolean}\n   */\n  equals(other) {\n    const topologyVersionsEqual = this.topologyVersion === other.topologyVersion || compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n    return other != null && errorStrictEqual(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && this.me === other.me && arrayStrictEqual(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && (this.electionId ? other.electionId && this.electionId.equals(other.electionId) : this.electionId === other.electionId) && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n  }\n}\n\n/**\n * Parses an `ismaster` message and determines the server type\n *\n * @param {Object} ismaster The `ismaster` message to parse\n * @return {ServerType}\n */\nfunction parseServerType(ismaster) {\n  if (!ismaster || !ismaster.ok) {\n    return ServerType.Unknown;\n  }\n  if (ismaster.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return ServerType.RSOther;\n    } else if (ismaster.ismaster) {\n      return ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n  return ServerType.Standalone;\n}\n\n/**\n * Compares two topology versions.\n *\n * @param {object} lhs\n * @param {object} rhs\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\nfunction compareTopologyVersion(lhs, rhs) {\n  if (lhs == null || rhs == null) {\n    return -1;\n  }\n  if (lhs.processId.equals(rhs.processId)) {\n    // TODO: handle counters as Longs\n    if (lhs.counter === rhs.counter) {\n      return 0;\n    } else if (lhs.counter < rhs.counter) {\n      return -1;\n    }\n    return 1;\n  }\n  return -1;\n}\nmodule.exports = {\n  ServerDescription,\n  parseServerType,\n  compareTopologyVersion\n};","map":{"version":3,"names":["arrayStrictEqual","require","tagsStrictEqual","errorStrictEqual","ServerType","now","WRITABLE_SERVER_TYPES","Set","RSPrimary","Standalone","Mongos","DATA_BEARING_SERVER_TYPES","RSSecondary","ISMASTER_FIELDS","ServerDescription","constructor","address","ismaster","options","Object","assign","minWireVersion","maxWireVersion","hosts","passives","arbiters","tags","error","roundTripTime","lastUpdateTime","lastWriteDate","lastWrite","opTime","type","parseServerType","topologyVersion","forEach","field","me","toLowerCase","map","host","allHosts","concat","isReadable","isWritable","isDataBearing","has","chopLength","port","length","slice","split","pop","Number","parseInt","equals","other","topologyVersionsEqual","compareTopologyVersion","setName","setVersion","electionId","primary","logicalSessionTimeoutMinutes","ok","Unknown","isreplicaset","RSGhost","msg","hidden","RSOther","secondary","arbiterOnly","RSArbiter","lhs","rhs","processId","counter","module","exports"],"sources":["C:/Users/minix/Documents/GitHub/digital-portfolio-projects/digital-portfolio-projects/node_modules/mongodb/lib/core/sdam/server_description.js"],"sourcesContent":["'use strict';\n\nconst arrayStrictEqual = require('../utils').arrayStrictEqual;\nconst tagsStrictEqual = require('../utils').tagsStrictEqual;\nconst errorStrictEqual = require('../utils').errorStrictEqual;\nconst ServerType = require('./common').ServerType;\nconst now = require('../../utils').now;\n\nconst WRITABLE_SERVER_TYPES = new Set([\n  ServerType.RSPrimary,\n  ServerType.Standalone,\n  ServerType.Mongos\n]);\n\nconst DATA_BEARING_SERVER_TYPES = new Set([\n  ServerType.RSPrimary,\n  ServerType.RSSecondary,\n  ServerType.Mongos,\n  ServerType.Standalone\n]);\n\nconst ISMASTER_FIELDS = [\n  'minWireVersion',\n  'maxWireVersion',\n  'maxBsonObjectSize',\n  'maxMessageSizeBytes',\n  'maxWriteBatchSize',\n  'compression',\n  'me',\n  'hosts',\n  'passives',\n  'arbiters',\n  'tags',\n  'setName',\n  'setVersion',\n  'electionId',\n  'primary',\n  'logicalSessionTimeoutMinutes',\n  'saslSupportedMechs',\n  '__nodejs_mock_server__',\n  '$clusterTime'\n];\n\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n */\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @param {String} address The address of the server\n   * @param {Object} [ismaster] An optional ismaster response for this server\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.roundTripTime] The round trip time to ping this server (in ms)\n   * @param {Error} [options.error] An Error used for better reporting debugging\n   * @param {any} [options.topologyVersion] The topologyVersion\n   */\n  constructor(address, ismaster, options) {\n    options = options || {};\n    ismaster = Object.assign(\n      {\n        minWireVersion: 0,\n        maxWireVersion: 0,\n        hosts: [],\n        passives: [],\n        arbiters: [],\n        tags: []\n      },\n      ismaster\n    );\n\n    this.address = address;\n    this.error = options.error;\n    this.roundTripTime = options.roundTripTime || -1;\n    this.lastUpdateTime = now();\n    this.lastWriteDate = ismaster.lastWrite ? ismaster.lastWrite.lastWriteDate : null;\n    this.opTime = ismaster.lastWrite ? ismaster.lastWrite.opTime : null;\n    this.type = parseServerType(ismaster);\n    this.topologyVersion = options.topologyVersion || ismaster.topologyVersion;\n\n    // direct mappings\n    ISMASTER_FIELDS.forEach(field => {\n      if (typeof ismaster[field] !== 'undefined') this[field] = ismaster[field];\n    });\n\n    // normalize case for hosts\n    if (this.me) this.me = this.me.toLowerCase();\n    this.hosts = this.hosts.map(host => host.toLowerCase());\n    this.passives = this.passives.map(host => host.toLowerCase());\n    this.arbiters = this.arbiters.map(host => host.toLowerCase());\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for reads\n   */\n  get isReadable() {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n\n  /**\n   * @return {Boolean} Is this server data bearing\n   */\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for writes\n   */\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : port;\n  }\n\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   *\n   * @param {ServerDescription} other\n   * @return {Boolean}\n   */\n  equals(other) {\n    const topologyVersionsEqual =\n      this.topologyVersion === other.topologyVersion ||\n      compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n\n    return (\n      other != null &&\n      errorStrictEqual(this.error, other.error) &&\n      this.type === other.type &&\n      this.minWireVersion === other.minWireVersion &&\n      this.me === other.me &&\n      arrayStrictEqual(this.hosts, other.hosts) &&\n      tagsStrictEqual(this.tags, other.tags) &&\n      this.setName === other.setName &&\n      this.setVersion === other.setVersion &&\n      (this.electionId\n        ? other.electionId && this.electionId.equals(other.electionId)\n        : this.electionId === other.electionId) &&\n      this.primary === other.primary &&\n      this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n      topologyVersionsEqual\n    );\n  }\n}\n\n/**\n * Parses an `ismaster` message and determines the server type\n *\n * @param {Object} ismaster The `ismaster` message to parse\n * @return {ServerType}\n */\nfunction parseServerType(ismaster) {\n  if (!ismaster || !ismaster.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (ismaster.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return ServerType.RSOther;\n    } else if (ismaster.ismaster) {\n      return ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n\n/**\n * Compares two topology versions.\n *\n * @param {object} lhs\n * @param {object} rhs\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\nfunction compareTopologyVersion(lhs, rhs) {\n  if (lhs == null || rhs == null) {\n    return -1;\n  }\n\n  if (lhs.processId.equals(rhs.processId)) {\n    // TODO: handle counters as Longs\n    if (lhs.counter === rhs.counter) {\n      return 0;\n    } else if (lhs.counter < rhs.counter) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  return -1;\n}\n\nmodule.exports = {\n  ServerDescription,\n  parseServerType,\n  compareTopologyVersion\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,UAAU,CAAC,CAACD,gBAAgB;AAC7D,MAAME,eAAe,GAAGD,OAAO,CAAC,UAAU,CAAC,CAACC,eAAe;AAC3D,MAAMC,gBAAgB,GAAGF,OAAO,CAAC,UAAU,CAAC,CAACE,gBAAgB;AAC7D,MAAMC,UAAU,GAAGH,OAAO,CAAC,UAAU,CAAC,CAACG,UAAU;AACjD,MAAMC,GAAG,GAAGJ,OAAO,CAAC,aAAa,CAAC,CAACI,GAAG;AAEtC,MAAMC,qBAAqB,GAAG,IAAIC,GAAG,CAAC,CACpCH,UAAU,CAACI,SAAS,EACpBJ,UAAU,CAACK,UAAU,EACrBL,UAAU,CAACM,MAAM,CAClB,CAAC;AAEF,MAAMC,yBAAyB,GAAG,IAAIJ,GAAG,CAAC,CACxCH,UAAU,CAACI,SAAS,EACpBJ,UAAU,CAACQ,WAAW,EACtBR,UAAU,CAACM,MAAM,EACjBN,UAAU,CAACK,UAAU,CACtB,CAAC;AAEF,MAAMI,eAAe,GAAG,CACtB,gBAAgB,EAChB,gBAAgB,EAChB,mBAAmB,EACnB,qBAAqB,EACrB,mBAAmB,EACnB,aAAa,EACb,IAAI,EACJ,OAAO,EACP,UAAU,EACV,UAAU,EACV,MAAM,EACN,SAAS,EACT,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,8BAA8B,EAC9B,oBAAoB,EACpB,wBAAwB,EACxB,cAAc,CACf;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IACtCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBD,QAAQ,GAAGE,MAAM,CAACC,MAAM,CACtB;MACEC,cAAc,EAAE,CAAC;MACjBC,cAAc,EAAE,CAAC;MACjBC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE;IACR,CAAC,EACDT,QAAQ,CACT;IAED,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACW,KAAK,GAAGT,OAAO,CAACS,KAAK;IAC1B,IAAI,CAACC,aAAa,GAAGV,OAAO,CAACU,aAAa,IAAI,CAAC,CAAC;IAChD,IAAI,CAACC,cAAc,GAAGxB,GAAG,EAAE;IAC3B,IAAI,CAACyB,aAAa,GAAGb,QAAQ,CAACc,SAAS,GAAGd,QAAQ,CAACc,SAAS,CAACD,aAAa,GAAG,IAAI;IACjF,IAAI,CAACE,MAAM,GAAGf,QAAQ,CAACc,SAAS,GAAGd,QAAQ,CAACc,SAAS,CAACC,MAAM,GAAG,IAAI;IACnE,IAAI,CAACC,IAAI,GAAGC,eAAe,CAACjB,QAAQ,CAAC;IACrC,IAAI,CAACkB,eAAe,GAAGjB,OAAO,CAACiB,eAAe,IAAIlB,QAAQ,CAACkB,eAAe;;IAE1E;IACAtB,eAAe,CAACuB,OAAO,CAACC,KAAK,IAAI;MAC/B,IAAI,OAAOpB,QAAQ,CAACoB,KAAK,CAAC,KAAK,WAAW,EAAE,IAAI,CAACA,KAAK,CAAC,GAAGpB,QAAQ,CAACoB,KAAK,CAAC;IAC3E,CAAC,CAAC;;IAEF;IACA,IAAI,IAAI,CAACC,EAAE,EAAE,IAAI,CAACA,EAAE,GAAG,IAAI,CAACA,EAAE,CAACC,WAAW,EAAE;IAC5C,IAAI,CAAChB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACiB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACF,WAAW,EAAE,CAAC;IACvD,IAAI,CAACf,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACgB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACF,WAAW,EAAE,CAAC;IAC7D,IAAI,CAACd,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACe,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACF,WAAW,EAAE,CAAC;EAC/D;EAEA,IAAIG,QAAQ,GAAG;IACb,OAAO,IAAI,CAACnB,KAAK,CAACoB,MAAM,CAAC,IAAI,CAAClB,QAAQ,CAAC,CAACkB,MAAM,CAAC,IAAI,CAACnB,QAAQ,CAAC;EAC/D;;EAEA;AACF;AACA;EACE,IAAIoB,UAAU,GAAG;IACf,OAAO,IAAI,CAACX,IAAI,KAAK7B,UAAU,CAACQ,WAAW,IAAI,IAAI,CAACiC,UAAU;EAChE;;EAEA;AACF;AACA;EACE,IAAIC,aAAa,GAAG;IAClB,OAAOnC,yBAAyB,CAACoC,GAAG,CAAC,IAAI,CAACd,IAAI,CAAC;EACjD;;EAEA;AACF;AACA;EACE,IAAIY,UAAU,GAAG;IACf,OAAOvC,qBAAqB,CAACyC,GAAG,CAAC,IAAI,CAACd,IAAI,CAAC;EAC7C;EAEA,IAAIQ,IAAI,GAAG;IACT,MAAMO,UAAU,GAAI,IAAG,IAAI,CAACC,IAAK,EAAC,CAACC,MAAM;IACzC,OAAO,IAAI,CAAClC,OAAO,CAACmC,KAAK,CAAC,CAAC,EAAE,CAACH,UAAU,CAAC;EAC3C;EAEA,IAAIC,IAAI,GAAG;IACT,MAAMA,IAAI,GAAG,IAAI,CAACjC,OAAO,CAACoC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE;IAC1C,OAAOJ,IAAI,GAAGK,MAAM,CAACC,QAAQ,CAACN,IAAI,EAAE,EAAE,CAAC,GAAGA,IAAI;EAChD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,MAAM,CAACC,KAAK,EAAE;IACZ,MAAMC,qBAAqB,GACzB,IAAI,CAACvB,eAAe,KAAKsB,KAAK,CAACtB,eAAe,IAC9CwB,sBAAsB,CAAC,IAAI,CAACxB,eAAe,EAAEsB,KAAK,CAACtB,eAAe,CAAC,KAAK,CAAC;IAE3E,OACEsB,KAAK,IAAI,IAAI,IACbtD,gBAAgB,CAAC,IAAI,CAACwB,KAAK,EAAE8B,KAAK,CAAC9B,KAAK,CAAC,IACzC,IAAI,CAACM,IAAI,KAAKwB,KAAK,CAACxB,IAAI,IACxB,IAAI,CAACZ,cAAc,KAAKoC,KAAK,CAACpC,cAAc,IAC5C,IAAI,CAACiB,EAAE,KAAKmB,KAAK,CAACnB,EAAE,IACpBtC,gBAAgB,CAAC,IAAI,CAACuB,KAAK,EAAEkC,KAAK,CAAClC,KAAK,CAAC,IACzCrB,eAAe,CAAC,IAAI,CAACwB,IAAI,EAAE+B,KAAK,CAAC/B,IAAI,CAAC,IACtC,IAAI,CAACkC,OAAO,KAAKH,KAAK,CAACG,OAAO,IAC9B,IAAI,CAACC,UAAU,KAAKJ,KAAK,CAACI,UAAU,KACnC,IAAI,CAACC,UAAU,GACZL,KAAK,CAACK,UAAU,IAAI,IAAI,CAACA,UAAU,CAACN,MAAM,CAACC,KAAK,CAACK,UAAU,CAAC,GAC5D,IAAI,CAACA,UAAU,KAAKL,KAAK,CAACK,UAAU,CAAC,IACzC,IAAI,CAACC,OAAO,KAAKN,KAAK,CAACM,OAAO,IAC9B,IAAI,CAACC,4BAA4B,KAAKP,KAAK,CAACO,4BAA4B,IACxEN,qBAAqB;EAEzB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASxB,eAAe,CAACjB,QAAQ,EAAE;EACjC,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACgD,EAAE,EAAE;IAC7B,OAAO7D,UAAU,CAAC8D,OAAO;EAC3B;EAEA,IAAIjD,QAAQ,CAACkD,YAAY,EAAE;IACzB,OAAO/D,UAAU,CAACgE,OAAO;EAC3B;EAEA,IAAInD,QAAQ,CAACoD,GAAG,IAAIpD,QAAQ,CAACoD,GAAG,KAAK,UAAU,EAAE;IAC/C,OAAOjE,UAAU,CAACM,MAAM;EAC1B;EAEA,IAAIO,QAAQ,CAAC2C,OAAO,EAAE;IACpB,IAAI3C,QAAQ,CAACqD,MAAM,EAAE;MACnB,OAAOlE,UAAU,CAACmE,OAAO;IAC3B,CAAC,MAAM,IAAItD,QAAQ,CAACA,QAAQ,EAAE;MAC5B,OAAOb,UAAU,CAACI,SAAS;IAC7B,CAAC,MAAM,IAAIS,QAAQ,CAACuD,SAAS,EAAE;MAC7B,OAAOpE,UAAU,CAACQ,WAAW;IAC/B,CAAC,MAAM,IAAIK,QAAQ,CAACwD,WAAW,EAAE;MAC/B,OAAOrE,UAAU,CAACsE,SAAS;IAC7B,CAAC,MAAM;MACL,OAAOtE,UAAU,CAACmE,OAAO;IAC3B;EACF;EAEA,OAAOnE,UAAU,CAACK,UAAU;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkD,sBAAsB,CAACgB,GAAG,EAAEC,GAAG,EAAE;EACxC,IAAID,GAAG,IAAI,IAAI,IAAIC,GAAG,IAAI,IAAI,EAAE;IAC9B,OAAO,CAAC,CAAC;EACX;EAEA,IAAID,GAAG,CAACE,SAAS,CAACrB,MAAM,CAACoB,GAAG,CAACC,SAAS,CAAC,EAAE;IACvC;IACA,IAAIF,GAAG,CAACG,OAAO,KAAKF,GAAG,CAACE,OAAO,EAAE;MAC/B,OAAO,CAAC;IACV,CAAC,MAAM,IAAIH,GAAG,CAACG,OAAO,GAAGF,GAAG,CAACE,OAAO,EAAE;MACpC,OAAO,CAAC,CAAC;IACX;IAEA,OAAO,CAAC;EACV;EAEA,OAAO,CAAC,CAAC;AACX;AAEAC,MAAM,CAACC,OAAO,GAAG;EACflE,iBAAiB;EACjBoB,eAAe;EACfyB;AACF,CAAC"},"metadata":{},"sourceType":"script"}